// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package module // [[[ program thrift source path ]]]


import (
    "context"
    "fmt"
    "strings"
    "sync"


    "thrift/lib/go/thrift"
)


// (needed to ensure safety because of naive import list construction)
var _ = context.Background
var _ = fmt.Printf
var _ = thrift.ZERO
var _ = strings.Split
var _ = sync.Mutex{}



type GetEntity interface {
    GetEntity(ctx context.Context, r *GetEntityRequest) (*GetEntityResponse, error)
    GetBool(ctx context.Context) (bool, error)
    GetByte(ctx context.Context) (int8, error)
    GetI16(ctx context.Context) (int16, error)
    GetI32(ctx context.Context) (int32, error)
    GetI64(ctx context.Context) (int64, error)
    GetDouble(ctx context.Context) (float64, error)
    GetString(ctx context.Context) (string, error)
    GetBinary(ctx context.Context) ([]byte, error)
    GetMap(ctx context.Context) (map[string]string, error)
    GetSet(ctx context.Context) ([]string, error)
    GetList(ctx context.Context) ([]string, error)
    GetLegacyStuff(ctx context.Context, numPos int64, numNeg1 int64, numNeg2 int64) (int32, error)
    GetCtxCollision(ctx1 context.Context, ctx int64) (int32, error)
    GetCtx1Collision(ctx2 context.Context, ctx int64, ctx1 int64) (int32, error)
}

// Deprecated: Use GetEntity instead.
type GetEntityClientInterface interface {
    thrift.ClientInterface
    GetEntity(r *GetEntityRequest) (*GetEntityResponse, error)
    GetBool() (bool, error)
    GetByte() (int8, error)
    GetI16() (int16, error)
    GetI32() (int32, error)
    GetI64() (int64, error)
    GetDouble() (float64, error)
    GetString() (string, error)
    GetBinary() ([]byte, error)
    GetMap() (map[string]string, error)
    GetSet() ([]string, error)
    GetList() ([]string, error)
    GetLegacyStuff(numPos int64, numNeg1 int64, numNeg2 int64) (int32, error)
    GetCtxCollision(ctx int64) (int32, error)
    GetCtx1Collision(ctx int64, ctx1 int64) (int32, error)
}

type GetEntityChannelClient struct {
    ch thrift.RequestChannel
}
// Compile time interface enforcer
var _ GetEntity = &GetEntityChannelClient{}

func NewGetEntityChannelClient(channel thrift.RequestChannel) *GetEntityChannelClient {
    return &GetEntityChannelClient{
        ch: channel,
    }
}

func (c *GetEntityChannelClient) Close() error {
    return c.ch.Close()
}

func (c *GetEntityChannelClient) IsOpen() bool {
    return c.ch.IsOpen()
}

func (c *GetEntityChannelClient) Open() error {
    return c.ch.Open()
}

// Deprecated: Use GetEntityChannelClient instead.
type GetEntityClient struct {
    chClient *GetEntityChannelClient
    Mu       sync.Mutex
}
// Compile time interface enforcer
var _ GetEntityClientInterface = &GetEntityClient{}

// Deprecated: Use NewGetEntityChannelClient() instead.
func NewGetEntityClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *GetEntityClient {
    return &GetEntityClient{
        chClient: NewGetEntityChannelClient(
            thrift.NewSerialChannel(iprot),
        ),
    }
}

func (c *GetEntityClient) Close() error {
    return c.chClient.Close()
}

func (c *GetEntityClient) IsOpen() bool {
    return c.chClient.IsOpen()
}

func (c *GetEntityClient) Open() error {
    return c.chClient.Open()
}

// Deprecated: Use GetEntityChannelClient instead.
type GetEntityThreadsafeClient = GetEntityClient

// Deprecated: Use NewGetEntityChannelClient() instead.
func NewGetEntityThreadsafeClient(t thrift.Transport, iprot thrift.Protocol, oprot thrift.Protocol) *GetEntityThreadsafeClient {
    return NewGetEntityClient(t, iprot, oprot)
}

// Deprecated: Use NewGetEntityChannelClient() instead.
func NewGetEntityClientProtocol(prot thrift.Protocol) *GetEntityClient {
  return NewGetEntityClient(prot.Transport(), prot, prot)
}

// Deprecated: Use NewGetEntityChannelClient() instead.
func NewGetEntityThreadsafeClientProtocol(prot thrift.Protocol) *GetEntityClient {
  return NewGetEntityClient(prot.Transport(), prot, prot)
}

// Deprecated: Use NewGetEntityChannelClient() instead.
func NewGetEntityClientFactory(t thrift.Transport, pf thrift.ProtocolFactory) *GetEntityClient {
  iprot := pf.GetProtocol(t)
  oprot := pf.GetProtocol(t)
  return NewGetEntityClient(t, iprot, oprot)
}

// Deprecated: Use NewGetEntityChannelClient() instead.
func NewGetEntityThreadsafeClientFactory(t thrift.Transport, pf thrift.ProtocolFactory) *GetEntityThreadsafeClient {
  return NewGetEntityClientFactory(t, pf)
}


func (c *GetEntityChannelClient) GetEntity(ctx context.Context, r *GetEntityRequest) (*GetEntityResponse, error) {
    in := &reqGetEntityGetEntity{
        R: r,
    }
    out := newRespGetEntityGetEntity()
    err := c.ch.Call(ctx, "getEntity", in, out)
    if err != nil {
        return nil, err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetEntity(r *GetEntityRequest) (*GetEntityResponse, error) {
    return c.chClient.GetEntity(context.TODO(), r)
}


func (c *GetEntityChannelClient) GetBool(ctx context.Context) (bool, error) {
    in := &reqGetEntityGetBool{
    }
    out := newRespGetEntityGetBool()
    err := c.ch.Call(ctx, "getBool", in, out)
    if err != nil {
        return false, err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetBool() (bool, error) {
    return c.chClient.GetBool(context.TODO())
}


func (c *GetEntityChannelClient) GetByte(ctx context.Context) (int8, error) {
    in := &reqGetEntityGetByte{
    }
    out := newRespGetEntityGetByte()
    err := c.ch.Call(ctx, "getByte", in, out)
    if err != nil {
        return 0, err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetByte() (int8, error) {
    return c.chClient.GetByte(context.TODO())
}


func (c *GetEntityChannelClient) GetI16(ctx context.Context) (int16, error) {
    in := &reqGetEntityGetI16{
    }
    out := newRespGetEntityGetI16()
    err := c.ch.Call(ctx, "getI16", in, out)
    if err != nil {
        return 0, err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetI16() (int16, error) {
    return c.chClient.GetI16(context.TODO())
}


func (c *GetEntityChannelClient) GetI32(ctx context.Context) (int32, error) {
    in := &reqGetEntityGetI32{
    }
    out := newRespGetEntityGetI32()
    err := c.ch.Call(ctx, "getI32", in, out)
    if err != nil {
        return 0, err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetI32() (int32, error) {
    return c.chClient.GetI32(context.TODO())
}


func (c *GetEntityChannelClient) GetI64(ctx context.Context) (int64, error) {
    in := &reqGetEntityGetI64{
    }
    out := newRespGetEntityGetI64()
    err := c.ch.Call(ctx, "getI64", in, out)
    if err != nil {
        return 0, err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetI64() (int64, error) {
    return c.chClient.GetI64(context.TODO())
}


func (c *GetEntityChannelClient) GetDouble(ctx context.Context) (float64, error) {
    in := &reqGetEntityGetDouble{
    }
    out := newRespGetEntityGetDouble()
    err := c.ch.Call(ctx, "getDouble", in, out)
    if err != nil {
        return 0.0, err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetDouble() (float64, error) {
    return c.chClient.GetDouble(context.TODO())
}


func (c *GetEntityChannelClient) GetString(ctx context.Context) (string, error) {
    in := &reqGetEntityGetString{
    }
    out := newRespGetEntityGetString()
    err := c.ch.Call(ctx, "getString", in, out)
    if err != nil {
        return "", err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetString() (string, error) {
    return c.chClient.GetString(context.TODO())
}


func (c *GetEntityChannelClient) GetBinary(ctx context.Context) ([]byte, error) {
    in := &reqGetEntityGetBinary{
    }
    out := newRespGetEntityGetBinary()
    err := c.ch.Call(ctx, "getBinary", in, out)
    if err != nil {
        return nil, err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetBinary() ([]byte, error) {
    return c.chClient.GetBinary(context.TODO())
}


func (c *GetEntityChannelClient) GetMap(ctx context.Context) (map[string]string, error) {
    in := &reqGetEntityGetMap{
    }
    out := newRespGetEntityGetMap()
    err := c.ch.Call(ctx, "getMap", in, out)
    if err != nil {
        return nil, err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetMap() (map[string]string, error) {
    return c.chClient.GetMap(context.TODO())
}


func (c *GetEntityChannelClient) GetSet(ctx context.Context) ([]string, error) {
    in := &reqGetEntityGetSet{
    }
    out := newRespGetEntityGetSet()
    err := c.ch.Call(ctx, "getSet", in, out)
    if err != nil {
        return nil, err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetSet() ([]string, error) {
    return c.chClient.GetSet(context.TODO())
}


func (c *GetEntityChannelClient) GetList(ctx context.Context) ([]string, error) {
    in := &reqGetEntityGetList{
    }
    out := newRespGetEntityGetList()
    err := c.ch.Call(ctx, "getList", in, out)
    if err != nil {
        return nil, err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetList() ([]string, error) {
    return c.chClient.GetList(context.TODO())
}


func (c *GetEntityChannelClient) GetLegacyStuff(ctx context.Context, numPos int64, numNeg1 int64, numNeg2 int64) (int32, error) {
    in := &reqGetEntityGetLegacyStuff{
        NumPos: numPos,
        NumNeg1: numNeg1,
        NumNeg2: numNeg2,
    }
    out := newRespGetEntityGetLegacyStuff()
    err := c.ch.Call(ctx, "getLegacyStuff", in, out)
    if err != nil {
        return 0, err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetLegacyStuff(numPos int64, numNeg1 int64, numNeg2 int64) (int32, error) {
    return c.chClient.GetLegacyStuff(context.TODO(), numPos, numNeg1, numNeg2)
}


func (c *GetEntityChannelClient) GetCtxCollision(ctx1 context.Context, ctx int64) (int32, error) {
    in := &reqGetEntityGetCtxCollision{
        Ctx: ctx,
    }
    out := newRespGetEntityGetCtxCollision()
    err := c.ch.Call(ctx1, "getCtxCollision", in, out)
    if err != nil {
        return 0, err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetCtxCollision(ctx int64) (int32, error) {
    return c.chClient.GetCtxCollision(context.TODO(), ctx)
}


func (c *GetEntityChannelClient) GetCtx1Collision(ctx2 context.Context, ctx int64, ctx1 int64) (int32, error) {
    in := &reqGetEntityGetCtx1Collision{
        Ctx: ctx,
        Ctx1: ctx1,
    }
    out := newRespGetEntityGetCtx1Collision()
    err := c.ch.Call(ctx2, "getCtx1Collision", in, out)
    if err != nil {
        return 0, err
    }
    return out.Value, nil
}

func (c *GetEntityClient) GetCtx1Collision(ctx int64, ctx1 int64) (int32, error) {
    return c.chClient.GetCtx1Collision(context.TODO(), ctx, ctx1)
}


type reqGetEntityGetEntity struct {
    R *GetEntityRequest `thrift:"r,1" json:"r" db:"r"`
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetEntity{}

type GetEntityGetEntityArgs = reqGetEntityGetEntity

func newReqGetEntityGetEntity() *reqGetEntityGetEntity {
    return (&reqGetEntityGetEntity{}).
        SetRNonCompat(*NewGetEntityRequest())
}

func (x *reqGetEntityGetEntity) GetRNonCompat() *GetEntityRequest {
    return x.R
}

func (x *reqGetEntityGetEntity) GetR() *GetEntityRequest {
    if !x.IsSetR() {
        return nil
    }

    return x.R
}

func (x *reqGetEntityGetEntity) SetRNonCompat(value GetEntityRequest) *reqGetEntityGetEntity {
    x.R = &value
    return x
}

func (x *reqGetEntityGetEntity) SetR(value *GetEntityRequest) *reqGetEntityGetEntity {
    x.R = value
    return x
}

func (x *reqGetEntityGetEntity) IsSetR() bool {
    return x.R != nil
}

func (x *reqGetEntityGetEntity) writeField1(p thrift.Protocol) error {  // R
    if !x.IsSetR() {
        return nil
    }

    if err := p.WriteFieldBegin("r", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetEntity) readField1(p thrift.Protocol) error {  // R
    result := *NewGetEntityRequest()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetRNonCompat(result)
    return nil
}

func (x *reqGetEntityGetEntity) toString1() string {  // R
    return fmt.Sprintf("%v", x.GetRNonCompat())
}

// Deprecated: Use newReqGetEntityGetEntity().GetR() instead.
var reqGetEntityGetEntity_R_DEFAULT = newReqGetEntityGetEntity().GetR()

// Deprecated: Use newReqGetEntityGetEntity().GetR() instead.
func (x *reqGetEntityGetEntity) DefaultGetR() *GetEntityRequest {
    if !x.IsSetR() {
        return NewGetEntityRequest()
    }
    return x.R
}


// Deprecated: Use reqGetEntityGetEntity.Set* methods instead or set the fields directly.
type reqGetEntityGetEntityBuilder struct {
    obj *reqGetEntityGetEntity
}

func newReqGetEntityGetEntityBuilder() *reqGetEntityGetEntityBuilder {
    return &reqGetEntityGetEntityBuilder{
        obj: newReqGetEntityGetEntity(),
    }
}

func (x *reqGetEntityGetEntityBuilder) R(value *GetEntityRequest) *reqGetEntityGetEntityBuilder {
    x.obj.R = value
    return x
}

func (x *reqGetEntityGetEntityBuilder) Emit() *reqGetEntityGetEntity {
    var objCopy reqGetEntityGetEntity = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetEntity) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetEntity"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetEntity) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // r
            expectedType := thrift.Type(thrift.STRUCT)
            if wireType == expectedType {
                if err := x.readField1(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetEntity) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetEntity({")
    sb.WriteString(fmt.Sprintf("R:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetEntity struct {
    Value *GetEntityResponse `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetEntity{}
var _ thrift.WritableResult = &respGetEntityGetEntity{}

func newRespGetEntityGetEntity() *respGetEntityGetEntity {
    return (&respGetEntityGetEntity{}).
        SetValueNonCompat(*NewGetEntityResponse())
}

func (x *respGetEntityGetEntity) GetValueNonCompat() *GetEntityResponse {
    return x.Value
}

func (x *respGetEntityGetEntity) GetValue() *GetEntityResponse {
    if !x.IsSetValue() {
        return nil
    }

    return x.Value
}

func (x *respGetEntityGetEntity) SetValueNonCompat(value GetEntityResponse) *respGetEntityGetEntity {
    x.Value = &value
    return x
}

func (x *respGetEntityGetEntity) SetValue(value *GetEntityResponse) *respGetEntityGetEntity {
    x.Value = value
    return x
}

func (x *respGetEntityGetEntity) IsSetValue() bool {
    return x.Value != nil
}

func (x *respGetEntityGetEntity) writeField0(p thrift.Protocol) error {  // Value
    if !x.IsSetValue() {
        return nil
    }

    if err := p.WriteFieldBegin("value", thrift.STRUCT, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetEntity) readField0(p thrift.Protocol) error {  // Value
    result := *NewGetEntityResponse()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetEntity) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}

// Deprecated: Use newRespGetEntityGetEntity().GetValue() instead.
var respGetEntityGetEntity_Value_DEFAULT = newRespGetEntityGetEntity().GetValue()

// Deprecated: Use newRespGetEntityGetEntity().GetValue() instead.
func (x *respGetEntityGetEntity) DefaultGetValue() *GetEntityResponse {
    if !x.IsSetValue() {
        return NewGetEntityResponse()
    }
    return x.Value
}


// Deprecated: Use respGetEntityGetEntity.Set* methods instead or set the fields directly.
type respGetEntityGetEntityBuilder struct {
    obj *respGetEntityGetEntity
}

func newRespGetEntityGetEntityBuilder() *respGetEntityGetEntityBuilder {
    return &respGetEntityGetEntityBuilder{
        obj: newRespGetEntityGetEntity(),
    }
}

func (x *respGetEntityGetEntityBuilder) Value(value *GetEntityResponse) *respGetEntityGetEntityBuilder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetEntityBuilder) Emit() *respGetEntityGetEntity {
    var objCopy respGetEntityGetEntity = *x.obj
    return &objCopy
}

func (x *respGetEntityGetEntity) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetEntity) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetEntity"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetEntity) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.STRUCT)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetEntity) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetEntity({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}
type reqGetEntityGetBool struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetBool{}

type GetEntityGetBoolArgs = reqGetEntityGetBool

func newReqGetEntityGetBool() *reqGetEntityGetBool {
    return (&reqGetEntityGetBool{})
}


// Deprecated: Use reqGetEntityGetBool.Set* methods instead or set the fields directly.
type reqGetEntityGetBoolBuilder struct {
    obj *reqGetEntityGetBool
}

func newReqGetEntityGetBoolBuilder() *reqGetEntityGetBoolBuilder {
    return &reqGetEntityGetBoolBuilder{
        obj: newReqGetEntityGetBool(),
    }
}

func (x *reqGetEntityGetBoolBuilder) Emit() *reqGetEntityGetBool {
    var objCopy reqGetEntityGetBool = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetBool) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetBool"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetBool) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetBool) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetBool({")
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetBool struct {
    Value bool `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetBool{}
var _ thrift.WritableResult = &respGetEntityGetBool{}

func newRespGetEntityGetBool() *respGetEntityGetBool {
    return (&respGetEntityGetBool{}).
        SetValueNonCompat(false)
}

func (x *respGetEntityGetBool) GetValueNonCompat() bool {
    return x.Value
}

func (x *respGetEntityGetBool) GetValue() bool {
    return x.Value
}

func (x *respGetEntityGetBool) SetValueNonCompat(value bool) *respGetEntityGetBool {
    x.Value = value
    return x
}

func (x *respGetEntityGetBool) SetValue(value bool) *respGetEntityGetBool {
    x.Value = value
    return x
}

func (x *respGetEntityGetBool) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.BOOL, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetBool) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetBool) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}


// Deprecated: Use respGetEntityGetBool.Set* methods instead or set the fields directly.
type respGetEntityGetBoolBuilder struct {
    obj *respGetEntityGetBool
}

func newRespGetEntityGetBoolBuilder() *respGetEntityGetBoolBuilder {
    return &respGetEntityGetBoolBuilder{
        obj: newRespGetEntityGetBool(),
    }
}

func (x *respGetEntityGetBoolBuilder) Value(value bool) *respGetEntityGetBoolBuilder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetBoolBuilder) Emit() *respGetEntityGetBool {
    var objCopy respGetEntityGetBool = *x.obj
    return &objCopy
}

func (x *respGetEntityGetBool) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetBool) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetBool"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetBool) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.BOOL)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetBool) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetBool({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}
type reqGetEntityGetByte struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetByte{}

type GetEntityGetByteArgs = reqGetEntityGetByte

func newReqGetEntityGetByte() *reqGetEntityGetByte {
    return (&reqGetEntityGetByte{})
}


// Deprecated: Use reqGetEntityGetByte.Set* methods instead or set the fields directly.
type reqGetEntityGetByteBuilder struct {
    obj *reqGetEntityGetByte
}

func newReqGetEntityGetByteBuilder() *reqGetEntityGetByteBuilder {
    return &reqGetEntityGetByteBuilder{
        obj: newReqGetEntityGetByte(),
    }
}

func (x *reqGetEntityGetByteBuilder) Emit() *reqGetEntityGetByte {
    var objCopy reqGetEntityGetByte = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetByte) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetByte"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetByte) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetByte) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetByte({")
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetByte struct {
    Value int8 `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetByte{}
var _ thrift.WritableResult = &respGetEntityGetByte{}

func newRespGetEntityGetByte() *respGetEntityGetByte {
    return (&respGetEntityGetByte{}).
        SetValueNonCompat(0)
}

func (x *respGetEntityGetByte) GetValueNonCompat() int8 {
    return x.Value
}

func (x *respGetEntityGetByte) GetValue() int8 {
    return x.Value
}

func (x *respGetEntityGetByte) SetValueNonCompat(value int8) *respGetEntityGetByte {
    x.Value = value
    return x
}

func (x *respGetEntityGetByte) SetValue(value int8) *respGetEntityGetByte {
    x.Value = value
    return x
}

func (x *respGetEntityGetByte) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.BYTE, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetByte) readField0(p thrift.Protocol) error {  // Value
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetByte) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}


// Deprecated: Use respGetEntityGetByte.Set* methods instead or set the fields directly.
type respGetEntityGetByteBuilder struct {
    obj *respGetEntityGetByte
}

func newRespGetEntityGetByteBuilder() *respGetEntityGetByteBuilder {
    return &respGetEntityGetByteBuilder{
        obj: newRespGetEntityGetByte(),
    }
}

func (x *respGetEntityGetByteBuilder) Value(value int8) *respGetEntityGetByteBuilder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetByteBuilder) Emit() *respGetEntityGetByte {
    var objCopy respGetEntityGetByte = *x.obj
    return &objCopy
}

func (x *respGetEntityGetByte) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetByte) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetByte"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetByte) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.BYTE)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetByte) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetByte({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}
type reqGetEntityGetI16 struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetI16{}

type GetEntityGetI16Args = reqGetEntityGetI16

func newReqGetEntityGetI16() *reqGetEntityGetI16 {
    return (&reqGetEntityGetI16{})
}


// Deprecated: Use reqGetEntityGetI16.Set* methods instead or set the fields directly.
type reqGetEntityGetI16Builder struct {
    obj *reqGetEntityGetI16
}

func newReqGetEntityGetI16Builder() *reqGetEntityGetI16Builder {
    return &reqGetEntityGetI16Builder{
        obj: newReqGetEntityGetI16(),
    }
}

func (x *reqGetEntityGetI16Builder) Emit() *reqGetEntityGetI16 {
    var objCopy reqGetEntityGetI16 = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetI16) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetI16"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetI16) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetI16) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetI16({")
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetI16 struct {
    Value int16 `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetI16{}
var _ thrift.WritableResult = &respGetEntityGetI16{}

func newRespGetEntityGetI16() *respGetEntityGetI16 {
    return (&respGetEntityGetI16{}).
        SetValueNonCompat(0)
}

func (x *respGetEntityGetI16) GetValueNonCompat() int16 {
    return x.Value
}

func (x *respGetEntityGetI16) GetValue() int16 {
    return x.Value
}

func (x *respGetEntityGetI16) SetValueNonCompat(value int16) *respGetEntityGetI16 {
    x.Value = value
    return x
}

func (x *respGetEntityGetI16) SetValue(value int16) *respGetEntityGetI16 {
    x.Value = value
    return x
}

func (x *respGetEntityGetI16) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.I16, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetI16) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetI16) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}


// Deprecated: Use respGetEntityGetI16.Set* methods instead or set the fields directly.
type respGetEntityGetI16Builder struct {
    obj *respGetEntityGetI16
}

func newRespGetEntityGetI16Builder() *respGetEntityGetI16Builder {
    return &respGetEntityGetI16Builder{
        obj: newRespGetEntityGetI16(),
    }
}

func (x *respGetEntityGetI16Builder) Value(value int16) *respGetEntityGetI16Builder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetI16Builder) Emit() *respGetEntityGetI16 {
    var objCopy respGetEntityGetI16 = *x.obj
    return &objCopy
}

func (x *respGetEntityGetI16) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetI16) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetI16"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetI16) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.I16)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetI16) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetI16({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}
type reqGetEntityGetI32 struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetI32{}

type GetEntityGetI32Args = reqGetEntityGetI32

func newReqGetEntityGetI32() *reqGetEntityGetI32 {
    return (&reqGetEntityGetI32{})
}


// Deprecated: Use reqGetEntityGetI32.Set* methods instead or set the fields directly.
type reqGetEntityGetI32Builder struct {
    obj *reqGetEntityGetI32
}

func newReqGetEntityGetI32Builder() *reqGetEntityGetI32Builder {
    return &reqGetEntityGetI32Builder{
        obj: newReqGetEntityGetI32(),
    }
}

func (x *reqGetEntityGetI32Builder) Emit() *reqGetEntityGetI32 {
    var objCopy reqGetEntityGetI32 = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetI32) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetI32"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetI32) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetI32) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetI32({")
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetI32 struct {
    Value int32 `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetI32{}
var _ thrift.WritableResult = &respGetEntityGetI32{}

func newRespGetEntityGetI32() *respGetEntityGetI32 {
    return (&respGetEntityGetI32{}).
        SetValueNonCompat(0)
}

func (x *respGetEntityGetI32) GetValueNonCompat() int32 {
    return x.Value
}

func (x *respGetEntityGetI32) GetValue() int32 {
    return x.Value
}

func (x *respGetEntityGetI32) SetValueNonCompat(value int32) *respGetEntityGetI32 {
    x.Value = value
    return x
}

func (x *respGetEntityGetI32) SetValue(value int32) *respGetEntityGetI32 {
    x.Value = value
    return x
}

func (x *respGetEntityGetI32) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.I32, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetI32) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetI32) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}


// Deprecated: Use respGetEntityGetI32.Set* methods instead or set the fields directly.
type respGetEntityGetI32Builder struct {
    obj *respGetEntityGetI32
}

func newRespGetEntityGetI32Builder() *respGetEntityGetI32Builder {
    return &respGetEntityGetI32Builder{
        obj: newRespGetEntityGetI32(),
    }
}

func (x *respGetEntityGetI32Builder) Value(value int32) *respGetEntityGetI32Builder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetI32Builder) Emit() *respGetEntityGetI32 {
    var objCopy respGetEntityGetI32 = *x.obj
    return &objCopy
}

func (x *respGetEntityGetI32) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetI32) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetI32"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetI32) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.I32)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetI32) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetI32({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}
type reqGetEntityGetI64 struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetI64{}

type GetEntityGetI64Args = reqGetEntityGetI64

func newReqGetEntityGetI64() *reqGetEntityGetI64 {
    return (&reqGetEntityGetI64{})
}


// Deprecated: Use reqGetEntityGetI64.Set* methods instead or set the fields directly.
type reqGetEntityGetI64Builder struct {
    obj *reqGetEntityGetI64
}

func newReqGetEntityGetI64Builder() *reqGetEntityGetI64Builder {
    return &reqGetEntityGetI64Builder{
        obj: newReqGetEntityGetI64(),
    }
}

func (x *reqGetEntityGetI64Builder) Emit() *reqGetEntityGetI64 {
    var objCopy reqGetEntityGetI64 = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetI64) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetI64"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetI64) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetI64) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetI64({")
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetI64 struct {
    Value int64 `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetI64{}
var _ thrift.WritableResult = &respGetEntityGetI64{}

func newRespGetEntityGetI64() *respGetEntityGetI64 {
    return (&respGetEntityGetI64{}).
        SetValueNonCompat(0)
}

func (x *respGetEntityGetI64) GetValueNonCompat() int64 {
    return x.Value
}

func (x *respGetEntityGetI64) GetValue() int64 {
    return x.Value
}

func (x *respGetEntityGetI64) SetValueNonCompat(value int64) *respGetEntityGetI64 {
    x.Value = value
    return x
}

func (x *respGetEntityGetI64) SetValue(value int64) *respGetEntityGetI64 {
    x.Value = value
    return x
}

func (x *respGetEntityGetI64) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.I64, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetI64) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetI64) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}


// Deprecated: Use respGetEntityGetI64.Set* methods instead or set the fields directly.
type respGetEntityGetI64Builder struct {
    obj *respGetEntityGetI64
}

func newRespGetEntityGetI64Builder() *respGetEntityGetI64Builder {
    return &respGetEntityGetI64Builder{
        obj: newRespGetEntityGetI64(),
    }
}

func (x *respGetEntityGetI64Builder) Value(value int64) *respGetEntityGetI64Builder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetI64Builder) Emit() *respGetEntityGetI64 {
    var objCopy respGetEntityGetI64 = *x.obj
    return &objCopy
}

func (x *respGetEntityGetI64) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetI64) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetI64"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetI64) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.I64)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetI64) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetI64({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}
type reqGetEntityGetDouble struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetDouble{}

type GetEntityGetDoubleArgs = reqGetEntityGetDouble

func newReqGetEntityGetDouble() *reqGetEntityGetDouble {
    return (&reqGetEntityGetDouble{})
}


// Deprecated: Use reqGetEntityGetDouble.Set* methods instead or set the fields directly.
type reqGetEntityGetDoubleBuilder struct {
    obj *reqGetEntityGetDouble
}

func newReqGetEntityGetDoubleBuilder() *reqGetEntityGetDoubleBuilder {
    return &reqGetEntityGetDoubleBuilder{
        obj: newReqGetEntityGetDouble(),
    }
}

func (x *reqGetEntityGetDoubleBuilder) Emit() *reqGetEntityGetDouble {
    var objCopy reqGetEntityGetDouble = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetDouble) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetDouble"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetDouble) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetDouble) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetDouble({")
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetDouble struct {
    Value float64 `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetDouble{}
var _ thrift.WritableResult = &respGetEntityGetDouble{}

func newRespGetEntityGetDouble() *respGetEntityGetDouble {
    return (&respGetEntityGetDouble{}).
        SetValueNonCompat(0.0)
}

func (x *respGetEntityGetDouble) GetValueNonCompat() float64 {
    return x.Value
}

func (x *respGetEntityGetDouble) GetValue() float64 {
    return x.Value
}

func (x *respGetEntityGetDouble) SetValueNonCompat(value float64) *respGetEntityGetDouble {
    x.Value = value
    return x
}

func (x *respGetEntityGetDouble) SetValue(value float64) *respGetEntityGetDouble {
    x.Value = value
    return x
}

func (x *respGetEntityGetDouble) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.DOUBLE, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetDouble) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetDouble) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}


// Deprecated: Use respGetEntityGetDouble.Set* methods instead or set the fields directly.
type respGetEntityGetDoubleBuilder struct {
    obj *respGetEntityGetDouble
}

func newRespGetEntityGetDoubleBuilder() *respGetEntityGetDoubleBuilder {
    return &respGetEntityGetDoubleBuilder{
        obj: newRespGetEntityGetDouble(),
    }
}

func (x *respGetEntityGetDoubleBuilder) Value(value float64) *respGetEntityGetDoubleBuilder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetDoubleBuilder) Emit() *respGetEntityGetDouble {
    var objCopy respGetEntityGetDouble = *x.obj
    return &objCopy
}

func (x *respGetEntityGetDouble) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetDouble) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetDouble"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetDouble) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.DOUBLE)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetDouble) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetDouble({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}
type reqGetEntityGetString struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetString{}

type GetEntityGetStringArgs = reqGetEntityGetString

func newReqGetEntityGetString() *reqGetEntityGetString {
    return (&reqGetEntityGetString{})
}


// Deprecated: Use reqGetEntityGetString.Set* methods instead or set the fields directly.
type reqGetEntityGetStringBuilder struct {
    obj *reqGetEntityGetString
}

func newReqGetEntityGetStringBuilder() *reqGetEntityGetStringBuilder {
    return &reqGetEntityGetStringBuilder{
        obj: newReqGetEntityGetString(),
    }
}

func (x *reqGetEntityGetStringBuilder) Emit() *reqGetEntityGetString {
    var objCopy reqGetEntityGetString = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetString) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetString"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetString) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetString) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetString({")
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetString struct {
    Value string `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetString{}
var _ thrift.WritableResult = &respGetEntityGetString{}

func newRespGetEntityGetString() *respGetEntityGetString {
    return (&respGetEntityGetString{}).
        SetValueNonCompat("")
}

func (x *respGetEntityGetString) GetValueNonCompat() string {
    return x.Value
}

func (x *respGetEntityGetString) GetValue() string {
    return x.Value
}

func (x *respGetEntityGetString) SetValueNonCompat(value string) *respGetEntityGetString {
    x.Value = value
    return x
}

func (x *respGetEntityGetString) SetValue(value string) *respGetEntityGetString {
    x.Value = value
    return x
}

func (x *respGetEntityGetString) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.STRING, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetString) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetString) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}


// Deprecated: Use respGetEntityGetString.Set* methods instead or set the fields directly.
type respGetEntityGetStringBuilder struct {
    obj *respGetEntityGetString
}

func newRespGetEntityGetStringBuilder() *respGetEntityGetStringBuilder {
    return &respGetEntityGetStringBuilder{
        obj: newRespGetEntityGetString(),
    }
}

func (x *respGetEntityGetStringBuilder) Value(value string) *respGetEntityGetStringBuilder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetStringBuilder) Emit() *respGetEntityGetString {
    var objCopy respGetEntityGetString = *x.obj
    return &objCopy
}

func (x *respGetEntityGetString) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetString) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetString"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetString) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.STRING)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetString) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetString({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}
type reqGetEntityGetBinary struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetBinary{}

type GetEntityGetBinaryArgs = reqGetEntityGetBinary

func newReqGetEntityGetBinary() *reqGetEntityGetBinary {
    return (&reqGetEntityGetBinary{})
}


// Deprecated: Use reqGetEntityGetBinary.Set* methods instead or set the fields directly.
type reqGetEntityGetBinaryBuilder struct {
    obj *reqGetEntityGetBinary
}

func newReqGetEntityGetBinaryBuilder() *reqGetEntityGetBinaryBuilder {
    return &reqGetEntityGetBinaryBuilder{
        obj: newReqGetEntityGetBinary(),
    }
}

func (x *reqGetEntityGetBinaryBuilder) Emit() *reqGetEntityGetBinary {
    var objCopy reqGetEntityGetBinary = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetBinary) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetBinary"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetBinary) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetBinary) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetBinary({")
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetBinary struct {
    Value []byte `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetBinary{}
var _ thrift.WritableResult = &respGetEntityGetBinary{}

func newRespGetEntityGetBinary() *respGetEntityGetBinary {
    return (&respGetEntityGetBinary{}).
        SetValueNonCompat([]byte(""))
}

func (x *respGetEntityGetBinary) GetValueNonCompat() []byte {
    return x.Value
}

func (x *respGetEntityGetBinary) GetValue() []byte {
    if !x.IsSetValue() {
        return []byte("")
    }

    return x.Value
}

func (x *respGetEntityGetBinary) SetValueNonCompat(value []byte) *respGetEntityGetBinary {
    x.Value = value
    return x
}

func (x *respGetEntityGetBinary) SetValue(value []byte) *respGetEntityGetBinary {
    x.Value = value
    return x
}

func (x *respGetEntityGetBinary) IsSetValue() bool {
    return x.Value != nil
}

func (x *respGetEntityGetBinary) writeField0(p thrift.Protocol) error {  // Value
    if !x.IsSetValue() {
        return nil
    }

    if err := p.WriteFieldBegin("value", thrift.STRING, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetBinary) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetBinary) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}


// Deprecated: Use respGetEntityGetBinary.Set* methods instead or set the fields directly.
type respGetEntityGetBinaryBuilder struct {
    obj *respGetEntityGetBinary
}

func newRespGetEntityGetBinaryBuilder() *respGetEntityGetBinaryBuilder {
    return &respGetEntityGetBinaryBuilder{
        obj: newRespGetEntityGetBinary(),
    }
}

func (x *respGetEntityGetBinaryBuilder) Value(value []byte) *respGetEntityGetBinaryBuilder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetBinaryBuilder) Emit() *respGetEntityGetBinary {
    var objCopy respGetEntityGetBinary = *x.obj
    return &objCopy
}

func (x *respGetEntityGetBinary) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetBinary) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetBinary"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetBinary) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.STRING)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetBinary) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetBinary({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}
type reqGetEntityGetMap struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetMap{}

type GetEntityGetMapArgs = reqGetEntityGetMap

func newReqGetEntityGetMap() *reqGetEntityGetMap {
    return (&reqGetEntityGetMap{})
}


// Deprecated: Use reqGetEntityGetMap.Set* methods instead or set the fields directly.
type reqGetEntityGetMapBuilder struct {
    obj *reqGetEntityGetMap
}

func newReqGetEntityGetMapBuilder() *reqGetEntityGetMapBuilder {
    return &reqGetEntityGetMapBuilder{
        obj: newReqGetEntityGetMap(),
    }
}

func (x *reqGetEntityGetMapBuilder) Emit() *reqGetEntityGetMap {
    var objCopy reqGetEntityGetMap = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetMap) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetMap"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetMap) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetMap) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetMap({")
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetMap struct {
    Value map[string]string `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetMap{}
var _ thrift.WritableResult = &respGetEntityGetMap{}

func newRespGetEntityGetMap() *respGetEntityGetMap {
    return (&respGetEntityGetMap{}).
        SetValueNonCompat(nil)
}

func (x *respGetEntityGetMap) GetValueNonCompat() map[string]string {
    return x.Value
}

func (x *respGetEntityGetMap) GetValue() map[string]string {
    if !x.IsSetValue() {
        return nil
    }

    return x.Value
}

func (x *respGetEntityGetMap) SetValueNonCompat(value map[string]string) *respGetEntityGetMap {
    x.Value = value
    return x
}

func (x *respGetEntityGetMap) SetValue(value map[string]string) *respGetEntityGetMap {
    x.Value = value
    return x
}

func (x *respGetEntityGetMap) IsSetValue() bool {
    return x.Value != nil
}

func (x *respGetEntityGetMap) writeField0(p thrift.Protocol) error {  // Value
    if !x.IsSetValue() {
        return nil
    }

    if err := p.WriteFieldBegin("value", thrift.MAP, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetMap) readField0(p thrift.Protocol) error {  // Value
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetMap) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}


// Deprecated: Use respGetEntityGetMap.Set* methods instead or set the fields directly.
type respGetEntityGetMapBuilder struct {
    obj *respGetEntityGetMap
}

func newRespGetEntityGetMapBuilder() *respGetEntityGetMapBuilder {
    return &respGetEntityGetMapBuilder{
        obj: newRespGetEntityGetMap(),
    }
}

func (x *respGetEntityGetMapBuilder) Value(value map[string]string) *respGetEntityGetMapBuilder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetMapBuilder) Emit() *respGetEntityGetMap {
    var objCopy respGetEntityGetMap = *x.obj
    return &objCopy
}

func (x *respGetEntityGetMap) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetMap) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetMap"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetMap) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.MAP)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetMap) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetMap({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}
type reqGetEntityGetSet struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetSet{}

type GetEntityGetSetArgs = reqGetEntityGetSet

func newReqGetEntityGetSet() *reqGetEntityGetSet {
    return (&reqGetEntityGetSet{})
}


// Deprecated: Use reqGetEntityGetSet.Set* methods instead or set the fields directly.
type reqGetEntityGetSetBuilder struct {
    obj *reqGetEntityGetSet
}

func newReqGetEntityGetSetBuilder() *reqGetEntityGetSetBuilder {
    return &reqGetEntityGetSetBuilder{
        obj: newReqGetEntityGetSet(),
    }
}

func (x *reqGetEntityGetSetBuilder) Emit() *reqGetEntityGetSet {
    var objCopy reqGetEntityGetSet = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetSet) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetSet"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetSet) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetSet) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetSet({")
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetSet struct {
    Value []string `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetSet{}
var _ thrift.WritableResult = &respGetEntityGetSet{}

func newRespGetEntityGetSet() *respGetEntityGetSet {
    return (&respGetEntityGetSet{}).
        SetValueNonCompat(nil)
}

func (x *respGetEntityGetSet) GetValueNonCompat() []string {
    return x.Value
}

func (x *respGetEntityGetSet) GetValue() []string {
    if !x.IsSetValue() {
        return nil
    }

    return x.Value
}

func (x *respGetEntityGetSet) SetValueNonCompat(value []string) *respGetEntityGetSet {
    x.Value = value
    return x
}

func (x *respGetEntityGetSet) SetValue(value []string) *respGetEntityGetSet {
    x.Value = value
    return x
}

func (x *respGetEntityGetSet) IsSetValue() bool {
    return x.Value != nil
}

func (x *respGetEntityGetSet) writeField0(p thrift.Protocol) error {  // Value
    if !x.IsSetValue() {
        return nil
    }

    if err := p.WriteFieldBegin("value", thrift.SET, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetSet) readField0(p thrift.Protocol) error {  // Value
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetSet) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}


// Deprecated: Use respGetEntityGetSet.Set* methods instead or set the fields directly.
type respGetEntityGetSetBuilder struct {
    obj *respGetEntityGetSet
}

func newRespGetEntityGetSetBuilder() *respGetEntityGetSetBuilder {
    return &respGetEntityGetSetBuilder{
        obj: newRespGetEntityGetSet(),
    }
}

func (x *respGetEntityGetSetBuilder) Value(value []string) *respGetEntityGetSetBuilder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetSetBuilder) Emit() *respGetEntityGetSet {
    var objCopy respGetEntityGetSet = *x.obj
    return &objCopy
}

func (x *respGetEntityGetSet) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetSet) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetSet"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetSet) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.SET)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetSet) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetSet({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}
type reqGetEntityGetList struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetList{}

type GetEntityGetListArgs = reqGetEntityGetList

func newReqGetEntityGetList() *reqGetEntityGetList {
    return (&reqGetEntityGetList{})
}


// Deprecated: Use reqGetEntityGetList.Set* methods instead or set the fields directly.
type reqGetEntityGetListBuilder struct {
    obj *reqGetEntityGetList
}

func newReqGetEntityGetListBuilder() *reqGetEntityGetListBuilder {
    return &reqGetEntityGetListBuilder{
        obj: newReqGetEntityGetList(),
    }
}

func (x *reqGetEntityGetListBuilder) Emit() *reqGetEntityGetList {
    var objCopy reqGetEntityGetList = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetList) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetList"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetList) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetList) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetList({")
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetList struct {
    Value []string `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetList{}
var _ thrift.WritableResult = &respGetEntityGetList{}

func newRespGetEntityGetList() *respGetEntityGetList {
    return (&respGetEntityGetList{}).
        SetValueNonCompat(nil)
}

func (x *respGetEntityGetList) GetValueNonCompat() []string {
    return x.Value
}

func (x *respGetEntityGetList) GetValue() []string {
    if !x.IsSetValue() {
        return nil
    }

    return x.Value
}

func (x *respGetEntityGetList) SetValueNonCompat(value []string) *respGetEntityGetList {
    x.Value = value
    return x
}

func (x *respGetEntityGetList) SetValue(value []string) *respGetEntityGetList {
    x.Value = value
    return x
}

func (x *respGetEntityGetList) IsSetValue() bool {
    return x.Value != nil
}

func (x *respGetEntityGetList) writeField0(p thrift.Protocol) error {  // Value
    if !x.IsSetValue() {
        return nil
    }

    if err := p.WriteFieldBegin("value", thrift.LIST, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteListBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetList) readField0(p thrift.Protocol) error {  // Value
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetList) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}


// Deprecated: Use respGetEntityGetList.Set* methods instead or set the fields directly.
type respGetEntityGetListBuilder struct {
    obj *respGetEntityGetList
}

func newRespGetEntityGetListBuilder() *respGetEntityGetListBuilder {
    return &respGetEntityGetListBuilder{
        obj: newRespGetEntityGetList(),
    }
}

func (x *respGetEntityGetListBuilder) Value(value []string) *respGetEntityGetListBuilder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetListBuilder) Emit() *respGetEntityGetList {
    var objCopy respGetEntityGetList = *x.obj
    return &objCopy
}

func (x *respGetEntityGetList) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetList) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetList"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetList) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.LIST)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetList) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetList({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}
type reqGetEntityGetLegacyStuff struct {
    NumPos int64 `thrift:"numPos,1" json:"numPos" db:"numPos"`
    NumNeg1 int64 `thrift:"numNeg1,-1" json:"numNeg1" db:"numNeg1"`
    NumNeg2 int64 `thrift:"numNeg2,-2" json:"numNeg2" db:"numNeg2"`
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetLegacyStuff{}

type GetEntityGetLegacyStuffArgs = reqGetEntityGetLegacyStuff

func newReqGetEntityGetLegacyStuff() *reqGetEntityGetLegacyStuff {
    return (&reqGetEntityGetLegacyStuff{}).
        SetNumPosNonCompat(0).
        SetNumNeg1NonCompat(0).
        SetNumNeg2NonCompat(0)
}

func (x *reqGetEntityGetLegacyStuff) GetNumPosNonCompat() int64 {
    return x.NumPos
}

func (x *reqGetEntityGetLegacyStuff) GetNumPos() int64 {
    return x.NumPos
}

func (x *reqGetEntityGetLegacyStuff) GetNumNeg1NonCompat() int64 {
    return x.NumNeg1
}

func (x *reqGetEntityGetLegacyStuff) GetNumNeg1() int64 {
    return x.NumNeg1
}

func (x *reqGetEntityGetLegacyStuff) GetNumNeg2NonCompat() int64 {
    return x.NumNeg2
}

func (x *reqGetEntityGetLegacyStuff) GetNumNeg2() int64 {
    return x.NumNeg2
}

func (x *reqGetEntityGetLegacyStuff) SetNumPosNonCompat(value int64) *reqGetEntityGetLegacyStuff {
    x.NumPos = value
    return x
}

func (x *reqGetEntityGetLegacyStuff) SetNumPos(value int64) *reqGetEntityGetLegacyStuff {
    x.NumPos = value
    return x
}

func (x *reqGetEntityGetLegacyStuff) SetNumNeg1NonCompat(value int64) *reqGetEntityGetLegacyStuff {
    x.NumNeg1 = value
    return x
}

func (x *reqGetEntityGetLegacyStuff) SetNumNeg1(value int64) *reqGetEntityGetLegacyStuff {
    x.NumNeg1 = value
    return x
}

func (x *reqGetEntityGetLegacyStuff) SetNumNeg2NonCompat(value int64) *reqGetEntityGetLegacyStuff {
    x.NumNeg2 = value
    return x
}

func (x *reqGetEntityGetLegacyStuff) SetNumNeg2(value int64) *reqGetEntityGetLegacyStuff {
    x.NumNeg2 = value
    return x
}

func (x *reqGetEntityGetLegacyStuff) writeField1(p thrift.Protocol) error {  // NumPos
    if err := p.WriteFieldBegin("numPos", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNumPosNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetLegacyStuff) writeField_1(p thrift.Protocol) error {  // NumNeg1
    if err := p.WriteFieldBegin("numNeg1", thrift.I64, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNumNeg1NonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetLegacyStuff) writeField_2(p thrift.Protocol) error {  // NumNeg2
    if err := p.WriteFieldBegin("numNeg2", thrift.I64, -2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNumNeg2NonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetLegacyStuff) readField1(p thrift.Protocol) error {  // NumPos
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetNumPosNonCompat(result)
    return nil
}

func (x *reqGetEntityGetLegacyStuff) readField_1(p thrift.Protocol) error {  // NumNeg1
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetNumNeg1NonCompat(result)
    return nil
}

func (x *reqGetEntityGetLegacyStuff) readField_2(p thrift.Protocol) error {  // NumNeg2
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetNumNeg2NonCompat(result)
    return nil
}

func (x *reqGetEntityGetLegacyStuff) toString1() string {  // NumPos
    return fmt.Sprintf("%v", x.GetNumPosNonCompat())
}

func (x *reqGetEntityGetLegacyStuff) toString_1() string {  // NumNeg1
    return fmt.Sprintf("%v", x.GetNumNeg1NonCompat())
}

func (x *reqGetEntityGetLegacyStuff) toString_2() string {  // NumNeg2
    return fmt.Sprintf("%v", x.GetNumNeg2NonCompat())
}


// Deprecated: Use reqGetEntityGetLegacyStuff.Set* methods instead or set the fields directly.
type reqGetEntityGetLegacyStuffBuilder struct {
    obj *reqGetEntityGetLegacyStuff
}

func newReqGetEntityGetLegacyStuffBuilder() *reqGetEntityGetLegacyStuffBuilder {
    return &reqGetEntityGetLegacyStuffBuilder{
        obj: newReqGetEntityGetLegacyStuff(),
    }
}

func (x *reqGetEntityGetLegacyStuffBuilder) NumPos(value int64) *reqGetEntityGetLegacyStuffBuilder {
    x.obj.NumPos = value
    return x
}

func (x *reqGetEntityGetLegacyStuffBuilder) NumNeg1(value int64) *reqGetEntityGetLegacyStuffBuilder {
    x.obj.NumNeg1 = value
    return x
}

func (x *reqGetEntityGetLegacyStuffBuilder) NumNeg2(value int64) *reqGetEntityGetLegacyStuffBuilder {
    x.obj.NumNeg2 = value
    return x
}

func (x *reqGetEntityGetLegacyStuffBuilder) Emit() *reqGetEntityGetLegacyStuff {
    var objCopy reqGetEntityGetLegacyStuff = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetLegacyStuff) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetLegacyStuff"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := x.writeField_2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetLegacyStuff) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // numPos
            expectedType := thrift.Type(thrift.I64)
            if wireType == expectedType {
                if err := x.readField1(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        case -1:  // numNeg1
            expectedType := thrift.Type(thrift.I64)
            if wireType == expectedType {
                if err := x.readField_1(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        case -2:  // numNeg2
            expectedType := thrift.Type(thrift.I64)
            if wireType == expectedType {
                if err := x.readField_2(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetLegacyStuff) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetLegacyStuff({")
    sb.WriteString(fmt.Sprintf("NumPos:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("NumNeg1:%s ", x.toString_1()))
    sb.WriteString(fmt.Sprintf("NumNeg2:%s", x.toString_2()))
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetLegacyStuff struct {
    Value int32 `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetLegacyStuff{}
var _ thrift.WritableResult = &respGetEntityGetLegacyStuff{}

func newRespGetEntityGetLegacyStuff() *respGetEntityGetLegacyStuff {
    return (&respGetEntityGetLegacyStuff{}).
        SetValueNonCompat(0)
}

func (x *respGetEntityGetLegacyStuff) GetValueNonCompat() int32 {
    return x.Value
}

func (x *respGetEntityGetLegacyStuff) GetValue() int32 {
    return x.Value
}

func (x *respGetEntityGetLegacyStuff) SetValueNonCompat(value int32) *respGetEntityGetLegacyStuff {
    x.Value = value
    return x
}

func (x *respGetEntityGetLegacyStuff) SetValue(value int32) *respGetEntityGetLegacyStuff {
    x.Value = value
    return x
}

func (x *respGetEntityGetLegacyStuff) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.I32, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetLegacyStuff) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetLegacyStuff) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}


// Deprecated: Use respGetEntityGetLegacyStuff.Set* methods instead or set the fields directly.
type respGetEntityGetLegacyStuffBuilder struct {
    obj *respGetEntityGetLegacyStuff
}

func newRespGetEntityGetLegacyStuffBuilder() *respGetEntityGetLegacyStuffBuilder {
    return &respGetEntityGetLegacyStuffBuilder{
        obj: newRespGetEntityGetLegacyStuff(),
    }
}

func (x *respGetEntityGetLegacyStuffBuilder) Value(value int32) *respGetEntityGetLegacyStuffBuilder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetLegacyStuffBuilder) Emit() *respGetEntityGetLegacyStuff {
    var objCopy respGetEntityGetLegacyStuff = *x.obj
    return &objCopy
}

func (x *respGetEntityGetLegacyStuff) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetLegacyStuff) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetLegacyStuff"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetLegacyStuff) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.I32)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetLegacyStuff) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetLegacyStuff({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}
type reqGetEntityGetCtxCollision struct {
    Ctx int64 `thrift:"ctx,1" json:"ctx" db:"ctx"`
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetCtxCollision{}

type GetEntityGetCtxCollisionArgs = reqGetEntityGetCtxCollision

func newReqGetEntityGetCtxCollision() *reqGetEntityGetCtxCollision {
    return (&reqGetEntityGetCtxCollision{}).
        SetCtxNonCompat(0)
}

func (x *reqGetEntityGetCtxCollision) GetCtxNonCompat() int64 {
    return x.Ctx
}

func (x *reqGetEntityGetCtxCollision) GetCtx() int64 {
    return x.Ctx
}

func (x *reqGetEntityGetCtxCollision) SetCtxNonCompat(value int64) *reqGetEntityGetCtxCollision {
    x.Ctx = value
    return x
}

func (x *reqGetEntityGetCtxCollision) SetCtx(value int64) *reqGetEntityGetCtxCollision {
    x.Ctx = value
    return x
}

func (x *reqGetEntityGetCtxCollision) writeField1(p thrift.Protocol) error {  // Ctx
    if err := p.WriteFieldBegin("ctx", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetCtxNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetCtxCollision) readField1(p thrift.Protocol) error {  // Ctx
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetCtxNonCompat(result)
    return nil
}

func (x *reqGetEntityGetCtxCollision) toString1() string {  // Ctx
    return fmt.Sprintf("%v", x.GetCtxNonCompat())
}


// Deprecated: Use reqGetEntityGetCtxCollision.Set* methods instead or set the fields directly.
type reqGetEntityGetCtxCollisionBuilder struct {
    obj *reqGetEntityGetCtxCollision
}

func newReqGetEntityGetCtxCollisionBuilder() *reqGetEntityGetCtxCollisionBuilder {
    return &reqGetEntityGetCtxCollisionBuilder{
        obj: newReqGetEntityGetCtxCollision(),
    }
}

func (x *reqGetEntityGetCtxCollisionBuilder) Ctx(value int64) *reqGetEntityGetCtxCollisionBuilder {
    x.obj.Ctx = value
    return x
}

func (x *reqGetEntityGetCtxCollisionBuilder) Emit() *reqGetEntityGetCtxCollision {
    var objCopy reqGetEntityGetCtxCollision = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetCtxCollision) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetCtxCollision"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetCtxCollision) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // ctx
            expectedType := thrift.Type(thrift.I64)
            if wireType == expectedType {
                if err := x.readField1(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetCtxCollision) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetCtxCollision({")
    sb.WriteString(fmt.Sprintf("Ctx:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetCtxCollision struct {
    Value int32 `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetCtxCollision{}
var _ thrift.WritableResult = &respGetEntityGetCtxCollision{}

func newRespGetEntityGetCtxCollision() *respGetEntityGetCtxCollision {
    return (&respGetEntityGetCtxCollision{}).
        SetValueNonCompat(0)
}

func (x *respGetEntityGetCtxCollision) GetValueNonCompat() int32 {
    return x.Value
}

func (x *respGetEntityGetCtxCollision) GetValue() int32 {
    return x.Value
}

func (x *respGetEntityGetCtxCollision) SetValueNonCompat(value int32) *respGetEntityGetCtxCollision {
    x.Value = value
    return x
}

func (x *respGetEntityGetCtxCollision) SetValue(value int32) *respGetEntityGetCtxCollision {
    x.Value = value
    return x
}

func (x *respGetEntityGetCtxCollision) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.I32, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetCtxCollision) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetCtxCollision) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}


// Deprecated: Use respGetEntityGetCtxCollision.Set* methods instead or set the fields directly.
type respGetEntityGetCtxCollisionBuilder struct {
    obj *respGetEntityGetCtxCollision
}

func newRespGetEntityGetCtxCollisionBuilder() *respGetEntityGetCtxCollisionBuilder {
    return &respGetEntityGetCtxCollisionBuilder{
        obj: newRespGetEntityGetCtxCollision(),
    }
}

func (x *respGetEntityGetCtxCollisionBuilder) Value(value int32) *respGetEntityGetCtxCollisionBuilder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetCtxCollisionBuilder) Emit() *respGetEntityGetCtxCollision {
    var objCopy respGetEntityGetCtxCollision = *x.obj
    return &objCopy
}

func (x *respGetEntityGetCtxCollision) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetCtxCollision) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetCtxCollision"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetCtxCollision) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.I32)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetCtxCollision) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetCtxCollision({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}
type reqGetEntityGetCtx1Collision struct {
    Ctx int64 `thrift:"ctx,1" json:"ctx" db:"ctx"`
    Ctx1 int64 `thrift:"ctx1,2" json:"ctx1" db:"ctx1"`
}
// Compile time interface enforcer
var _ thrift.Struct = &reqGetEntityGetCtx1Collision{}

type GetEntityGetCtx1CollisionArgs = reqGetEntityGetCtx1Collision

func newReqGetEntityGetCtx1Collision() *reqGetEntityGetCtx1Collision {
    return (&reqGetEntityGetCtx1Collision{}).
        SetCtxNonCompat(0).
        SetCtx1NonCompat(0)
}

func (x *reqGetEntityGetCtx1Collision) GetCtxNonCompat() int64 {
    return x.Ctx
}

func (x *reqGetEntityGetCtx1Collision) GetCtx() int64 {
    return x.Ctx
}

func (x *reqGetEntityGetCtx1Collision) GetCtx1NonCompat() int64 {
    return x.Ctx1
}

func (x *reqGetEntityGetCtx1Collision) GetCtx1() int64 {
    return x.Ctx1
}

func (x *reqGetEntityGetCtx1Collision) SetCtxNonCompat(value int64) *reqGetEntityGetCtx1Collision {
    x.Ctx = value
    return x
}

func (x *reqGetEntityGetCtx1Collision) SetCtx(value int64) *reqGetEntityGetCtx1Collision {
    x.Ctx = value
    return x
}

func (x *reqGetEntityGetCtx1Collision) SetCtx1NonCompat(value int64) *reqGetEntityGetCtx1Collision {
    x.Ctx1 = value
    return x
}

func (x *reqGetEntityGetCtx1Collision) SetCtx1(value int64) *reqGetEntityGetCtx1Collision {
    x.Ctx1 = value
    return x
}

func (x *reqGetEntityGetCtx1Collision) writeField1(p thrift.Protocol) error {  // Ctx
    if err := p.WriteFieldBegin("ctx", thrift.I64, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetCtxNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetCtx1Collision) writeField2(p thrift.Protocol) error {  // Ctx1
    if err := p.WriteFieldBegin("ctx1", thrift.I64, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetCtx1NonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetCtx1Collision) readField1(p thrift.Protocol) error {  // Ctx
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetCtxNonCompat(result)
    return nil
}

func (x *reqGetEntityGetCtx1Collision) readField2(p thrift.Protocol) error {  // Ctx1
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetCtx1NonCompat(result)
    return nil
}

func (x *reqGetEntityGetCtx1Collision) toString1() string {  // Ctx
    return fmt.Sprintf("%v", x.GetCtxNonCompat())
}

func (x *reqGetEntityGetCtx1Collision) toString2() string {  // Ctx1
    return fmt.Sprintf("%v", x.GetCtx1NonCompat())
}


// Deprecated: Use reqGetEntityGetCtx1Collision.Set* methods instead or set the fields directly.
type reqGetEntityGetCtx1CollisionBuilder struct {
    obj *reqGetEntityGetCtx1Collision
}

func newReqGetEntityGetCtx1CollisionBuilder() *reqGetEntityGetCtx1CollisionBuilder {
    return &reqGetEntityGetCtx1CollisionBuilder{
        obj: newReqGetEntityGetCtx1Collision(),
    }
}

func (x *reqGetEntityGetCtx1CollisionBuilder) Ctx(value int64) *reqGetEntityGetCtx1CollisionBuilder {
    x.obj.Ctx = value
    return x
}

func (x *reqGetEntityGetCtx1CollisionBuilder) Ctx1(value int64) *reqGetEntityGetCtx1CollisionBuilder {
    x.obj.Ctx1 = value
    return x
}

func (x *reqGetEntityGetCtx1CollisionBuilder) Emit() *reqGetEntityGetCtx1Collision {
    var objCopy reqGetEntityGetCtx1Collision = *x.obj
    return &objCopy
}

func (x *reqGetEntityGetCtx1Collision) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("reqGetEntityGetCtx1Collision"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *reqGetEntityGetCtx1Collision) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // ctx
            expectedType := thrift.Type(thrift.I64)
            if wireType == expectedType {
                if err := x.readField1(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        case 2:  // ctx1
            expectedType := thrift.Type(thrift.I64)
            if wireType == expectedType {
                if err := x.readField2(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *reqGetEntityGetCtx1Collision) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("reqGetEntityGetCtx1Collision({")
    sb.WriteString(fmt.Sprintf("Ctx:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Ctx1:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}
type respGetEntityGetCtx1Collision struct {
    Value int32 `thrift:"value,0" json:"value" db:"value"`
}
// Compile time interface enforcer
var _ thrift.Struct = &respGetEntityGetCtx1Collision{}
var _ thrift.WritableResult = &respGetEntityGetCtx1Collision{}

func newRespGetEntityGetCtx1Collision() *respGetEntityGetCtx1Collision {
    return (&respGetEntityGetCtx1Collision{}).
        SetValueNonCompat(0)
}

func (x *respGetEntityGetCtx1Collision) GetValueNonCompat() int32 {
    return x.Value
}

func (x *respGetEntityGetCtx1Collision) GetValue() int32 {
    return x.Value
}

func (x *respGetEntityGetCtx1Collision) SetValueNonCompat(value int32) *respGetEntityGetCtx1Collision {
    x.Value = value
    return x
}

func (x *respGetEntityGetCtx1Collision) SetValue(value int32) *respGetEntityGetCtx1Collision {
    x.Value = value
    return x
}

func (x *respGetEntityGetCtx1Collision) writeField0(p thrift.Protocol) error {  // Value
    if err := p.WriteFieldBegin("value", thrift.I32, 0); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetValueNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetCtx1Collision) readField0(p thrift.Protocol) error {  // Value
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetValueNonCompat(result)
    return nil
}

func (x *respGetEntityGetCtx1Collision) toString0() string {  // Value
    return fmt.Sprintf("%v", x.GetValueNonCompat())
}


// Deprecated: Use respGetEntityGetCtx1Collision.Set* methods instead or set the fields directly.
type respGetEntityGetCtx1CollisionBuilder struct {
    obj *respGetEntityGetCtx1Collision
}

func newRespGetEntityGetCtx1CollisionBuilder() *respGetEntityGetCtx1CollisionBuilder {
    return &respGetEntityGetCtx1CollisionBuilder{
        obj: newRespGetEntityGetCtx1Collision(),
    }
}

func (x *respGetEntityGetCtx1CollisionBuilder) Value(value int32) *respGetEntityGetCtx1CollisionBuilder {
    x.obj.Value = value
    return x
}

func (x *respGetEntityGetCtx1CollisionBuilder) Emit() *respGetEntityGetCtx1Collision {
    var objCopy respGetEntityGetCtx1Collision = *x.obj
    return &objCopy
}

func (x *respGetEntityGetCtx1Collision) Exception() thrift.WritableException {
    return nil
}

func (x *respGetEntityGetCtx1Collision) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("respGetEntityGetCtx1Collision"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField0(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *respGetEntityGetCtx1Collision) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 0:  // value
            expectedType := thrift.Type(thrift.I32)
            if wireType == expectedType {
                if err := x.readField0(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *respGetEntityGetCtx1Collision) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("respGetEntityGetCtx1Collision({")
    sb.WriteString(fmt.Sprintf("Value:%s", x.toString0()))
    sb.WriteString("})")

    return sb.String()
}


type GetEntityProcessor struct {
    processorMap       map[string]thrift.ProcessorFunctionContext
    functionServiceMap map[string]string
    handler            GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorContext = &GetEntityProcessor{}

func (p *GetEntityProcessor) AddToProcessorMap(key string, processor thrift.ProcessorFunctionContext) {
    p.processorMap[key] = processor
}

func (p *GetEntityProcessor) AddToFunctionServiceMap(key, service string) {
    p.functionServiceMap[key] = service
}

func (p *GetEntityProcessor) GetProcessorFunctionContext(key string) (processor thrift.ProcessorFunctionContext, err error) {
    if processor, ok := p.processorMap[key]; ok {
        return processor, nil
    }
    return nil, nil
}

func (p *GetEntityProcessor) ProcessorMap() map[string]thrift.ProcessorFunctionContext {
    return p.processorMap
}

func (p *GetEntityProcessor) FunctionServiceMap() map[string]string {
    return p.functionServiceMap
}

func NewGetEntityProcessor(handler GetEntity) *GetEntityProcessor {
    p := &GetEntityProcessor{
        handler:            handler,
        processorMap:       make(map[string]thrift.ProcessorFunctionContext),
        functionServiceMap: make(map[string]string),
    }
    p.AddToProcessorMap("getEntity", &procFuncGetEntityGetEntity{handler: handler})
    p.AddToProcessorMap("getBool", &procFuncGetEntityGetBool{handler: handler})
    p.AddToProcessorMap("getByte", &procFuncGetEntityGetByte{handler: handler})
    p.AddToProcessorMap("getI16", &procFuncGetEntityGetI16{handler: handler})
    p.AddToProcessorMap("getI32", &procFuncGetEntityGetI32{handler: handler})
    p.AddToProcessorMap("getI64", &procFuncGetEntityGetI64{handler: handler})
    p.AddToProcessorMap("getDouble", &procFuncGetEntityGetDouble{handler: handler})
    p.AddToProcessorMap("getString", &procFuncGetEntityGetString{handler: handler})
    p.AddToProcessorMap("getBinary", &procFuncGetEntityGetBinary{handler: handler})
    p.AddToProcessorMap("getMap", &procFuncGetEntityGetMap{handler: handler})
    p.AddToProcessorMap("getSet", &procFuncGetEntityGetSet{handler: handler})
    p.AddToProcessorMap("getList", &procFuncGetEntityGetList{handler: handler})
    p.AddToProcessorMap("getLegacyStuff", &procFuncGetEntityGetLegacyStuff{handler: handler})
    p.AddToProcessorMap("getCtxCollision", &procFuncGetEntityGetCtxCollision{handler: handler})
    p.AddToProcessorMap("getCtx1Collision", &procFuncGetEntityGetCtx1Collision{handler: handler})
    p.AddToFunctionServiceMap("getEntity", "GetEntity")
    p.AddToFunctionServiceMap("getBool", "GetEntity")
    p.AddToFunctionServiceMap("getByte", "GetEntity")
    p.AddToFunctionServiceMap("getI16", "GetEntity")
    p.AddToFunctionServiceMap("getI32", "GetEntity")
    p.AddToFunctionServiceMap("getI64", "GetEntity")
    p.AddToFunctionServiceMap("getDouble", "GetEntity")
    p.AddToFunctionServiceMap("getString", "GetEntity")
    p.AddToFunctionServiceMap("getBinary", "GetEntity")
    p.AddToFunctionServiceMap("getMap", "GetEntity")
    p.AddToFunctionServiceMap("getSet", "GetEntity")
    p.AddToFunctionServiceMap("getList", "GetEntity")
    p.AddToFunctionServiceMap("getLegacyStuff", "GetEntity")
    p.AddToFunctionServiceMap("getCtxCollision", "GetEntity")
    p.AddToFunctionServiceMap("getCtx1Collision", "GetEntity")

    return p
}


type procFuncGetEntityGetEntity struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetEntity{}

func (p *procFuncGetEntityGetEntity) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetEntity()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetEntity) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getEntity", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetEntity) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    args := reqStruct.(*reqGetEntityGetEntity)
    result := newRespGetEntityGetEntity()
    retval, err := p.handler.GetEntity(ctx, args.R)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetEntity: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncGetEntityGetBool struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetBool{}

func (p *procFuncGetEntityGetBool) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetBool()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetBool) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getBool", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetBool) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespGetEntityGetBool()
    retval, err := p.handler.GetBool(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetBool: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncGetEntityGetByte struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetByte{}

func (p *procFuncGetEntityGetByte) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetByte()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetByte) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getByte", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetByte) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespGetEntityGetByte()
    retval, err := p.handler.GetByte(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetByte: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncGetEntityGetI16 struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetI16{}

func (p *procFuncGetEntityGetI16) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetI16()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetI16) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getI16", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetI16) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespGetEntityGetI16()
    retval, err := p.handler.GetI16(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetI16: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncGetEntityGetI32 struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetI32{}

func (p *procFuncGetEntityGetI32) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetI32()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetI32) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getI32", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetI32) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespGetEntityGetI32()
    retval, err := p.handler.GetI32(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetI32: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncGetEntityGetI64 struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetI64{}

func (p *procFuncGetEntityGetI64) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetI64()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetI64) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getI64", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetI64) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespGetEntityGetI64()
    retval, err := p.handler.GetI64(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetI64: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncGetEntityGetDouble struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetDouble{}

func (p *procFuncGetEntityGetDouble) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetDouble()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetDouble) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getDouble", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetDouble) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespGetEntityGetDouble()
    retval, err := p.handler.GetDouble(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetDouble: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncGetEntityGetString struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetString{}

func (p *procFuncGetEntityGetString) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetString()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetString) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getString", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetString) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespGetEntityGetString()
    retval, err := p.handler.GetString(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetString: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncGetEntityGetBinary struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetBinary{}

func (p *procFuncGetEntityGetBinary) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetBinary()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetBinary) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getBinary", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetBinary) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespGetEntityGetBinary()
    retval, err := p.handler.GetBinary(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetBinary: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncGetEntityGetMap struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetMap{}

func (p *procFuncGetEntityGetMap) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetMap()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetMap) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getMap", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetMap) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespGetEntityGetMap()
    retval, err := p.handler.GetMap(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetMap: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncGetEntityGetSet struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetSet{}

func (p *procFuncGetEntityGetSet) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetSet()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetSet) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getSet", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetSet) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespGetEntityGetSet()
    retval, err := p.handler.GetSet(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetSet: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncGetEntityGetList struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetList{}

func (p *procFuncGetEntityGetList) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetList()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetList) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getList", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetList) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    result := newRespGetEntityGetList()
    retval, err := p.handler.GetList(ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetList: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncGetEntityGetLegacyStuff struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetLegacyStuff{}

func (p *procFuncGetEntityGetLegacyStuff) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetLegacyStuff()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetLegacyStuff) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getLegacyStuff", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetLegacyStuff) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    args := reqStruct.(*reqGetEntityGetLegacyStuff)
    result := newRespGetEntityGetLegacyStuff()
    retval, err := p.handler.GetLegacyStuff(ctx, args.NumPos, args.NumNeg1, args.NumNeg2)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetLegacyStuff: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncGetEntityGetCtxCollision struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetCtxCollision{}

func (p *procFuncGetEntityGetCtxCollision) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetCtxCollision()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetCtxCollision) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getCtxCollision", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetCtxCollision) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    args := reqStruct.(*reqGetEntityGetCtxCollision)
    result := newRespGetEntityGetCtxCollision()
    retval, err := p.handler.GetCtxCollision(ctx, args.Ctx)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetCtxCollision: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


type procFuncGetEntityGetCtx1Collision struct {
    handler GetEntity
}
// Compile time interface enforcer
var _ thrift.ProcessorFunctionContext = &procFuncGetEntityGetCtx1Collision{}

func (p *procFuncGetEntityGetCtx1Collision) Read(iprot thrift.Protocol) (thrift.Struct, thrift.Exception) {
    args := newReqGetEntityGetCtx1Collision()
    if err := args.Read(iprot); err != nil {
        return nil, err
    }
    iprot.ReadMessageEnd()
    return args, nil
}

func (p *procFuncGetEntityGetCtx1Collision) Write(seqId int32, result thrift.WritableStruct, oprot thrift.Protocol) (err thrift.Exception) {
    var err2 error
    messageType := thrift.REPLY
    switch result.(type) {
    case thrift.ApplicationException:
        messageType = thrift.EXCEPTION
    }

    if err2 = oprot.WriteMessageBegin("getCtx1Collision", messageType, seqId); err2 != nil {
        err = err2
    }
    if err2 = result.Write(oprot); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
        err = err2
    }
    if err2 = oprot.Flush(); err == nil && err2 != nil {
        err = err2
    }
    return err
}

func (p *procFuncGetEntityGetCtx1Collision) RunContext(ctx context.Context, reqStruct thrift.Struct) (thrift.WritableStruct, thrift.ApplicationException) {
    args := reqStruct.(*reqGetEntityGetCtx1Collision)
    result := newRespGetEntityGetCtx1Collision()
    retval, err := p.handler.GetCtx1Collision(ctx, args.Ctx, args.Ctx1)
    if err != nil {
        x := thrift.NewApplicationExceptionCause(thrift.INTERNAL_ERROR, "Internal error processing GetCtx1Collision: " + err.Error(), err)
        return x, x
    }

    result.Value = retval
    return result, nil
}


