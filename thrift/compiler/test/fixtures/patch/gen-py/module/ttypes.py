#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from __future__ import absolute_import
import sys
from thrift.util.Recursive import fix_spec
from thrift.Thrift import TType, TMessageType, TPriority, TRequestContext, TProcessorEventHandler, TServerInterface, TProcessor, TException, TApplicationException, UnimplementedTypedef
from thrift.protocol.TProtocol import TProtocolException

from json import loads
import sys
if sys.version_info[0] >= 3:
  long = int

import thrift.lib.thrift.patch.ttypes
import thrift.lib.thrift.standard.ttypes


import pprint
import warnings
from thrift import Thrift
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.protocol import TCompactProtocol
from thrift.protocol import THeaderProtocol
fastproto = None
try:
  from thrift.protocol import fastproto
except ImportError:
  pass

def __EXPAND_THRIFT_SPEC(spec):
    next_id = 0
    for item in spec:
        if next_id >= 0 and item[0] < 0:
            next_id = item[0]
        if item[0] != next_id:
            for _ in range(next_id, item[0]):
                yield None
        yield item
        next_id = item[0] + 1

all_structs = []
UTF8STRINGS = bool(0) or sys.version_info.major >= 3

__all__ = ['UTF8STRINGS', 'MyEnum', 'MyData', 'MyDataWithCustomDefault', 'InnerUnion', 'MyUnion', 'MyStruct', 'LateDefStruct', 'Recursive', 'Bar', 'Loop', 'MyDataPatch', 'MyDataFieldPatch', 'MyDataEnsureStruct', 'MyDataWithCustomDefaultPatch', 'MyDataWithCustomDefaultFieldPatch', 'MyDataWithCustomDefaultEnsureStruct', 'InnerUnionPatch', 'InnerUnionFieldPatch', 'MyUnionPatch', 'MyUnionFieldPatch', 'MyStructPatch', 'MyStructField10Patch', 'MyStructField23Patch', 'MyStructField26Patch', 'MyStructField27Patch', 'MyStructField28Patch', 'MyStructField29Patch', 'MyStructField30Patch', 'MyStructField30Patch1', 'MyStructFieldPatch', 'MyStructEnsureStruct', 'LateDefStructPatch', 'LateDefStructFieldPatch', 'LateDefStructEnsureStruct', 'RecursivePatch', 'RecursiveField1Patch', 'RecursiveFieldPatch', 'RecursiveEnsureStruct', 'BarPatch', 'BarFieldPatch', 'BarEnsureStruct', 'LoopPatch']

class MyEnum:
  MyValue0 = 0

  _VALUES_TO_NAMES = {
    0: "MyValue0",
  }

  _NAMES_TO_VALUES = {
    "MyValue0": 0,
  }

class MyData:
  r"""
  Attributes:
   - data1
   - data2
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.data1 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.data2 = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyData')
    if self.data1 != None:
      oprot.writeFieldBegin('data1', TType.STRING, 1)
      oprot.writeString(self.data1.encode('utf-8')) if UTF8STRINGS and not isinstance(self.data1, bytes) else oprot.writeString(self.data1)
      oprot.writeFieldEnd()
    if self.data2 != None:
      oprot.writeFieldBegin('data2', TType.I32, 2)
      oprot.writeI32(self.data2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'data1' in json_obj and json_obj['data1'] is not None:
      self.data1 = json_obj['data1']
    if 'data2' in json_obj and json_obj['data2'] is not None:
      self.data2 = json_obj['data2']
      if self.data2 > 0x7fffffff or self.data2 < -0x80000000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.data1 is not None:
      value = pprint.pformat(self.data1, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    data1=%s' % (value))
    if self.data2 is not None:
      value = pprint.pformat(self.data2, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    data2=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'data1',
      'data2',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyData, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyData, self)

  def _to_py_deprecated(self):
    return self

class MyDataWithCustomDefault:
  r"""
  Attributes:
   - data1
   - data2
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.data1 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.data2 = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyDataWithCustomDefault')
    if self.data1 != None:
      oprot.writeFieldBegin('data1', TType.STRING, 1)
      oprot.writeString(self.data1.encode('utf-8')) if UTF8STRINGS and not isinstance(self.data1, bytes) else oprot.writeString(self.data1)
      oprot.writeFieldEnd()
    if self.data2 != None:
      oprot.writeFieldBegin('data2', TType.I32, 2)
      oprot.writeI32(self.data2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'data1' in json_obj and json_obj['data1'] is not None:
      self.data1 = json_obj['data1']
    if 'data2' in json_obj and json_obj['data2'] is not None:
      self.data2 = json_obj['data2']
      if self.data2 > 0x7fffffff or self.data2 < -0x80000000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.data1 is not None:
      value = pprint.pformat(self.data1, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    data1=%s' % (value))
    if self.data2 is not None:
      value = pprint.pformat(self.data2, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    data2=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'data1',
      'data2',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyDataWithCustomDefault, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyDataWithCustomDefault, self)

  def _to_py_deprecated(self):
    return self

class InnerUnion(object):
  r"""
  Attributes:
   - innerOption
  """

  thrift_spec = None
  __init__ = None

  __EMPTY__ = 0
  INNEROPTION = 1
  
  @staticmethod
  def isUnion():
    return True

  def get_innerOption(self):
    assert self.field == 1
    return self.value

  def set_innerOption(self, value):
    self.field = 1
    self.value = value

  def getType(self):
    return self.field

  def __repr__(self):
    value = pprint.pformat(self.value)
    member = ''
    if self.field == 1:
      padding = ' ' * 12
      value = padding.join(value.splitlines(True))
      member = '\n    %s=%s' % ('innerOption', value)
    return "%s(%s)" % (self.__class__.__name__, member)

  def read(self, iprot):
    self.field = 0
    self.value = None
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, True], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, True], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break

      if fid == 1:
        if ftype == TType.STRING:
          _fbthrift_innerOption = iprot.readString()
          assert self.field == 0 and self.value is None
          self.set_innerOption(_fbthrift_innerOption)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, True], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, True], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeUnionBegin('InnerUnion')
    if self.field == 1:
      oprot.writeFieldBegin('innerOption', TType.STRING, 1)
      innerOption = self.value
      oprot.writeString(innerOption)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeUnionEnd()
  
  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    self.field = 0
    self.value = None
    obj = json
    if is_text:
      obj = loads(json)
    if not isinstance(obj, dict) or len(obj) > 1:
      raise TProtocolException(TProtocolException.INVALID_DATA, 'Can not parse')
    
    if 'innerOption' in obj:
      _fbthrift_innerOption = obj['innerOption']
      self.set_innerOption(_fbthrift_innerOption)

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.InnerUnion, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.InnerUnion, self)

  def _to_py_deprecated(self):
    return self

class MyUnion(object):
  r"""
  Attributes:
   - option1
   - option2
   - option3
  """

  thrift_spec = None
  __init__ = None

  __EMPTY__ = 0
  OPTION1 = 1
  OPTION2 = 2
  OPTION3 = 3
  
  @staticmethod
  def isUnion():
    return True

  def get_option1(self):
    assert self.field == 1
    return self.value

  def get_option2(self):
    assert self.field == 2
    return self.value

  def get_option3(self):
    assert self.field == 3
    return self.value

  def set_option1(self, value):
    self.field = 1
    self.value = value

  def set_option2(self, value):
    self.field = 2
    self.value = value

  def set_option3(self, value):
    self.field = 3
    self.value = value

  def getType(self):
    return self.field

  def __repr__(self):
    value = pprint.pformat(self.value)
    member = ''
    if self.field == 1:
      padding = ' ' * 8
      value = padding.join(value.splitlines(True))
      member = '\n    %s=%s' % ('option1', value)
    if self.field == 2:
      padding = ' ' * 8
      value = padding.join(value.splitlines(True))
      member = '\n    %s=%s' % ('option2', value)
    if self.field == 3:
      padding = ' ' * 8
      value = padding.join(value.splitlines(True))
      member = '\n    %s=%s' % ('option3', value)
    return "%s(%s)" % (self.__class__.__name__, member)

  def read(self, iprot):
    self.field = 0
    self.value = None
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, True], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, True], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break

      if fid == 1:
        if ftype == TType.STRING:
          _fbthrift_option1 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
          assert self.field == 0 and self.value is None
          self.set_option1(_fbthrift_option1)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          _fbthrift_option2 = iprot.readI32()
          assert self.field == 0 and self.value is None
          self.set_option2(_fbthrift_option2)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          _fbthrift_option3 = InnerUnion()
          _fbthrift_option3.read(iprot)
          assert self.field == 0 and self.value is None
          self.set_option3(_fbthrift_option3)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, True], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, True], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeUnionBegin('MyUnion')
    if self.field == 1:
      oprot.writeFieldBegin('option1', TType.STRING, 1)
      option1 = self.value
      oprot.writeString(option1.encode('utf-8')) if UTF8STRINGS and not isinstance(option1, bytes) else oprot.writeString(option1)
      oprot.writeFieldEnd()
    if self.field == 2:
      oprot.writeFieldBegin('option2', TType.I32, 2)
      option2 = self.value
      oprot.writeI32(option2)
      oprot.writeFieldEnd()
    if self.field == 3:
      oprot.writeFieldBegin('option3', TType.STRUCT, 3)
      option3 = self.value
      option3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeUnionEnd()
  
  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    self.field = 0
    self.value = None
    obj = json
    if is_text:
      obj = loads(json)
    if not isinstance(obj, dict) or len(obj) > 1:
      raise TProtocolException(TProtocolException.INVALID_DATA, 'Can not parse')
    
    if 'option1' in obj:
      _fbthrift_option1 = obj['option1']
      self.set_option1(_fbthrift_option1)
    if 'option2' in obj:
      _fbthrift_option2 = obj['option2']
      if _fbthrift_option2 > 0x7fffffff or _fbthrift_option2 < -0x80000000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
      self.set_option2(_fbthrift_option2)
    if 'option3' in obj:
      _fbthrift_option3 = InnerUnion()
      _fbthrift_option3.readFromJson(obj['option3'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
      self.set_option3(_fbthrift_option3)

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyUnion, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyUnion, self)

  def _to_py_deprecated(self):
    return self

class MyStruct:
  r"""
  Attributes:
   - boolVal
   - byteVal
   - i16Val
   - i32Val
   - i64Val
   - floatVal
   - doubleVal
   - stringVal
   - binaryVal
   - enumVal
   - structVal
   - unionVal
   - lateStructVal
   - optBoolVal
   - optByteVal
   - optI16Val
   - optI32Val
   - optI64Val
   - optFloatVal
   - optDoubleVal
   - optStringVal
   - optBinaryVal
   - optEnumVal
   - optStructVal
   - optLateStructVal
   - optListVal
   - optSetVal
   - optMapVal
   - listMap
   - mapMap
   - i32WithCustomDefault
   - structWithCustomDefault
   - structWithFieldCustomDefault
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.BOOL:
          self.boolVal = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == -2:
        if ftype == TType.BYTE:
          self.byteVal = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == -3:
        if ftype == TType.I16:
          self.i16Val = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == -4:
        if ftype == TType.I32:
          self.i32Val = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == -5:
        if ftype == TType.I64:
          self.i64Val = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == -6:
        if ftype == TType.FLOAT:
          self.floatVal = iprot.readFloat()
        else:
          iprot.skip(ftype)
      elif fid == -7:
        if ftype == TType.DOUBLE:
          self.doubleVal = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == -8:
        if ftype == TType.STRING:
          self.stringVal = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == -9:
        if ftype == TType.STRING:
          self.binaryVal = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == -10:
        if ftype == TType.I32:
          self.enumVal = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == -11:
        if ftype == TType.STRUCT:
          self.structVal = MyData()
          self.structVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -12:
        if ftype == TType.STRUCT:
          self.unionVal = MyUnion()
          self.unionVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -13:
        if ftype == TType.STRUCT:
          self.lateStructVal = LateDefStruct()
          self.lateStructVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -14:
        if ftype == TType.BOOL:
          self.optBoolVal = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == -15:
        if ftype == TType.BYTE:
          self.optByteVal = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == -16:
        if ftype == TType.I16:
          self.optI16Val = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == -17:
        if ftype == TType.I32:
          self.optI32Val = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == -18:
        if ftype == TType.I64:
          self.optI64Val = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == -19:
        if ftype == TType.FLOAT:
          self.optFloatVal = iprot.readFloat()
        else:
          iprot.skip(ftype)
      elif fid == -20:
        if ftype == TType.DOUBLE:
          self.optDoubleVal = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == -21:
        if ftype == TType.STRING:
          self.optStringVal = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == -22:
        if ftype == TType.STRING:
          self.optBinaryVal = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == -23:
        if ftype == TType.I32:
          self.optEnumVal = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == -24:
        if ftype == TType.STRUCT:
          self.optStructVal = MyData()
          self.optStructVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -25:
        if ftype == TType.STRUCT:
          self.optLateStructVal = LateDefStruct()
          self.optLateStructVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -26:
        if ftype == TType.LIST:
          self.optListVal = []
          (_etype3, _size0) = iprot.readListBegin()
          if _size0 >= 0:
            for _i4 in range(_size0):
              _elem5 = iprot.readI16()
              self.optListVal.append(_elem5)
          else: 
            while iprot.peekList():
              _elem6 = iprot.readI16()
              self.optListVal.append(_elem6)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == -27:
        if ftype == TType.SET:
          self.optSetVal = set()
          (_etype10, _size7) = iprot.readSetBegin()
          if _size7 >= 0:
            for _i11 in range(_size7):
              _elem12 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.optSetVal.add(_elem12)
          else: 
            while iprot.peekSet():
              _elem13 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.optSetVal.add(_elem13)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == -28:
        if ftype == TType.MAP:
          self.optMapVal = {}
          (_ktype15, _vtype16, _size14 ) = iprot.readMapBegin() 
          if _size14 >= 0:
            for _i18 in range(_size14):
              _key19 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val20 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.optMapVal[_key19] = _val20
          else: 
            while iprot.peekMap():
              _key21 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val22 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.optMapVal[_key21] = _val22
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == -29:
        if ftype == TType.LIST:
          self.listMap = []
          (_etype26, _size23) = iprot.readListBegin()
          if _size23 >= 0:
            for _i27 in range(_size23):
              _elem28 = {}
              (_ktype30, _vtype31, _size29 ) = iprot.readMapBegin() 
              if _size29 >= 0:
                for _i33 in range(_size29):
                  _key34 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val35 = iprot.readI32()
                  _elem28[_key34] = _val35
              else: 
                while iprot.peekMap():
                  _key36 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val37 = iprot.readI32()
                  _elem28[_key36] = _val37
              iprot.readMapEnd()
              self.listMap.append(_elem28)
          else: 
            while iprot.peekList():
              _elem38 = {}
              (_ktype40, _vtype41, _size39 ) = iprot.readMapBegin() 
              if _size39 >= 0:
                for _i43 in range(_size39):
                  _key44 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val45 = iprot.readI32()
                  _elem38[_key44] = _val45
              else: 
                while iprot.peekMap():
                  _key46 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val47 = iprot.readI32()
                  _elem38[_key46] = _val47
              iprot.readMapEnd()
              self.listMap.append(_elem38)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == -30:
        if ftype == TType.MAP:
          self.mapMap = {}
          (_ktype49, _vtype50, _size48 ) = iprot.readMapBegin() 
          if _size48 >= 0:
            for _i52 in range(_size48):
              _key53 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val54 = {}
              (_ktype56, _vtype57, _size55 ) = iprot.readMapBegin() 
              if _size55 >= 0:
                for _i59 in range(_size55):
                  _key60 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val61 = iprot.readI32()
                  _val54[_key60] = _val61
              else: 
                while iprot.peekMap():
                  _key62 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val63 = iprot.readI32()
                  _val54[_key62] = _val63
              iprot.readMapEnd()
              self.mapMap[_key53] = _val54
          else: 
            while iprot.peekMap():
              _key64 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val65 = {}
              (_ktype67, _vtype68, _size66 ) = iprot.readMapBegin() 
              if _size66 >= 0:
                for _i70 in range(_size66):
                  _key71 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val72 = iprot.readI32()
                  _val65[_key71] = _val72
              else: 
                while iprot.peekMap():
                  _key73 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val74 = iprot.readI32()
                  _val65[_key73] = _val74
              iprot.readMapEnd()
              self.mapMap[_key64] = _val65
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == -31:
        if ftype == TType.I32:
          self.i32WithCustomDefault = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == -32:
        if ftype == TType.STRUCT:
          self.structWithCustomDefault = MyDataWithCustomDefault()
          self.structWithCustomDefault.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.structWithFieldCustomDefault = MyData()
          self.structWithFieldCustomDefault.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyStruct')
    if self.structWithCustomDefault != None:
      oprot.writeFieldBegin('structWithCustomDefault', TType.STRUCT, -32)
      self.structWithCustomDefault.write(oprot)
      oprot.writeFieldEnd()
    if self.i32WithCustomDefault != None:
      oprot.writeFieldBegin('i32WithCustomDefault', TType.I32, -31)
      oprot.writeI32(self.i32WithCustomDefault)
      oprot.writeFieldEnd()
    if self.mapMap != None:
      oprot.writeFieldBegin('mapMap', TType.MAP, -30)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.mapMap))
      for kiter75,viter76 in self.mapMap.items():
        oprot.writeString(kiter75.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter75, bytes) else oprot.writeString(kiter75)
        oprot.writeMapBegin(TType.STRING, TType.I32, len(viter76))
        for kiter77,viter78 in viter76.items():
          oprot.writeString(kiter77.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter77, bytes) else oprot.writeString(kiter77)
          oprot.writeI32(viter78)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.listMap != None:
      oprot.writeFieldBegin('listMap', TType.LIST, -29)
      oprot.writeListBegin(TType.MAP, len(self.listMap))
      for iter79 in self.listMap:
        oprot.writeMapBegin(TType.STRING, TType.I32, len(iter79))
        for kiter80,viter81 in iter79.items():
          oprot.writeString(kiter80.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter80, bytes) else oprot.writeString(kiter80)
          oprot.writeI32(viter81)
        oprot.writeMapEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.optMapVal != None:
      oprot.writeFieldBegin('optMapVal', TType.MAP, -28)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.optMapVal))
      for kiter82,viter83 in self.optMapVal.items():
        oprot.writeString(kiter82.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter82, bytes) else oprot.writeString(kiter82)
        oprot.writeString(viter83.encode('utf-8')) if UTF8STRINGS and not isinstance(viter83, bytes) else oprot.writeString(viter83)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.optSetVal != None:
      oprot.writeFieldBegin('optSetVal', TType.SET, -27)
      oprot.writeSetBegin(TType.STRING, len(self.optSetVal))
      for iter84 in self.optSetVal:
        oprot.writeString(iter84.encode('utf-8')) if UTF8STRINGS and not isinstance(iter84, bytes) else oprot.writeString(iter84)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.optListVal != None:
      oprot.writeFieldBegin('optListVal', TType.LIST, -26)
      oprot.writeListBegin(TType.I16, len(self.optListVal))
      for iter85 in self.optListVal:
        oprot.writeI16(iter85)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.optLateStructVal != None:
      oprot.writeFieldBegin('optLateStructVal', TType.STRUCT, -25)
      self.optLateStructVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optStructVal != None:
      oprot.writeFieldBegin('optStructVal', TType.STRUCT, -24)
      self.optStructVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optEnumVal != None:
      oprot.writeFieldBegin('optEnumVal', TType.I32, -23)
      oprot.writeI32(self.optEnumVal)
      oprot.writeFieldEnd()
    if self.optBinaryVal != None:
      oprot.writeFieldBegin('optBinaryVal', TType.STRING, -22)
      oprot.writeString(self.optBinaryVal)
      oprot.writeFieldEnd()
    if self.optStringVal != None:
      oprot.writeFieldBegin('optStringVal', TType.STRING, -21)
      oprot.writeString(self.optStringVal.encode('utf-8')) if UTF8STRINGS and not isinstance(self.optStringVal, bytes) else oprot.writeString(self.optStringVal)
      oprot.writeFieldEnd()
    if self.optDoubleVal != None:
      oprot.writeFieldBegin('optDoubleVal', TType.DOUBLE, -20)
      oprot.writeDouble(self.optDoubleVal)
      oprot.writeFieldEnd()
    if self.optFloatVal != None:
      oprot.writeFieldBegin('optFloatVal', TType.FLOAT, -19)
      oprot.writeFloat(self.optFloatVal)
      oprot.writeFieldEnd()
    if self.optI64Val != None:
      oprot.writeFieldBegin('optI64Val', TType.I64, -18)
      oprot.writeI64(self.optI64Val)
      oprot.writeFieldEnd()
    if self.optI32Val != None:
      oprot.writeFieldBegin('optI32Val', TType.I32, -17)
      oprot.writeI32(self.optI32Val)
      oprot.writeFieldEnd()
    if self.optI16Val != None:
      oprot.writeFieldBegin('optI16Val', TType.I16, -16)
      oprot.writeI16(self.optI16Val)
      oprot.writeFieldEnd()
    if self.optByteVal != None:
      oprot.writeFieldBegin('optByteVal', TType.BYTE, -15)
      oprot.writeByte(self.optByteVal)
      oprot.writeFieldEnd()
    if self.optBoolVal != None:
      oprot.writeFieldBegin('optBoolVal', TType.BOOL, -14)
      oprot.writeBool(self.optBoolVal)
      oprot.writeFieldEnd()
    if self.lateStructVal != None:
      oprot.writeFieldBegin('lateStructVal', TType.STRUCT, -13)
      self.lateStructVal.write(oprot)
      oprot.writeFieldEnd()
    if self.unionVal != None:
      oprot.writeFieldBegin('unionVal', TType.STRUCT, -12)
      self.unionVal.write(oprot)
      oprot.writeFieldEnd()
    if self.structVal != None:
      oprot.writeFieldBegin('structVal', TType.STRUCT, -11)
      self.structVal.write(oprot)
      oprot.writeFieldEnd()
    if self.enumVal != None:
      oprot.writeFieldBegin('enumVal', TType.I32, -10)
      oprot.writeI32(self.enumVal)
      oprot.writeFieldEnd()
    if self.binaryVal != None:
      oprot.writeFieldBegin('binaryVal', TType.STRING, -9)
      oprot.writeString(self.binaryVal)
      oprot.writeFieldEnd()
    if self.stringVal != None:
      oprot.writeFieldBegin('stringVal', TType.STRING, -8)
      oprot.writeString(self.stringVal.encode('utf-8')) if UTF8STRINGS and not isinstance(self.stringVal, bytes) else oprot.writeString(self.stringVal)
      oprot.writeFieldEnd()
    if self.doubleVal != None:
      oprot.writeFieldBegin('doubleVal', TType.DOUBLE, -7)
      oprot.writeDouble(self.doubleVal)
      oprot.writeFieldEnd()
    if self.floatVal != None:
      oprot.writeFieldBegin('floatVal', TType.FLOAT, -6)
      oprot.writeFloat(self.floatVal)
      oprot.writeFieldEnd()
    if self.i64Val != None:
      oprot.writeFieldBegin('i64Val', TType.I64, -5)
      oprot.writeI64(self.i64Val)
      oprot.writeFieldEnd()
    if self.i32Val != None:
      oprot.writeFieldBegin('i32Val', TType.I32, -4)
      oprot.writeI32(self.i32Val)
      oprot.writeFieldEnd()
    if self.i16Val != None:
      oprot.writeFieldBegin('i16Val', TType.I16, -3)
      oprot.writeI16(self.i16Val)
      oprot.writeFieldEnd()
    if self.byteVal != None:
      oprot.writeFieldBegin('byteVal', TType.BYTE, -2)
      oprot.writeByte(self.byteVal)
      oprot.writeFieldEnd()
    if self.boolVal != None:
      oprot.writeFieldBegin('boolVal', TType.BOOL, -1)
      oprot.writeBool(self.boolVal)
      oprot.writeFieldEnd()
    if self.structWithFieldCustomDefault != None:
      oprot.writeFieldBegin('structWithFieldCustomDefault', TType.STRUCT, 1)
      self.structWithFieldCustomDefault.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'boolVal' in json_obj and json_obj['boolVal'] is not None:
      self.boolVal = json_obj['boolVal']
    if 'byteVal' in json_obj and json_obj['byteVal'] is not None:
      self.byteVal = json_obj['byteVal']
      if self.byteVal > 0x7f or self.byteVal < -0x80:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
    if 'i16Val' in json_obj and json_obj['i16Val'] is not None:
      self.i16Val = json_obj['i16Val']
      if self.i16Val > 0x7fff or self.i16Val < -0x8000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
    if 'i32Val' in json_obj and json_obj['i32Val'] is not None:
      self.i32Val = json_obj['i32Val']
      if self.i32Val > 0x7fffffff or self.i32Val < -0x80000000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
    if 'i64Val' in json_obj and json_obj['i64Val'] is not None:
      self.i64Val = long(json_obj['i64Val'])
    if 'floatVal' in json_obj and json_obj['floatVal'] is not None:
      self.floatVal = float(json_obj['floatVal'])
    if 'doubleVal' in json_obj and json_obj['doubleVal'] is not None:
      self.doubleVal = float(json_obj['doubleVal'])
    if 'stringVal' in json_obj and json_obj['stringVal'] is not None:
      self.stringVal = json_obj['stringVal']
    if 'binaryVal' in json_obj and json_obj['binaryVal'] is not None:
      self.binaryVal = json_obj['binaryVal']
    if 'enumVal' in json_obj and json_obj['enumVal'] is not None:
      self.enumVal = json_obj['enumVal']
      if not self.enumVal in MyEnum._VALUES_TO_NAMES:
        msg = 'Integer value ''%s'' is not a recognized value of enum type MyEnum' % self.enumVal
        if relax_enum_validation:
            warnings.warn(msg)
        else:
            raise TProtocolException(TProtocolException.INVALID_DATA, msg)
    if 'structVal' in json_obj and json_obj['structVal'] is not None:
      self.structVal = MyData()
      self.structVal.readFromJson(json_obj['structVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'unionVal' in json_obj and json_obj['unionVal'] is not None:
      self.unionVal = MyUnion()
      self.unionVal.readFromJson(json_obj['unionVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'lateStructVal' in json_obj and json_obj['lateStructVal'] is not None:
      self.lateStructVal = LateDefStruct()
      self.lateStructVal.readFromJson(json_obj['lateStructVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optBoolVal' in json_obj and json_obj['optBoolVal'] is not None:
      self.optBoolVal = json_obj['optBoolVal']
    if 'optByteVal' in json_obj and json_obj['optByteVal'] is not None:
      self.optByteVal = json_obj['optByteVal']
      if self.optByteVal > 0x7f or self.optByteVal < -0x80:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
    if 'optI16Val' in json_obj and json_obj['optI16Val'] is not None:
      self.optI16Val = json_obj['optI16Val']
      if self.optI16Val > 0x7fff or self.optI16Val < -0x8000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
    if 'optI32Val' in json_obj and json_obj['optI32Val'] is not None:
      self.optI32Val = json_obj['optI32Val']
      if self.optI32Val > 0x7fffffff or self.optI32Val < -0x80000000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
    if 'optI64Val' in json_obj and json_obj['optI64Val'] is not None:
      self.optI64Val = long(json_obj['optI64Val'])
    if 'optFloatVal' in json_obj and json_obj['optFloatVal'] is not None:
      self.optFloatVal = float(json_obj['optFloatVal'])
    if 'optDoubleVal' in json_obj and json_obj['optDoubleVal'] is not None:
      self.optDoubleVal = float(json_obj['optDoubleVal'])
    if 'optStringVal' in json_obj and json_obj['optStringVal'] is not None:
      self.optStringVal = json_obj['optStringVal']
    if 'optBinaryVal' in json_obj and json_obj['optBinaryVal'] is not None:
      self.optBinaryVal = json_obj['optBinaryVal']
    if 'optEnumVal' in json_obj and json_obj['optEnumVal'] is not None:
      self.optEnumVal = json_obj['optEnumVal']
      if not self.optEnumVal in MyEnum._VALUES_TO_NAMES:
        msg = 'Integer value ''%s'' is not a recognized value of enum type MyEnum' % self.optEnumVal
        if relax_enum_validation:
            warnings.warn(msg)
        else:
            raise TProtocolException(TProtocolException.INVALID_DATA, msg)
    if 'optStructVal' in json_obj and json_obj['optStructVal'] is not None:
      self.optStructVal = MyData()
      self.optStructVal.readFromJson(json_obj['optStructVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optLateStructVal' in json_obj and json_obj['optLateStructVal'] is not None:
      self.optLateStructVal = LateDefStruct()
      self.optLateStructVal.readFromJson(json_obj['optLateStructVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optListVal' in json_obj and json_obj['optListVal'] is not None:
      self.optListVal = []
      for _tmp_e86 in json_obj['optListVal']:
        if _tmp_e86 > 0x7fff or _tmp_e86 < -0x8000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.optListVal.append(_tmp_e86)
    if 'optSetVal' in json_obj and json_obj['optSetVal'] is not None:
      self.optSetVal = set_cls()
      for _tmp_e87 in json_obj['optSetVal']:
        self.optSetVal.add(_tmp_e87)
    if 'optMapVal' in json_obj and json_obj['optMapVal'] is not None:
      self.optMapVal = dict_cls()
      for _tmp_k88, _tmp_v89 in json_obj['optMapVal'].items():
        _tmp_kp90 = _tmp_k88
        self.optMapVal[_tmp_kp90] = _tmp_v89
    if 'listMap' in json_obj and json_obj['listMap'] is not None:
      self.listMap = []
      for _tmp_e91 in json_obj['listMap']:
        _map92 = dict_cls()
        for _tmp_k93, _tmp_v94 in _tmp_e91.items():
          _tmp_kp95 = _tmp_k93
          if _tmp_v94 > 0x7fffffff or _tmp_v94 < -0x80000000:
            raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
          _map92[_tmp_kp95] = _tmp_v94
        self.listMap.append(_map92)
    if 'mapMap' in json_obj and json_obj['mapMap'] is not None:
      self.mapMap = dict_cls()
      for _tmp_k96, _tmp_v97 in json_obj['mapMap'].items():
        _tmp_kp98 = _tmp_k96
        _map99 = dict_cls()
        for _tmp_k100, _tmp_v101 in _tmp_v97.items():
          _tmp_kp102 = _tmp_k100
          if _tmp_v101 > 0x7fffffff or _tmp_v101 < -0x80000000:
            raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
          _map99[_tmp_kp102] = _tmp_v101
        self.mapMap[_tmp_kp98] = _map99
    if 'i32WithCustomDefault' in json_obj and json_obj['i32WithCustomDefault'] is not None:
      self.i32WithCustomDefault = json_obj['i32WithCustomDefault']
      if self.i32WithCustomDefault > 0x7fffffff or self.i32WithCustomDefault < -0x80000000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
    if 'structWithCustomDefault' in json_obj and json_obj['structWithCustomDefault'] is not None:
      self.structWithCustomDefault = MyDataWithCustomDefault()
      self.structWithCustomDefault.readFromJson(json_obj['structWithCustomDefault'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'structWithFieldCustomDefault' in json_obj and json_obj['structWithFieldCustomDefault'] is not None:
      self.structWithFieldCustomDefault = MyData()
      self.structWithFieldCustomDefault.readFromJson(json_obj['structWithFieldCustomDefault'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.boolVal is not None:
      value = pprint.pformat(self.boolVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    boolVal=%s' % (value))
    if self.byteVal is not None:
      value = pprint.pformat(self.byteVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    byteVal=%s' % (value))
    if self.i16Val is not None:
      value = pprint.pformat(self.i16Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    i16Val=%s' % (value))
    if self.i32Val is not None:
      value = pprint.pformat(self.i32Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    i32Val=%s' % (value))
    if self.i64Val is not None:
      value = pprint.pformat(self.i64Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    i64Val=%s' % (value))
    if self.floatVal is not None:
      value = pprint.pformat(self.floatVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    floatVal=%s' % (value))
    if self.doubleVal is not None:
      value = pprint.pformat(self.doubleVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    doubleVal=%s' % (value))
    if self.stringVal is not None:
      value = pprint.pformat(self.stringVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    stringVal=%s' % (value))
    if self.binaryVal is not None:
      value = pprint.pformat(self.binaryVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    binaryVal=%s' % (value))
    if self.enumVal is not None:
      value = pprint.pformat(self.enumVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    enumVal=%s' % (value))
    if self.structVal is not None:
      value = pprint.pformat(self.structVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    structVal=%s' % (value))
    if self.unionVal is not None:
      value = pprint.pformat(self.unionVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    unionVal=%s' % (value))
    if self.lateStructVal is not None:
      value = pprint.pformat(self.lateStructVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    lateStructVal=%s' % (value))
    if self.optBoolVal is not None:
      value = pprint.pformat(self.optBoolVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optBoolVal=%s' % (value))
    if self.optByteVal is not None:
      value = pprint.pformat(self.optByteVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optByteVal=%s' % (value))
    if self.optI16Val is not None:
      value = pprint.pformat(self.optI16Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optI16Val=%s' % (value))
    if self.optI32Val is not None:
      value = pprint.pformat(self.optI32Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optI32Val=%s' % (value))
    if self.optI64Val is not None:
      value = pprint.pformat(self.optI64Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optI64Val=%s' % (value))
    if self.optFloatVal is not None:
      value = pprint.pformat(self.optFloatVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optFloatVal=%s' % (value))
    if self.optDoubleVal is not None:
      value = pprint.pformat(self.optDoubleVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optDoubleVal=%s' % (value))
    if self.optStringVal is not None:
      value = pprint.pformat(self.optStringVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optStringVal=%s' % (value))
    if self.optBinaryVal is not None:
      value = pprint.pformat(self.optBinaryVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optBinaryVal=%s' % (value))
    if self.optEnumVal is not None:
      value = pprint.pformat(self.optEnumVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optEnumVal=%s' % (value))
    if self.optStructVal is not None:
      value = pprint.pformat(self.optStructVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optStructVal=%s' % (value))
    if self.optLateStructVal is not None:
      value = pprint.pformat(self.optLateStructVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optLateStructVal=%s' % (value))
    if self.optListVal is not None:
      value = pprint.pformat(self.optListVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optListVal=%s' % (value))
    if self.optSetVal is not None:
      value = pprint.pformat(self.optSetVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optSetVal=%s' % (value))
    if self.optMapVal is not None:
      value = pprint.pformat(self.optMapVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optMapVal=%s' % (value))
    if self.listMap is not None:
      value = pprint.pformat(self.listMap, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    listMap=%s' % (value))
    if self.mapMap is not None:
      value = pprint.pformat(self.mapMap, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    mapMap=%s' % (value))
    if self.i32WithCustomDefault is not None:
      value = pprint.pformat(self.i32WithCustomDefault, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    i32WithCustomDefault=%s' % (value))
    if self.structWithCustomDefault is not None:
      value = pprint.pformat(self.structWithCustomDefault, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    structWithCustomDefault=%s' % (value))
    if self.structWithFieldCustomDefault is not None:
      value = pprint.pformat(self.structWithFieldCustomDefault, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    structWithFieldCustomDefault=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'structWithCustomDefault',
      'i32WithCustomDefault',
      'mapMap',
      'listMap',
      'optMapVal',
      'optSetVal',
      'optListVal',
      'optLateStructVal',
      'optStructVal',
      'optEnumVal',
      'optBinaryVal',
      'optStringVal',
      'optDoubleVal',
      'optFloatVal',
      'optI64Val',
      'optI32Val',
      'optI16Val',
      'optByteVal',
      'optBoolVal',
      'lateStructVal',
      'unionVal',
      'structVal',
      'enumVal',
      'binaryVal',
      'stringVal',
      'doubleVal',
      'floatVal',
      'i64Val',
      'i32Val',
      'i16Val',
      'byteVal',
      'boolVal',
      'structWithFieldCustomDefault',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyStruct, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyStruct, self)

  def _to_py_deprecated(self):
    return self

class LateDefStruct:

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('LateDefStruct')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.LateDefStruct, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.LateDefStruct, self)

  def _to_py_deprecated(self):
    return self

class Recursive:
  r"""
  Attributes:
   - nodes
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.MAP:
          self.nodes = {}
          (_ktype104, _vtype105, _size103 ) = iprot.readMapBegin() 
          if _size103 >= 0:
            for _i107 in range(_size103):
              _key108 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val109 = Recursive()
              _val109.read(iprot)
              self.nodes[_key108] = _val109
          else: 
            while iprot.peekMap():
              _key110 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val111 = Recursive()
              _val111.read(iprot)
              self.nodes[_key110] = _val111
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('Recursive')
    if self.nodes != None:
      oprot.writeFieldBegin('nodes', TType.MAP, -1)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.nodes))
      for kiter112,viter113 in self.nodes.items():
        oprot.writeString(kiter112.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter112, bytes) else oprot.writeString(kiter112)
        viter113.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'nodes' in json_obj and json_obj['nodes'] is not None:
      self.nodes = dict_cls()
      for _tmp_k114, _tmp_v115 in json_obj['nodes'].items():
        _tmp_kp116 = _tmp_k114
        _struct117 = Recursive()
        _struct117.readFromJson(_tmp_v115, is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
        self.nodes[_tmp_kp116] = _struct117

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.nodes is not None:
      value = pprint.pformat(self.nodes, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    nodes=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'nodes',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.Recursive, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.Recursive, self)

  def _to_py_deprecated(self):
    return self

class Bar:
  r"""
  Attributes:
   - loop
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.STRUCT:
          self.loop = Loop()
          self.loop.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('Bar')
    if self.loop != None:
      oprot.writeFieldBegin('loop', TType.STRUCT, -1)
      self.loop.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'loop' in json_obj and json_obj['loop'] is not None:
      self.loop = Loop()
      self.loop.readFromJson(json_obj['loop'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.loop is not None:
      value = pprint.pformat(self.loop, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    loop=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'loop',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.Bar, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.Bar, self)

  def _to_py_deprecated(self):
    return self

class Loop:
  r"""
  Attributes:
   - bar
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.STRUCT:
          self.bar = Bar()
          self.bar.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('Loop')
    if self.bar != None:
      oprot.writeFieldBegin('bar', TType.STRUCT, -1)
      self.bar.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'bar' in json_obj and json_obj['bar'] is not None:
      self.bar = Bar()
      self.bar.readFromJson(json_obj['bar'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.bar is not None:
      value = pprint.pformat(self.bar, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    bar=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'bar',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.Loop, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.Loop, self)

  def _to_py_deprecated(self):
    return self

class MyDataPatch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
   - patchPrior: Patches any previously set values. Applies second.
   - ensure: Initialize fields, using the given defaults. Applies third.
   - patch: Patches any set value, including newly set values. Applies last.
   - remove: Removes entries, if present. Applies third.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.assign = MyData()
          self.assign.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.patchPrior = MyDataFieldPatch()
          self.patchPrior.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.ensure = MyDataEnsureStruct()
          self.ensure.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.patch = MyDataFieldPatch()
          self.patch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.remove = []
          (_etype121, _size118) = iprot.readListBegin()
          if _size118 >= 0:
            for _i122 in range(_size118):
              _elem123 = iprot.readI16()
              self.remove.append(_elem123)
          else: 
            while iprot.peekList():
              _elem124 = iprot.readI16()
              self.remove.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyDataPatch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.STRUCT, 1)
      self.assign.write(oprot)
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    if self.patchPrior != None:
      oprot.writeFieldBegin('patchPrior', TType.STRUCT, 3)
      self.patchPrior.write(oprot)
      oprot.writeFieldEnd()
    if self.ensure != None:
      oprot.writeFieldBegin('ensure', TType.STRUCT, 5)
      self.ensure.write(oprot)
      oprot.writeFieldEnd()
    if self.patch != None:
      oprot.writeFieldBegin('patch', TType.STRUCT, 6)
      self.patch.write(oprot)
      oprot.writeFieldEnd()
    if self.remove != None:
      oprot.writeFieldBegin('remove', TType.LIST, 7)
      oprot.writeListBegin(TType.I16, len(self.remove))
      for iter125 in self.remove:
        oprot.writeI16(iter125)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = MyData()
      self.assign.readFromJson(json_obj['assign'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']
    if 'patchPrior' in json_obj and json_obj['patchPrior'] is not None:
      self.patchPrior = MyDataFieldPatch()
      self.patchPrior.readFromJson(json_obj['patchPrior'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'ensure' in json_obj and json_obj['ensure'] is not None:
      self.ensure = MyDataEnsureStruct()
      self.ensure.readFromJson(json_obj['ensure'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'patch' in json_obj and json_obj['patch'] is not None:
      self.patch = MyDataFieldPatch()
      self.patch.readFromJson(json_obj['patch'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'remove' in json_obj and json_obj['remove'] is not None:
      self.remove = []
      for _tmp_e126 in json_obj['remove']:
        if _tmp_e126 > 0x7fff or _tmp_e126 < -0x8000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.remove.append(_tmp_e126)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    if self.patchPrior is not None:
      value = pprint.pformat(self.patchPrior, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patchPrior=%s' % (value))
    if self.ensure is not None:
      value = pprint.pformat(self.ensure, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    ensure=%s' % (value))
    if self.patch is not None:
      value = pprint.pformat(self.patch, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patch=%s' % (value))
    if self.remove is not None:
      value = pprint.pformat(self.remove, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    remove=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
      'patchPrior',
      'ensure',
      'patch',
      'remove',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyDataPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyDataPatch, self)

  def _to_py_deprecated(self):
    return self

class MyDataFieldPatch:
  r"""
  Attributes:
   - data1
   - data2
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.data1 = thrift.lib.thrift.patch.ttypes.StringPatch()
          self.data1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.data2 = thrift.lib.thrift.patch.ttypes.I32Patch()
          self.data2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyDataFieldPatch')
    if self.data1 != None:
      oprot.writeFieldBegin('data1', TType.STRUCT, 1)
      self.data1.write(oprot)
      oprot.writeFieldEnd()
    if self.data2 != None:
      oprot.writeFieldBegin('data2', TType.STRUCT, 2)
      self.data2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'data1' in json_obj and json_obj['data1'] is not None:
      self.data1 = thrift.lib.thrift.patch.ttypes.StringPatch()
      self.data1.readFromJson(json_obj['data1'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'data2' in json_obj and json_obj['data2'] is not None:
      self.data2 = thrift.lib.thrift.patch.ttypes.I32Patch()
      self.data2.readFromJson(json_obj['data2'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.data1 is not None:
      value = pprint.pformat(self.data1, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    data1=%s' % (value))
    if self.data2 is not None:
      value = pprint.pformat(self.data2, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    data2=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'data1',
      'data2',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyDataFieldPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyDataFieldPatch, self)

  def _to_py_deprecated(self):
    return self

class MyDataEnsureStruct:
  r"""
  Attributes:
   - data1
   - data2
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.data1 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.data2 = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyDataEnsureStruct')
    if self.data1 != None:
      oprot.writeFieldBegin('data1', TType.STRING, 1)
      oprot.writeString(self.data1.encode('utf-8')) if UTF8STRINGS and not isinstance(self.data1, bytes) else oprot.writeString(self.data1)
      oprot.writeFieldEnd()
    if self.data2 != None:
      oprot.writeFieldBegin('data2', TType.I32, 2)
      oprot.writeI32(self.data2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'data1' in json_obj and json_obj['data1'] is not None:
      self.data1 = json_obj['data1']
    if 'data2' in json_obj and json_obj['data2'] is not None:
      self.data2 = json_obj['data2']
      if self.data2 > 0x7fffffff or self.data2 < -0x80000000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.data1 is not None:
      value = pprint.pformat(self.data1, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    data1=%s' % (value))
    if self.data2 is not None:
      value = pprint.pformat(self.data2, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    data2=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'data1',
      'data2',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyDataEnsureStruct, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyDataEnsureStruct, self)

  def _to_py_deprecated(self):
    return self

class MyDataWithCustomDefaultPatch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
   - patchPrior: Patches any previously set values. Applies second.
   - ensure: Initialize fields, using the given defaults. Applies third.
   - patch: Patches any set value, including newly set values. Applies last.
   - remove: Removes entries, if present. Applies third.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.assign = MyDataWithCustomDefault()
          self.assign.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.patchPrior = MyDataWithCustomDefaultFieldPatch()
          self.patchPrior.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.ensure = MyDataWithCustomDefaultEnsureStruct()
          self.ensure.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.patch = MyDataWithCustomDefaultFieldPatch()
          self.patch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.remove = []
          (_etype130, _size127) = iprot.readListBegin()
          if _size127 >= 0:
            for _i131 in range(_size127):
              _elem132 = iprot.readI16()
              self.remove.append(_elem132)
          else: 
            while iprot.peekList():
              _elem133 = iprot.readI16()
              self.remove.append(_elem133)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyDataWithCustomDefaultPatch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.STRUCT, 1)
      self.assign.write(oprot)
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    if self.patchPrior != None:
      oprot.writeFieldBegin('patchPrior', TType.STRUCT, 3)
      self.patchPrior.write(oprot)
      oprot.writeFieldEnd()
    if self.ensure != None:
      oprot.writeFieldBegin('ensure', TType.STRUCT, 5)
      self.ensure.write(oprot)
      oprot.writeFieldEnd()
    if self.patch != None:
      oprot.writeFieldBegin('patch', TType.STRUCT, 6)
      self.patch.write(oprot)
      oprot.writeFieldEnd()
    if self.remove != None:
      oprot.writeFieldBegin('remove', TType.LIST, 7)
      oprot.writeListBegin(TType.I16, len(self.remove))
      for iter134 in self.remove:
        oprot.writeI16(iter134)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = MyDataWithCustomDefault()
      self.assign.readFromJson(json_obj['assign'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']
    if 'patchPrior' in json_obj and json_obj['patchPrior'] is not None:
      self.patchPrior = MyDataWithCustomDefaultFieldPatch()
      self.patchPrior.readFromJson(json_obj['patchPrior'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'ensure' in json_obj and json_obj['ensure'] is not None:
      self.ensure = MyDataWithCustomDefaultEnsureStruct()
      self.ensure.readFromJson(json_obj['ensure'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'patch' in json_obj and json_obj['patch'] is not None:
      self.patch = MyDataWithCustomDefaultFieldPatch()
      self.patch.readFromJson(json_obj['patch'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'remove' in json_obj and json_obj['remove'] is not None:
      self.remove = []
      for _tmp_e135 in json_obj['remove']:
        if _tmp_e135 > 0x7fff or _tmp_e135 < -0x8000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.remove.append(_tmp_e135)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    if self.patchPrior is not None:
      value = pprint.pformat(self.patchPrior, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patchPrior=%s' % (value))
    if self.ensure is not None:
      value = pprint.pformat(self.ensure, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    ensure=%s' % (value))
    if self.patch is not None:
      value = pprint.pformat(self.patch, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patch=%s' % (value))
    if self.remove is not None:
      value = pprint.pformat(self.remove, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    remove=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
      'patchPrior',
      'ensure',
      'patch',
      'remove',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyDataWithCustomDefaultPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyDataWithCustomDefaultPatch, self)

  def _to_py_deprecated(self):
    return self

class MyDataWithCustomDefaultFieldPatch:
  r"""
  Attributes:
   - data1
   - data2
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.data1 = thrift.lib.thrift.patch.ttypes.StringPatch()
          self.data1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.data2 = thrift.lib.thrift.patch.ttypes.I32Patch()
          self.data2.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyDataWithCustomDefaultFieldPatch')
    if self.data1 != None:
      oprot.writeFieldBegin('data1', TType.STRUCT, 1)
      self.data1.write(oprot)
      oprot.writeFieldEnd()
    if self.data2 != None:
      oprot.writeFieldBegin('data2', TType.STRUCT, 2)
      self.data2.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'data1' in json_obj and json_obj['data1'] is not None:
      self.data1 = thrift.lib.thrift.patch.ttypes.StringPatch()
      self.data1.readFromJson(json_obj['data1'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'data2' in json_obj and json_obj['data2'] is not None:
      self.data2 = thrift.lib.thrift.patch.ttypes.I32Patch()
      self.data2.readFromJson(json_obj['data2'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.data1 is not None:
      value = pprint.pformat(self.data1, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    data1=%s' % (value))
    if self.data2 is not None:
      value = pprint.pformat(self.data2, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    data2=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'data1',
      'data2',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyDataWithCustomDefaultFieldPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyDataWithCustomDefaultFieldPatch, self)

  def _to_py_deprecated(self):
    return self

class MyDataWithCustomDefaultEnsureStruct:
  r"""
  Attributes:
   - data1
   - data2
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.data1 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.data2 = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyDataWithCustomDefaultEnsureStruct')
    if self.data1 != None:
      oprot.writeFieldBegin('data1', TType.STRING, 1)
      oprot.writeString(self.data1.encode('utf-8')) if UTF8STRINGS and not isinstance(self.data1, bytes) else oprot.writeString(self.data1)
      oprot.writeFieldEnd()
    if self.data2 != None:
      oprot.writeFieldBegin('data2', TType.I32, 2)
      oprot.writeI32(self.data2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'data1' in json_obj and json_obj['data1'] is not None:
      self.data1 = json_obj['data1']
    if 'data2' in json_obj and json_obj['data2'] is not None:
      self.data2 = json_obj['data2']
      if self.data2 > 0x7fffffff or self.data2 < -0x80000000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.data1 is not None:
      value = pprint.pformat(self.data1, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    data1=%s' % (value))
    if self.data2 is not None:
      value = pprint.pformat(self.data2, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    data2=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'data1',
      'data2',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyDataWithCustomDefaultEnsureStruct, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyDataWithCustomDefaultEnsureStruct, self)

  def _to_py_deprecated(self):
    return self

class InnerUnionPatch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears any set value. Applies first.
   - patchPrior: Patches any previously set values. Applies second.
   - ensure: Assigns the value, if not already set to the same field. Applies third.
   - patch: Patches any set value, including newly set values. Applies last.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.assign = InnerUnion()
          self.assign.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.patchPrior = InnerUnionFieldPatch()
          self.patchPrior.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ensure = InnerUnion()
          self.ensure.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.patch = InnerUnionFieldPatch()
          self.patch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('InnerUnionPatch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.STRUCT, 1)
      self.assign.write(oprot)
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    if self.patchPrior != None:
      oprot.writeFieldBegin('patchPrior', TType.STRUCT, 3)
      self.patchPrior.write(oprot)
      oprot.writeFieldEnd()
    if self.ensure != None:
      oprot.writeFieldBegin('ensure', TType.STRUCT, 4)
      self.ensure.write(oprot)
      oprot.writeFieldEnd()
    if self.patch != None:
      oprot.writeFieldBegin('patch', TType.STRUCT, 6)
      self.patch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = InnerUnion()
      self.assign.readFromJson(json_obj['assign'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']
    if 'patchPrior' in json_obj and json_obj['patchPrior'] is not None:
      self.patchPrior = InnerUnionFieldPatch()
      self.patchPrior.readFromJson(json_obj['patchPrior'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'ensure' in json_obj and json_obj['ensure'] is not None:
      self.ensure = InnerUnion()
      self.ensure.readFromJson(json_obj['ensure'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'patch' in json_obj and json_obj['patch'] is not None:
      self.patch = InnerUnionFieldPatch()
      self.patch.readFromJson(json_obj['patch'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    if self.patchPrior is not None:
      value = pprint.pformat(self.patchPrior, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patchPrior=%s' % (value))
    if self.ensure is not None:
      value = pprint.pformat(self.ensure, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    ensure=%s' % (value))
    if self.patch is not None:
      value = pprint.pformat(self.patch, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patch=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
      'patchPrior',
      'ensure',
      'patch',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.InnerUnionPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.InnerUnionPatch, self)

  def _to_py_deprecated(self):
    return self

class InnerUnionFieldPatch:
  r"""
  Attributes:
   - innerOption
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.innerOption = thrift.lib.thrift.patch.ttypes.BinaryPatch()
          self.innerOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('InnerUnionFieldPatch')
    if self.innerOption != None:
      oprot.writeFieldBegin('innerOption', TType.STRUCT, 1)
      self.innerOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'innerOption' in json_obj and json_obj['innerOption'] is not None:
      self.innerOption = thrift.lib.thrift.patch.ttypes.BinaryPatch()
      self.innerOption.readFromJson(json_obj['innerOption'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.innerOption is not None:
      value = pprint.pformat(self.innerOption, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    innerOption=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'innerOption',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.InnerUnionFieldPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.InnerUnionFieldPatch, self)

  def _to_py_deprecated(self):
    return self

class MyUnionPatch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears any set value. Applies first.
   - patchPrior: Patches any previously set values. Applies second.
   - ensure: Assigns the value, if not already set to the same field. Applies third.
   - patch: Patches any set value, including newly set values. Applies last.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.assign = MyUnion()
          self.assign.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.patchPrior = MyUnionFieldPatch()
          self.patchPrior.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.ensure = MyUnion()
          self.ensure.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.patch = MyUnionFieldPatch()
          self.patch.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyUnionPatch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.STRUCT, 1)
      self.assign.write(oprot)
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    if self.patchPrior != None:
      oprot.writeFieldBegin('patchPrior', TType.STRUCT, 3)
      self.patchPrior.write(oprot)
      oprot.writeFieldEnd()
    if self.ensure != None:
      oprot.writeFieldBegin('ensure', TType.STRUCT, 4)
      self.ensure.write(oprot)
      oprot.writeFieldEnd()
    if self.patch != None:
      oprot.writeFieldBegin('patch', TType.STRUCT, 6)
      self.patch.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = MyUnion()
      self.assign.readFromJson(json_obj['assign'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']
    if 'patchPrior' in json_obj and json_obj['patchPrior'] is not None:
      self.patchPrior = MyUnionFieldPatch()
      self.patchPrior.readFromJson(json_obj['patchPrior'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'ensure' in json_obj and json_obj['ensure'] is not None:
      self.ensure = MyUnion()
      self.ensure.readFromJson(json_obj['ensure'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'patch' in json_obj and json_obj['patch'] is not None:
      self.patch = MyUnionFieldPatch()
      self.patch.readFromJson(json_obj['patch'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    if self.patchPrior is not None:
      value = pprint.pformat(self.patchPrior, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patchPrior=%s' % (value))
    if self.ensure is not None:
      value = pprint.pformat(self.ensure, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    ensure=%s' % (value))
    if self.patch is not None:
      value = pprint.pformat(self.patch, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patch=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
      'patchPrior',
      'ensure',
      'patch',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyUnionPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyUnionPatch, self)

  def _to_py_deprecated(self):
    return self

class MyUnionFieldPatch:
  r"""
  Attributes:
   - option1
   - option2
   - option3
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.option1 = thrift.lib.thrift.patch.ttypes.StringPatch()
          self.option1.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.option2 = thrift.lib.thrift.patch.ttypes.I32Patch()
          self.option2.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option3 = InnerUnionPatch()
          self.option3.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyUnionFieldPatch')
    if self.option1 != None:
      oprot.writeFieldBegin('option1', TType.STRUCT, 1)
      self.option1.write(oprot)
      oprot.writeFieldEnd()
    if self.option2 != None:
      oprot.writeFieldBegin('option2', TType.STRUCT, 2)
      self.option2.write(oprot)
      oprot.writeFieldEnd()
    if self.option3 != None:
      oprot.writeFieldBegin('option3', TType.STRUCT, 3)
      self.option3.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'option1' in json_obj and json_obj['option1'] is not None:
      self.option1 = thrift.lib.thrift.patch.ttypes.StringPatch()
      self.option1.readFromJson(json_obj['option1'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'option2' in json_obj and json_obj['option2'] is not None:
      self.option2 = thrift.lib.thrift.patch.ttypes.I32Patch()
      self.option2.readFromJson(json_obj['option2'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'option3' in json_obj and json_obj['option3'] is not None:
      self.option3 = InnerUnionPatch()
      self.option3.readFromJson(json_obj['option3'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.option1 is not None:
      value = pprint.pformat(self.option1, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    option1=%s' % (value))
    if self.option2 is not None:
      value = pprint.pformat(self.option2, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    option2=%s' % (value))
    if self.option3 is not None:
      value = pprint.pformat(self.option3, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    option3=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'option1',
      'option2',
      'option3',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyUnionFieldPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyUnionFieldPatch, self)

  def _to_py_deprecated(self):
    return self

class MyStructPatch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
   - patchPrior: Patches any previously set values. Applies second.
   - ensure: Initialize fields, using the given defaults. Applies third.
   - patch: Patches any set value, including newly set values. Applies last.
   - remove: Removes entries, if present. Applies third.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.assign = MyStruct()
          self.assign.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.patchPrior = MyStructFieldPatch()
          self.patchPrior.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.ensure = MyStructEnsureStruct()
          self.ensure.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.patch = MyStructFieldPatch()
          self.patch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.remove = []
          (_etype139, _size136) = iprot.readListBegin()
          if _size136 >= 0:
            for _i140 in range(_size136):
              _elem141 = iprot.readI16()
              self.remove.append(_elem141)
          else: 
            while iprot.peekList():
              _elem142 = iprot.readI16()
              self.remove.append(_elem142)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyStructPatch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.STRUCT, 1)
      self.assign.write(oprot)
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    if self.patchPrior != None:
      oprot.writeFieldBegin('patchPrior', TType.STRUCT, 3)
      self.patchPrior.write(oprot)
      oprot.writeFieldEnd()
    if self.ensure != None:
      oprot.writeFieldBegin('ensure', TType.STRUCT, 5)
      self.ensure.write(oprot)
      oprot.writeFieldEnd()
    if self.patch != None:
      oprot.writeFieldBegin('patch', TType.STRUCT, 6)
      self.patch.write(oprot)
      oprot.writeFieldEnd()
    if self.remove != None:
      oprot.writeFieldBegin('remove', TType.LIST, 7)
      oprot.writeListBegin(TType.I16, len(self.remove))
      for iter143 in self.remove:
        oprot.writeI16(iter143)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = MyStruct()
      self.assign.readFromJson(json_obj['assign'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']
    if 'patchPrior' in json_obj and json_obj['patchPrior'] is not None:
      self.patchPrior = MyStructFieldPatch()
      self.patchPrior.readFromJson(json_obj['patchPrior'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'ensure' in json_obj and json_obj['ensure'] is not None:
      self.ensure = MyStructEnsureStruct()
      self.ensure.readFromJson(json_obj['ensure'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'patch' in json_obj and json_obj['patch'] is not None:
      self.patch = MyStructFieldPatch()
      self.patch.readFromJson(json_obj['patch'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'remove' in json_obj and json_obj['remove'] is not None:
      self.remove = []
      for _tmp_e144 in json_obj['remove']:
        if _tmp_e144 > 0x7fff or _tmp_e144 < -0x8000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.remove.append(_tmp_e144)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    if self.patchPrior is not None:
      value = pprint.pformat(self.patchPrior, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patchPrior=%s' % (value))
    if self.ensure is not None:
      value = pprint.pformat(self.ensure, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    ensure=%s' % (value))
    if self.patch is not None:
      value = pprint.pformat(self.patch, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patch=%s' % (value))
    if self.remove is not None:
      value = pprint.pformat(self.remove, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    remove=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
      'patchPrior',
      'ensure',
      'patch',
      'remove',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyStructPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyStructPatch, self)

  def _to_py_deprecated(self):
    return self

class MyStructField10Patch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.assign = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyStructField10Patch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.I32, 1)
      oprot.writeI32(self.assign)
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = json_obj['assign']
      if not self.assign in MyEnum._VALUES_TO_NAMES:
        msg = 'Integer value ''%s'' is not a recognized value of enum type MyEnum' % self.assign
        if relax_enum_validation:
            warnings.warn(msg)
        else:
            raise TProtocolException(TProtocolException.INVALID_DATA, msg)
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyStructField10Patch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyStructField10Patch, self)

  def _to_py_deprecated(self):
    return self

class MyStructField23Patch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.assign = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyStructField23Patch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.I32, 1)
      oprot.writeI32(self.assign)
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = json_obj['assign']
      if not self.assign in MyEnum._VALUES_TO_NAMES:
        msg = 'Integer value ''%s'' is not a recognized value of enum type MyEnum' % self.assign
        if relax_enum_validation:
            warnings.warn(msg)
        else:
            raise TProtocolException(TProtocolException.INVALID_DATA, msg)
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyStructField23Patch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyStructField23Patch, self)

  def _to_py_deprecated(self):
    return self

class MyStructField26Patch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
   - prepend: Prepends to the front of a given list.
   - append: Appends to the back of a given list.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.assign = []
          (_etype148, _size145) = iprot.readListBegin()
          if _size145 >= 0:
            for _i149 in range(_size145):
              _elem150 = iprot.readI16()
              self.assign.append(_elem150)
          else: 
            while iprot.peekList():
              _elem151 = iprot.readI16()
              self.assign.append(_elem151)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.prepend = []
          (_etype155, _size152) = iprot.readListBegin()
          if _size152 >= 0:
            for _i156 in range(_size152):
              _elem157 = iprot.readI16()
              self.prepend.append(_elem157)
          else: 
            while iprot.peekList():
              _elem158 = iprot.readI16()
              self.prepend.append(_elem158)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.append = []
          (_etype162, _size159) = iprot.readListBegin()
          if _size159 >= 0:
            for _i163 in range(_size159):
              _elem164 = iprot.readI16()
              self.append.append(_elem164)
          else: 
            while iprot.peekList():
              _elem165 = iprot.readI16()
              self.append.append(_elem165)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyStructField26Patch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.LIST, 1)
      oprot.writeListBegin(TType.I16, len(self.assign))
      for iter166 in self.assign:
        oprot.writeI16(iter166)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    if self.prepend != None:
      oprot.writeFieldBegin('prepend', TType.LIST, 8)
      oprot.writeListBegin(TType.I16, len(self.prepend))
      for iter167 in self.prepend:
        oprot.writeI16(iter167)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.append != None:
      oprot.writeFieldBegin('append', TType.LIST, 9)
      oprot.writeListBegin(TType.I16, len(self.append))
      for iter168 in self.append:
        oprot.writeI16(iter168)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = []
      for _tmp_e169 in json_obj['assign']:
        if _tmp_e169 > 0x7fff or _tmp_e169 < -0x8000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.assign.append(_tmp_e169)
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']
    if 'prepend' in json_obj and json_obj['prepend'] is not None:
      self.prepend = []
      for _tmp_e170 in json_obj['prepend']:
        if _tmp_e170 > 0x7fff or _tmp_e170 < -0x8000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.prepend.append(_tmp_e170)
    if 'append' in json_obj and json_obj['append'] is not None:
      self.append = []
      for _tmp_e171 in json_obj['append']:
        if _tmp_e171 > 0x7fff or _tmp_e171 < -0x8000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.append.append(_tmp_e171)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    if self.prepend is not None:
      value = pprint.pformat(self.prepend, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    prepend=%s' % (value))
    if self.append is not None:
      value = pprint.pformat(self.append, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    append=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
      'prepend',
      'append',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyStructField26Patch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyStructField26Patch, self)

  def _to_py_deprecated(self):
    return self

class MyStructField27Patch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
   - remove: Removes entries, if present. Applies third.
   - add: Adds entries, if not already present. Applies fourth.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.assign = set()
          (_etype175, _size172) = iprot.readSetBegin()
          if _size172 >= 0:
            for _i176 in range(_size172):
              _elem177 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.assign.add(_elem177)
          else: 
            while iprot.peekSet():
              _elem178 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.assign.add(_elem178)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.SET:
          self.remove = set()
          (_etype182, _size179) = iprot.readSetBegin()
          if _size179 >= 0:
            for _i183 in range(_size179):
              _elem184 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.remove.add(_elem184)
          else: 
            while iprot.peekSet():
              _elem185 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.remove.add(_elem185)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.SET:
          self.add = set()
          (_etype189, _size186) = iprot.readSetBegin()
          if _size186 >= 0:
            for _i190 in range(_size186):
              _elem191 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.add.add(_elem191)
          else: 
            while iprot.peekSet():
              _elem192 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.add.add(_elem192)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyStructField27Patch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.SET, 1)
      oprot.writeSetBegin(TType.STRING, len(self.assign))
      for iter193 in self.assign:
        oprot.writeString(iter193.encode('utf-8')) if UTF8STRINGS and not isinstance(iter193, bytes) else oprot.writeString(iter193)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    if self.remove != None:
      oprot.writeFieldBegin('remove', TType.SET, 7)
      oprot.writeSetBegin(TType.STRING, len(self.remove))
      for iter194 in self.remove:
        oprot.writeString(iter194.encode('utf-8')) if UTF8STRINGS and not isinstance(iter194, bytes) else oprot.writeString(iter194)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.add != None:
      oprot.writeFieldBegin('add', TType.SET, 8)
      oprot.writeSetBegin(TType.STRING, len(self.add))
      for iter195 in self.add:
        oprot.writeString(iter195.encode('utf-8')) if UTF8STRINGS and not isinstance(iter195, bytes) else oprot.writeString(iter195)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = set_cls()
      for _tmp_e196 in json_obj['assign']:
        self.assign.add(_tmp_e196)
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']
    if 'remove' in json_obj and json_obj['remove'] is not None:
      self.remove = set_cls()
      for _tmp_e197 in json_obj['remove']:
        self.remove.add(_tmp_e197)
    if 'add' in json_obj and json_obj['add'] is not None:
      self.add = set_cls()
      for _tmp_e198 in json_obj['add']:
        self.add.add(_tmp_e198)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    if self.remove is not None:
      value = pprint.pformat(self.remove, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    remove=%s' % (value))
    if self.add is not None:
      value = pprint.pformat(self.add, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    add=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
      'remove',
      'add',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyStructField27Patch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyStructField27Patch, self)

  def _to_py_deprecated(self):
    return self

class MyStructField28Patch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
   - patchPrior: Patches any previously set values. Applies second.
   - add: Add the given values, if the keys are not already present. Applies forth.
   - patch: Patches any set value, including newly set values. Applies last.
   - remove: Removes entries, if present. Applies third.
   - put: Adds or replaces the given key/value pairs. Applies fifth.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.assign = {}
          (_ktype200, _vtype201, _size199 ) = iprot.readMapBegin() 
          if _size199 >= 0:
            for _i203 in range(_size199):
              _key204 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val205 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.assign[_key204] = _val205
          else: 
            while iprot.peekMap():
              _key206 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val207 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.assign[_key206] = _val207
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.patchPrior = {}
          (_ktype209, _vtype210, _size208 ) = iprot.readMapBegin() 
          if _size208 >= 0:
            for _i212 in range(_size208):
              _key213 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val214 = thrift.lib.thrift.patch.ttypes.StringPatch()
              _val214.read(iprot)
              self.patchPrior[_key213] = _val214
          else: 
            while iprot.peekMap():
              _key215 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val216 = thrift.lib.thrift.patch.ttypes.StringPatch()
              _val216.read(iprot)
              self.patchPrior[_key215] = _val216
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.add = {}
          (_ktype218, _vtype219, _size217 ) = iprot.readMapBegin() 
          if _size217 >= 0:
            for _i221 in range(_size217):
              _key222 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val223 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.add[_key222] = _val223
          else: 
            while iprot.peekMap():
              _key224 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val225 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.add[_key224] = _val225
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.patch = {}
          (_ktype227, _vtype228, _size226 ) = iprot.readMapBegin() 
          if _size226 >= 0:
            for _i230 in range(_size226):
              _key231 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val232 = thrift.lib.thrift.patch.ttypes.StringPatch()
              _val232.read(iprot)
              self.patch[_key231] = _val232
          else: 
            while iprot.peekMap():
              _key233 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val234 = thrift.lib.thrift.patch.ttypes.StringPatch()
              _val234.read(iprot)
              self.patch[_key233] = _val234
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.SET:
          self.remove = set()
          (_etype238, _size235) = iprot.readSetBegin()
          if _size235 >= 0:
            for _i239 in range(_size235):
              _elem240 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.remove.add(_elem240)
          else: 
            while iprot.peekSet():
              _elem241 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.remove.add(_elem241)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.put = {}
          (_ktype243, _vtype244, _size242 ) = iprot.readMapBegin() 
          if _size242 >= 0:
            for _i246 in range(_size242):
              _key247 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val248 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.put[_key247] = _val248
          else: 
            while iprot.peekMap():
              _key249 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val250 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.put[_key249] = _val250
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyStructField28Patch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.assign))
      for kiter251,viter252 in self.assign.items():
        oprot.writeString(kiter251.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter251, bytes) else oprot.writeString(kiter251)
        oprot.writeString(viter252.encode('utf-8')) if UTF8STRINGS and not isinstance(viter252, bytes) else oprot.writeString(viter252)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    if self.patchPrior != None:
      oprot.writeFieldBegin('patchPrior', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.patchPrior))
      for kiter253,viter254 in self.patchPrior.items():
        oprot.writeString(kiter253.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter253, bytes) else oprot.writeString(kiter253)
        viter254.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.add != None:
      oprot.writeFieldBegin('add', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.add))
      for kiter255,viter256 in self.add.items():
        oprot.writeString(kiter255.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter255, bytes) else oprot.writeString(kiter255)
        oprot.writeString(viter256.encode('utf-8')) if UTF8STRINGS and not isinstance(viter256, bytes) else oprot.writeString(viter256)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.patch != None:
      oprot.writeFieldBegin('patch', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.patch))
      for kiter257,viter258 in self.patch.items():
        oprot.writeString(kiter257.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter257, bytes) else oprot.writeString(kiter257)
        viter258.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.remove != None:
      oprot.writeFieldBegin('remove', TType.SET, 7)
      oprot.writeSetBegin(TType.STRING, len(self.remove))
      for iter259 in self.remove:
        oprot.writeString(iter259.encode('utf-8')) if UTF8STRINGS and not isinstance(iter259, bytes) else oprot.writeString(iter259)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.put != None:
      oprot.writeFieldBegin('put', TType.MAP, 9)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.put))
      for kiter260,viter261 in self.put.items():
        oprot.writeString(kiter260.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter260, bytes) else oprot.writeString(kiter260)
        oprot.writeString(viter261.encode('utf-8')) if UTF8STRINGS and not isinstance(viter261, bytes) else oprot.writeString(viter261)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = dict_cls()
      for _tmp_k262, _tmp_v263 in json_obj['assign'].items():
        _tmp_kp264 = _tmp_k262
        self.assign[_tmp_kp264] = _tmp_v263
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']
    if 'patchPrior' in json_obj and json_obj['patchPrior'] is not None:
      self.patchPrior = dict_cls()
      for _tmp_k265, _tmp_v266 in json_obj['patchPrior'].items():
        _tmp_kp267 = _tmp_k265
        _struct268 = thrift.lib.thrift.patch.ttypes.StringPatch()
        _struct268.readFromJson(_tmp_v266, is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
        self.patchPrior[_tmp_kp267] = _struct268
    if 'add' in json_obj and json_obj['add'] is not None:
      self.add = dict_cls()
      for _tmp_k269, _tmp_v270 in json_obj['add'].items():
        _tmp_kp271 = _tmp_k269
        self.add[_tmp_kp271] = _tmp_v270
    if 'patch' in json_obj and json_obj['patch'] is not None:
      self.patch = dict_cls()
      for _tmp_k272, _tmp_v273 in json_obj['patch'].items():
        _tmp_kp274 = _tmp_k272
        _struct275 = thrift.lib.thrift.patch.ttypes.StringPatch()
        _struct275.readFromJson(_tmp_v273, is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
        self.patch[_tmp_kp274] = _struct275
    if 'remove' in json_obj and json_obj['remove'] is not None:
      self.remove = set_cls()
      for _tmp_e276 in json_obj['remove']:
        self.remove.add(_tmp_e276)
    if 'put' in json_obj and json_obj['put'] is not None:
      self.put = dict_cls()
      for _tmp_k277, _tmp_v278 in json_obj['put'].items():
        _tmp_kp279 = _tmp_k277
        self.put[_tmp_kp279] = _tmp_v278

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    if self.patchPrior is not None:
      value = pprint.pformat(self.patchPrior, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patchPrior=%s' % (value))
    if self.add is not None:
      value = pprint.pformat(self.add, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    add=%s' % (value))
    if self.patch is not None:
      value = pprint.pformat(self.patch, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patch=%s' % (value))
    if self.remove is not None:
      value = pprint.pformat(self.remove, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    remove=%s' % (value))
    if self.put is not None:
      value = pprint.pformat(self.put, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    put=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
      'patchPrior',
      'add',
      'patch',
      'remove',
      'put',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyStructField28Patch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyStructField28Patch, self)

  def _to_py_deprecated(self):
    return self

class MyStructField29Patch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
   - prepend: Prepends to the front of a given list.
   - append: Appends to the back of a given list.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.assign = []
          (_etype283, _size280) = iprot.readListBegin()
          if _size280 >= 0:
            for _i284 in range(_size280):
              _elem285 = {}
              (_ktype287, _vtype288, _size286 ) = iprot.readMapBegin() 
              if _size286 >= 0:
                for _i290 in range(_size286):
                  _key291 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val292 = iprot.readI32()
                  _elem285[_key291] = _val292
              else: 
                while iprot.peekMap():
                  _key293 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val294 = iprot.readI32()
                  _elem285[_key293] = _val294
              iprot.readMapEnd()
              self.assign.append(_elem285)
          else: 
            while iprot.peekList():
              _elem295 = {}
              (_ktype297, _vtype298, _size296 ) = iprot.readMapBegin() 
              if _size296 >= 0:
                for _i300 in range(_size296):
                  _key301 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val302 = iprot.readI32()
                  _elem295[_key301] = _val302
              else: 
                while iprot.peekMap():
                  _key303 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val304 = iprot.readI32()
                  _elem295[_key303] = _val304
              iprot.readMapEnd()
              self.assign.append(_elem295)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.prepend = []
          (_etype308, _size305) = iprot.readListBegin()
          if _size305 >= 0:
            for _i309 in range(_size305):
              _elem310 = {}
              (_ktype312, _vtype313, _size311 ) = iprot.readMapBegin() 
              if _size311 >= 0:
                for _i315 in range(_size311):
                  _key316 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val317 = iprot.readI32()
                  _elem310[_key316] = _val317
              else: 
                while iprot.peekMap():
                  _key318 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val319 = iprot.readI32()
                  _elem310[_key318] = _val319
              iprot.readMapEnd()
              self.prepend.append(_elem310)
          else: 
            while iprot.peekList():
              _elem320 = {}
              (_ktype322, _vtype323, _size321 ) = iprot.readMapBegin() 
              if _size321 >= 0:
                for _i325 in range(_size321):
                  _key326 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val327 = iprot.readI32()
                  _elem320[_key326] = _val327
              else: 
                while iprot.peekMap():
                  _key328 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val329 = iprot.readI32()
                  _elem320[_key328] = _val329
              iprot.readMapEnd()
              self.prepend.append(_elem320)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.append = []
          (_etype333, _size330) = iprot.readListBegin()
          if _size330 >= 0:
            for _i334 in range(_size330):
              _elem335 = {}
              (_ktype337, _vtype338, _size336 ) = iprot.readMapBegin() 
              if _size336 >= 0:
                for _i340 in range(_size336):
                  _key341 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val342 = iprot.readI32()
                  _elem335[_key341] = _val342
              else: 
                while iprot.peekMap():
                  _key343 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val344 = iprot.readI32()
                  _elem335[_key343] = _val344
              iprot.readMapEnd()
              self.append.append(_elem335)
          else: 
            while iprot.peekList():
              _elem345 = {}
              (_ktype347, _vtype348, _size346 ) = iprot.readMapBegin() 
              if _size346 >= 0:
                for _i350 in range(_size346):
                  _key351 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val352 = iprot.readI32()
                  _elem345[_key351] = _val352
              else: 
                while iprot.peekMap():
                  _key353 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val354 = iprot.readI32()
                  _elem345[_key353] = _val354
              iprot.readMapEnd()
              self.append.append(_elem345)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyStructField29Patch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.LIST, 1)
      oprot.writeListBegin(TType.MAP, len(self.assign))
      for iter355 in self.assign:
        oprot.writeMapBegin(TType.STRING, TType.I32, len(iter355))
        for kiter356,viter357 in iter355.items():
          oprot.writeString(kiter356.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter356, bytes) else oprot.writeString(kiter356)
          oprot.writeI32(viter357)
        oprot.writeMapEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    if self.prepend != None:
      oprot.writeFieldBegin('prepend', TType.LIST, 8)
      oprot.writeListBegin(TType.MAP, len(self.prepend))
      for iter358 in self.prepend:
        oprot.writeMapBegin(TType.STRING, TType.I32, len(iter358))
        for kiter359,viter360 in iter358.items():
          oprot.writeString(kiter359.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter359, bytes) else oprot.writeString(kiter359)
          oprot.writeI32(viter360)
        oprot.writeMapEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.append != None:
      oprot.writeFieldBegin('append', TType.LIST, 9)
      oprot.writeListBegin(TType.MAP, len(self.append))
      for iter361 in self.append:
        oprot.writeMapBegin(TType.STRING, TType.I32, len(iter361))
        for kiter362,viter363 in iter361.items():
          oprot.writeString(kiter362.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter362, bytes) else oprot.writeString(kiter362)
          oprot.writeI32(viter363)
        oprot.writeMapEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = []
      for _tmp_e364 in json_obj['assign']:
        _map365 = dict_cls()
        for _tmp_k366, _tmp_v367 in _tmp_e364.items():
          _tmp_kp368 = _tmp_k366
          if _tmp_v367 > 0x7fffffff or _tmp_v367 < -0x80000000:
            raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
          _map365[_tmp_kp368] = _tmp_v367
        self.assign.append(_map365)
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']
    if 'prepend' in json_obj and json_obj['prepend'] is not None:
      self.prepend = []
      for _tmp_e369 in json_obj['prepend']:
        _map370 = dict_cls()
        for _tmp_k371, _tmp_v372 in _tmp_e369.items():
          _tmp_kp373 = _tmp_k371
          if _tmp_v372 > 0x7fffffff or _tmp_v372 < -0x80000000:
            raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
          _map370[_tmp_kp373] = _tmp_v372
        self.prepend.append(_map370)
    if 'append' in json_obj and json_obj['append'] is not None:
      self.append = []
      for _tmp_e374 in json_obj['append']:
        _map375 = dict_cls()
        for _tmp_k376, _tmp_v377 in _tmp_e374.items():
          _tmp_kp378 = _tmp_k376
          if _tmp_v377 > 0x7fffffff or _tmp_v377 < -0x80000000:
            raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
          _map375[_tmp_kp378] = _tmp_v377
        self.append.append(_map375)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    if self.prepend is not None:
      value = pprint.pformat(self.prepend, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    prepend=%s' % (value))
    if self.append is not None:
      value = pprint.pformat(self.append, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    append=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
      'prepend',
      'append',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyStructField29Patch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyStructField29Patch, self)

  def _to_py_deprecated(self):
    return self

class MyStructField30Patch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
   - patchPrior: Patches any previously set values. Applies second.
   - add: Add the given values, if the keys are not already present. Applies forth.
   - patch: Patches any set value, including newly set values. Applies last.
   - remove: Removes entries, if present. Applies third.
   - put: Adds or replaces the given key/value pairs. Applies fifth.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.assign = {}
          (_ktype380, _vtype381, _size379 ) = iprot.readMapBegin() 
          if _size379 >= 0:
            for _i383 in range(_size379):
              _key384 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val385 = {}
              (_ktype387, _vtype388, _size386 ) = iprot.readMapBegin() 
              if _size386 >= 0:
                for _i390 in range(_size386):
                  _key391 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val392 = iprot.readI32()
                  _val385[_key391] = _val392
              else: 
                while iprot.peekMap():
                  _key393 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val394 = iprot.readI32()
                  _val385[_key393] = _val394
              iprot.readMapEnd()
              self.assign[_key384] = _val385
          else: 
            while iprot.peekMap():
              _key395 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val396 = {}
              (_ktype398, _vtype399, _size397 ) = iprot.readMapBegin() 
              if _size397 >= 0:
                for _i401 in range(_size397):
                  _key402 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val403 = iprot.readI32()
                  _val396[_key402] = _val403
              else: 
                while iprot.peekMap():
                  _key404 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val405 = iprot.readI32()
                  _val396[_key404] = _val405
              iprot.readMapEnd()
              self.assign[_key395] = _val396
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.patchPrior = {}
          (_ktype407, _vtype408, _size406 ) = iprot.readMapBegin() 
          if _size406 >= 0:
            for _i410 in range(_size406):
              _key411 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val412 = MyStructField30Patch1()
              _val412.read(iprot)
              self.patchPrior[_key411] = _val412
          else: 
            while iprot.peekMap():
              _key413 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val414 = MyStructField30Patch1()
              _val414.read(iprot)
              self.patchPrior[_key413] = _val414
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.add = {}
          (_ktype416, _vtype417, _size415 ) = iprot.readMapBegin() 
          if _size415 >= 0:
            for _i419 in range(_size415):
              _key420 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val421 = {}
              (_ktype423, _vtype424, _size422 ) = iprot.readMapBegin() 
              if _size422 >= 0:
                for _i426 in range(_size422):
                  _key427 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val428 = iprot.readI32()
                  _val421[_key427] = _val428
              else: 
                while iprot.peekMap():
                  _key429 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val430 = iprot.readI32()
                  _val421[_key429] = _val430
              iprot.readMapEnd()
              self.add[_key420] = _val421
          else: 
            while iprot.peekMap():
              _key431 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val432 = {}
              (_ktype434, _vtype435, _size433 ) = iprot.readMapBegin() 
              if _size433 >= 0:
                for _i437 in range(_size433):
                  _key438 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val439 = iprot.readI32()
                  _val432[_key438] = _val439
              else: 
                while iprot.peekMap():
                  _key440 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val441 = iprot.readI32()
                  _val432[_key440] = _val441
              iprot.readMapEnd()
              self.add[_key431] = _val432
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.patch = {}
          (_ktype443, _vtype444, _size442 ) = iprot.readMapBegin() 
          if _size442 >= 0:
            for _i446 in range(_size442):
              _key447 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val448 = MyStructField30Patch1()
              _val448.read(iprot)
              self.patch[_key447] = _val448
          else: 
            while iprot.peekMap():
              _key449 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val450 = MyStructField30Patch1()
              _val450.read(iprot)
              self.patch[_key449] = _val450
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.SET:
          self.remove = set()
          (_etype454, _size451) = iprot.readSetBegin()
          if _size451 >= 0:
            for _i455 in range(_size451):
              _elem456 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.remove.add(_elem456)
          else: 
            while iprot.peekSet():
              _elem457 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.remove.add(_elem457)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.put = {}
          (_ktype459, _vtype460, _size458 ) = iprot.readMapBegin() 
          if _size458 >= 0:
            for _i462 in range(_size458):
              _key463 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val464 = {}
              (_ktype466, _vtype467, _size465 ) = iprot.readMapBegin() 
              if _size465 >= 0:
                for _i469 in range(_size465):
                  _key470 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val471 = iprot.readI32()
                  _val464[_key470] = _val471
              else: 
                while iprot.peekMap():
                  _key472 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val473 = iprot.readI32()
                  _val464[_key472] = _val473
              iprot.readMapEnd()
              self.put[_key463] = _val464
          else: 
            while iprot.peekMap():
              _key474 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val475 = {}
              (_ktype477, _vtype478, _size476 ) = iprot.readMapBegin() 
              if _size476 >= 0:
                for _i480 in range(_size476):
                  _key481 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val482 = iprot.readI32()
                  _val475[_key481] = _val482
              else: 
                while iprot.peekMap():
                  _key483 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val484 = iprot.readI32()
                  _val475[_key483] = _val484
              iprot.readMapEnd()
              self.put[_key474] = _val475
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyStructField30Patch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.assign))
      for kiter485,viter486 in self.assign.items():
        oprot.writeString(kiter485.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter485, bytes) else oprot.writeString(kiter485)
        oprot.writeMapBegin(TType.STRING, TType.I32, len(viter486))
        for kiter487,viter488 in viter486.items():
          oprot.writeString(kiter487.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter487, bytes) else oprot.writeString(kiter487)
          oprot.writeI32(viter488)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    if self.patchPrior != None:
      oprot.writeFieldBegin('patchPrior', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.patchPrior))
      for kiter489,viter490 in self.patchPrior.items():
        oprot.writeString(kiter489.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter489, bytes) else oprot.writeString(kiter489)
        viter490.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.add != None:
      oprot.writeFieldBegin('add', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.add))
      for kiter491,viter492 in self.add.items():
        oprot.writeString(kiter491.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter491, bytes) else oprot.writeString(kiter491)
        oprot.writeMapBegin(TType.STRING, TType.I32, len(viter492))
        for kiter493,viter494 in viter492.items():
          oprot.writeString(kiter493.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter493, bytes) else oprot.writeString(kiter493)
          oprot.writeI32(viter494)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.patch != None:
      oprot.writeFieldBegin('patch', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.patch))
      for kiter495,viter496 in self.patch.items():
        oprot.writeString(kiter495.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter495, bytes) else oprot.writeString(kiter495)
        viter496.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.remove != None:
      oprot.writeFieldBegin('remove', TType.SET, 7)
      oprot.writeSetBegin(TType.STRING, len(self.remove))
      for iter497 in self.remove:
        oprot.writeString(iter497.encode('utf-8')) if UTF8STRINGS and not isinstance(iter497, bytes) else oprot.writeString(iter497)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.put != None:
      oprot.writeFieldBegin('put', TType.MAP, 9)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.put))
      for kiter498,viter499 in self.put.items():
        oprot.writeString(kiter498.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter498, bytes) else oprot.writeString(kiter498)
        oprot.writeMapBegin(TType.STRING, TType.I32, len(viter499))
        for kiter500,viter501 in viter499.items():
          oprot.writeString(kiter500.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter500, bytes) else oprot.writeString(kiter500)
          oprot.writeI32(viter501)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = dict_cls()
      for _tmp_k502, _tmp_v503 in json_obj['assign'].items():
        _tmp_kp504 = _tmp_k502
        _map505 = dict_cls()
        for _tmp_k506, _tmp_v507 in _tmp_v503.items():
          _tmp_kp508 = _tmp_k506
          if _tmp_v507 > 0x7fffffff or _tmp_v507 < -0x80000000:
            raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
          _map505[_tmp_kp508] = _tmp_v507
        self.assign[_tmp_kp504] = _map505
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']
    if 'patchPrior' in json_obj and json_obj['patchPrior'] is not None:
      self.patchPrior = dict_cls()
      for _tmp_k509, _tmp_v510 in json_obj['patchPrior'].items():
        _tmp_kp511 = _tmp_k509
        _struct512 = MyStructField30Patch1()
        _struct512.readFromJson(_tmp_v510, is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
        self.patchPrior[_tmp_kp511] = _struct512
    if 'add' in json_obj and json_obj['add'] is not None:
      self.add = dict_cls()
      for _tmp_k513, _tmp_v514 in json_obj['add'].items():
        _tmp_kp515 = _tmp_k513
        _map516 = dict_cls()
        for _tmp_k517, _tmp_v518 in _tmp_v514.items():
          _tmp_kp519 = _tmp_k517
          if _tmp_v518 > 0x7fffffff or _tmp_v518 < -0x80000000:
            raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
          _map516[_tmp_kp519] = _tmp_v518
        self.add[_tmp_kp515] = _map516
    if 'patch' in json_obj and json_obj['patch'] is not None:
      self.patch = dict_cls()
      for _tmp_k520, _tmp_v521 in json_obj['patch'].items():
        _tmp_kp522 = _tmp_k520
        _struct523 = MyStructField30Patch1()
        _struct523.readFromJson(_tmp_v521, is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
        self.patch[_tmp_kp522] = _struct523
    if 'remove' in json_obj and json_obj['remove'] is not None:
      self.remove = set_cls()
      for _tmp_e524 in json_obj['remove']:
        self.remove.add(_tmp_e524)
    if 'put' in json_obj and json_obj['put'] is not None:
      self.put = dict_cls()
      for _tmp_k525, _tmp_v526 in json_obj['put'].items():
        _tmp_kp527 = _tmp_k525
        _map528 = dict_cls()
        for _tmp_k529, _tmp_v530 in _tmp_v526.items():
          _tmp_kp531 = _tmp_k529
          if _tmp_v530 > 0x7fffffff or _tmp_v530 < -0x80000000:
            raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
          _map528[_tmp_kp531] = _tmp_v530
        self.put[_tmp_kp527] = _map528

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    if self.patchPrior is not None:
      value = pprint.pformat(self.patchPrior, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patchPrior=%s' % (value))
    if self.add is not None:
      value = pprint.pformat(self.add, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    add=%s' % (value))
    if self.patch is not None:
      value = pprint.pformat(self.patch, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patch=%s' % (value))
    if self.remove is not None:
      value = pprint.pformat(self.remove, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    remove=%s' % (value))
    if self.put is not None:
      value = pprint.pformat(self.put, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    put=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
      'patchPrior',
      'add',
      'patch',
      'remove',
      'put',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyStructField30Patch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyStructField30Patch, self)

  def _to_py_deprecated(self):
    return self

class MyStructField30Patch1:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
   - patchPrior: Patches any previously set values. Applies second.
   - add: Add the given values, if the keys are not already present. Applies forth.
   - patch: Patches any set value, including newly set values. Applies last.
   - remove: Removes entries, if present. Applies third.
   - put: Adds or replaces the given key/value pairs. Applies fifth.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.assign = {}
          (_ktype533, _vtype534, _size532 ) = iprot.readMapBegin() 
          if _size532 >= 0:
            for _i536 in range(_size532):
              _key537 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val538 = iprot.readI32()
              self.assign[_key537] = _val538
          else: 
            while iprot.peekMap():
              _key539 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val540 = iprot.readI32()
              self.assign[_key539] = _val540
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.patchPrior = {}
          (_ktype542, _vtype543, _size541 ) = iprot.readMapBegin() 
          if _size541 >= 0:
            for _i545 in range(_size541):
              _key546 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val547 = thrift.lib.thrift.patch.ttypes.I32Patch()
              _val547.read(iprot)
              self.patchPrior[_key546] = _val547
          else: 
            while iprot.peekMap():
              _key548 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val549 = thrift.lib.thrift.patch.ttypes.I32Patch()
              _val549.read(iprot)
              self.patchPrior[_key548] = _val549
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.add = {}
          (_ktype551, _vtype552, _size550 ) = iprot.readMapBegin() 
          if _size550 >= 0:
            for _i554 in range(_size550):
              _key555 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val556 = iprot.readI32()
              self.add[_key555] = _val556
          else: 
            while iprot.peekMap():
              _key557 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val558 = iprot.readI32()
              self.add[_key557] = _val558
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.patch = {}
          (_ktype560, _vtype561, _size559 ) = iprot.readMapBegin() 
          if _size559 >= 0:
            for _i563 in range(_size559):
              _key564 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val565 = thrift.lib.thrift.patch.ttypes.I32Patch()
              _val565.read(iprot)
              self.patch[_key564] = _val565
          else: 
            while iprot.peekMap():
              _key566 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val567 = thrift.lib.thrift.patch.ttypes.I32Patch()
              _val567.read(iprot)
              self.patch[_key566] = _val567
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.SET:
          self.remove = set()
          (_etype571, _size568) = iprot.readSetBegin()
          if _size568 >= 0:
            for _i572 in range(_size568):
              _elem573 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.remove.add(_elem573)
          else: 
            while iprot.peekSet():
              _elem574 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.remove.add(_elem574)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.MAP:
          self.put = {}
          (_ktype576, _vtype577, _size575 ) = iprot.readMapBegin() 
          if _size575 >= 0:
            for _i579 in range(_size575):
              _key580 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val581 = iprot.readI32()
              self.put[_key580] = _val581
          else: 
            while iprot.peekMap():
              _key582 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val583 = iprot.readI32()
              self.put[_key582] = _val583
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyStructField30Patch1')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.assign))
      for kiter584,viter585 in self.assign.items():
        oprot.writeString(kiter584.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter584, bytes) else oprot.writeString(kiter584)
        oprot.writeI32(viter585)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    if self.patchPrior != None:
      oprot.writeFieldBegin('patchPrior', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.patchPrior))
      for kiter586,viter587 in self.patchPrior.items():
        oprot.writeString(kiter586.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter586, bytes) else oprot.writeString(kiter586)
        viter587.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.add != None:
      oprot.writeFieldBegin('add', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.add))
      for kiter588,viter589 in self.add.items():
        oprot.writeString(kiter588.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter588, bytes) else oprot.writeString(kiter588)
        oprot.writeI32(viter589)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.patch != None:
      oprot.writeFieldBegin('patch', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.patch))
      for kiter590,viter591 in self.patch.items():
        oprot.writeString(kiter590.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter590, bytes) else oprot.writeString(kiter590)
        viter591.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.remove != None:
      oprot.writeFieldBegin('remove', TType.SET, 7)
      oprot.writeSetBegin(TType.STRING, len(self.remove))
      for iter592 in self.remove:
        oprot.writeString(iter592.encode('utf-8')) if UTF8STRINGS and not isinstance(iter592, bytes) else oprot.writeString(iter592)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.put != None:
      oprot.writeFieldBegin('put', TType.MAP, 9)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.put))
      for kiter593,viter594 in self.put.items():
        oprot.writeString(kiter593.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter593, bytes) else oprot.writeString(kiter593)
        oprot.writeI32(viter594)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = dict_cls()
      for _tmp_k595, _tmp_v596 in json_obj['assign'].items():
        _tmp_kp597 = _tmp_k595
        if _tmp_v596 > 0x7fffffff or _tmp_v596 < -0x80000000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.assign[_tmp_kp597] = _tmp_v596
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']
    if 'patchPrior' in json_obj and json_obj['patchPrior'] is not None:
      self.patchPrior = dict_cls()
      for _tmp_k598, _tmp_v599 in json_obj['patchPrior'].items():
        _tmp_kp600 = _tmp_k598
        _struct601 = thrift.lib.thrift.patch.ttypes.I32Patch()
        _struct601.readFromJson(_tmp_v599, is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
        self.patchPrior[_tmp_kp600] = _struct601
    if 'add' in json_obj and json_obj['add'] is not None:
      self.add = dict_cls()
      for _tmp_k602, _tmp_v603 in json_obj['add'].items():
        _tmp_kp604 = _tmp_k602
        if _tmp_v603 > 0x7fffffff or _tmp_v603 < -0x80000000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.add[_tmp_kp604] = _tmp_v603
    if 'patch' in json_obj and json_obj['patch'] is not None:
      self.patch = dict_cls()
      for _tmp_k605, _tmp_v606 in json_obj['patch'].items():
        _tmp_kp607 = _tmp_k605
        _struct608 = thrift.lib.thrift.patch.ttypes.I32Patch()
        _struct608.readFromJson(_tmp_v606, is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
        self.patch[_tmp_kp607] = _struct608
    if 'remove' in json_obj and json_obj['remove'] is not None:
      self.remove = set_cls()
      for _tmp_e609 in json_obj['remove']:
        self.remove.add(_tmp_e609)
    if 'put' in json_obj and json_obj['put'] is not None:
      self.put = dict_cls()
      for _tmp_k610, _tmp_v611 in json_obj['put'].items():
        _tmp_kp612 = _tmp_k610
        if _tmp_v611 > 0x7fffffff or _tmp_v611 < -0x80000000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.put[_tmp_kp612] = _tmp_v611

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    if self.patchPrior is not None:
      value = pprint.pformat(self.patchPrior, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patchPrior=%s' % (value))
    if self.add is not None:
      value = pprint.pformat(self.add, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    add=%s' % (value))
    if self.patch is not None:
      value = pprint.pformat(self.patch, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patch=%s' % (value))
    if self.remove is not None:
      value = pprint.pformat(self.remove, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    remove=%s' % (value))
    if self.put is not None:
      value = pprint.pformat(self.put, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    put=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
      'patchPrior',
      'add',
      'patch',
      'remove',
      'put',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyStructField30Patch1, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyStructField30Patch1, self)

  def _to_py_deprecated(self):
    return self

class MyStructFieldPatch:
  r"""
  Attributes:
   - structWithCustomDefault
   - i32WithCustomDefault
   - mapMap
   - listMap
   - optMapVal
   - optSetVal
   - optListVal
   - optLateStructVal
   - optStructVal
   - optEnumVal
   - optBinaryVal
   - optStringVal
   - optDoubleVal
   - optFloatVal
   - optI64Val
   - optI32Val
   - optI16Val
   - optByteVal
   - optBoolVal
   - lateStructVal
   - unionVal
   - structVal
   - enumVal
   - binaryVal
   - stringVal
   - doubleVal
   - floatVal
   - i64Val
   - i32Val
   - i16Val
   - byteVal
   - boolVal
   - structWithFieldCustomDefault
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -32:
        if ftype == TType.STRUCT:
          self.structWithCustomDefault = MyDataWithCustomDefaultPatch()
          self.structWithCustomDefault.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -31:
        if ftype == TType.STRUCT:
          self.i32WithCustomDefault = thrift.lib.thrift.patch.ttypes.I32Patch()
          self.i32WithCustomDefault.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -30:
        if ftype == TType.STRUCT:
          self.mapMap = MyStructField30Patch()
          self.mapMap.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -29:
        if ftype == TType.STRUCT:
          self.listMap = MyStructField29Patch()
          self.listMap.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -28:
        if ftype == TType.STRUCT:
          self.optMapVal = MyStructField28Patch()
          self.optMapVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -27:
        if ftype == TType.STRUCT:
          self.optSetVal = MyStructField27Patch()
          self.optSetVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -26:
        if ftype == TType.STRUCT:
          self.optListVal = MyStructField26Patch()
          self.optListVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -25:
        if ftype == TType.STRUCT:
          self.optLateStructVal = LateDefStructPatch()
          self.optLateStructVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -24:
        if ftype == TType.STRUCT:
          self.optStructVal = MyDataPatch()
          self.optStructVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -23:
        if ftype == TType.STRUCT:
          self.optEnumVal = MyStructField23Patch()
          self.optEnumVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -22:
        if ftype == TType.STRUCT:
          self.optBinaryVal = thrift.lib.thrift.patch.ttypes.BinaryPatch()
          self.optBinaryVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -21:
        if ftype == TType.STRUCT:
          self.optStringVal = thrift.lib.thrift.patch.ttypes.StringPatch()
          self.optStringVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -20:
        if ftype == TType.STRUCT:
          self.optDoubleVal = thrift.lib.thrift.patch.ttypes.DoublePatch()
          self.optDoubleVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -19:
        if ftype == TType.STRUCT:
          self.optFloatVal = thrift.lib.thrift.patch.ttypes.FloatPatch()
          self.optFloatVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -18:
        if ftype == TType.STRUCT:
          self.optI64Val = thrift.lib.thrift.patch.ttypes.I64Patch()
          self.optI64Val.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -17:
        if ftype == TType.STRUCT:
          self.optI32Val = thrift.lib.thrift.patch.ttypes.I32Patch()
          self.optI32Val.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -16:
        if ftype == TType.STRUCT:
          self.optI16Val = thrift.lib.thrift.patch.ttypes.I16Patch()
          self.optI16Val.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -15:
        if ftype == TType.STRUCT:
          self.optByteVal = thrift.lib.thrift.patch.ttypes.BytePatch()
          self.optByteVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -14:
        if ftype == TType.STRUCT:
          self.optBoolVal = thrift.lib.thrift.patch.ttypes.BoolPatch()
          self.optBoolVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -13:
        if ftype == TType.STRUCT:
          self.lateStructVal = LateDefStructPatch()
          self.lateStructVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -12:
        if ftype == TType.STRUCT:
          self.unionVal = MyUnionPatch()
          self.unionVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -11:
        if ftype == TType.STRUCT:
          self.structVal = MyDataPatch()
          self.structVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -10:
        if ftype == TType.STRUCT:
          self.enumVal = MyStructField10Patch()
          self.enumVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -9:
        if ftype == TType.STRUCT:
          self.binaryVal = thrift.lib.thrift.patch.ttypes.BinaryPatch()
          self.binaryVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -8:
        if ftype == TType.STRUCT:
          self.stringVal = thrift.lib.thrift.patch.ttypes.StringPatch()
          self.stringVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -7:
        if ftype == TType.STRUCT:
          self.doubleVal = thrift.lib.thrift.patch.ttypes.DoublePatch()
          self.doubleVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -6:
        if ftype == TType.STRUCT:
          self.floatVal = thrift.lib.thrift.patch.ttypes.FloatPatch()
          self.floatVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -5:
        if ftype == TType.STRUCT:
          self.i64Val = thrift.lib.thrift.patch.ttypes.I64Patch()
          self.i64Val.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -4:
        if ftype == TType.STRUCT:
          self.i32Val = thrift.lib.thrift.patch.ttypes.I32Patch()
          self.i32Val.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -3:
        if ftype == TType.STRUCT:
          self.i16Val = thrift.lib.thrift.patch.ttypes.I16Patch()
          self.i16Val.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -2:
        if ftype == TType.STRUCT:
          self.byteVal = thrift.lib.thrift.patch.ttypes.BytePatch()
          self.byteVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -1:
        if ftype == TType.STRUCT:
          self.boolVal = thrift.lib.thrift.patch.ttypes.BoolPatch()
          self.boolVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.structWithFieldCustomDefault = MyDataPatch()
          self.structWithFieldCustomDefault.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyStructFieldPatch')
    if self.structWithCustomDefault != None:
      oprot.writeFieldBegin('structWithCustomDefault', TType.STRUCT, -32)
      self.structWithCustomDefault.write(oprot)
      oprot.writeFieldEnd()
    if self.i32WithCustomDefault != None:
      oprot.writeFieldBegin('i32WithCustomDefault', TType.STRUCT, -31)
      self.i32WithCustomDefault.write(oprot)
      oprot.writeFieldEnd()
    if self.mapMap != None:
      oprot.writeFieldBegin('mapMap', TType.STRUCT, -30)
      self.mapMap.write(oprot)
      oprot.writeFieldEnd()
    if self.listMap != None:
      oprot.writeFieldBegin('listMap', TType.STRUCT, -29)
      self.listMap.write(oprot)
      oprot.writeFieldEnd()
    if self.optMapVal != None:
      oprot.writeFieldBegin('optMapVal', TType.STRUCT, -28)
      self.optMapVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optSetVal != None:
      oprot.writeFieldBegin('optSetVal', TType.STRUCT, -27)
      self.optSetVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optListVal != None:
      oprot.writeFieldBegin('optListVal', TType.STRUCT, -26)
      self.optListVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optLateStructVal != None:
      oprot.writeFieldBegin('optLateStructVal', TType.STRUCT, -25)
      self.optLateStructVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optStructVal != None:
      oprot.writeFieldBegin('optStructVal', TType.STRUCT, -24)
      self.optStructVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optEnumVal != None:
      oprot.writeFieldBegin('optEnumVal', TType.STRUCT, -23)
      self.optEnumVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optBinaryVal != None:
      oprot.writeFieldBegin('optBinaryVal', TType.STRUCT, -22)
      self.optBinaryVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optStringVal != None:
      oprot.writeFieldBegin('optStringVal', TType.STRUCT, -21)
      self.optStringVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optDoubleVal != None:
      oprot.writeFieldBegin('optDoubleVal', TType.STRUCT, -20)
      self.optDoubleVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optFloatVal != None:
      oprot.writeFieldBegin('optFloatVal', TType.STRUCT, -19)
      self.optFloatVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optI64Val != None:
      oprot.writeFieldBegin('optI64Val', TType.STRUCT, -18)
      self.optI64Val.write(oprot)
      oprot.writeFieldEnd()
    if self.optI32Val != None:
      oprot.writeFieldBegin('optI32Val', TType.STRUCT, -17)
      self.optI32Val.write(oprot)
      oprot.writeFieldEnd()
    if self.optI16Val != None:
      oprot.writeFieldBegin('optI16Val', TType.STRUCT, -16)
      self.optI16Val.write(oprot)
      oprot.writeFieldEnd()
    if self.optByteVal != None:
      oprot.writeFieldBegin('optByteVal', TType.STRUCT, -15)
      self.optByteVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optBoolVal != None:
      oprot.writeFieldBegin('optBoolVal', TType.STRUCT, -14)
      self.optBoolVal.write(oprot)
      oprot.writeFieldEnd()
    if self.lateStructVal != None:
      oprot.writeFieldBegin('lateStructVal', TType.STRUCT, -13)
      self.lateStructVal.write(oprot)
      oprot.writeFieldEnd()
    if self.unionVal != None:
      oprot.writeFieldBegin('unionVal', TType.STRUCT, -12)
      self.unionVal.write(oprot)
      oprot.writeFieldEnd()
    if self.structVal != None:
      oprot.writeFieldBegin('structVal', TType.STRUCT, -11)
      self.structVal.write(oprot)
      oprot.writeFieldEnd()
    if self.enumVal != None:
      oprot.writeFieldBegin('enumVal', TType.STRUCT, -10)
      self.enumVal.write(oprot)
      oprot.writeFieldEnd()
    if self.binaryVal != None:
      oprot.writeFieldBegin('binaryVal', TType.STRUCT, -9)
      self.binaryVal.write(oprot)
      oprot.writeFieldEnd()
    if self.stringVal != None:
      oprot.writeFieldBegin('stringVal', TType.STRUCT, -8)
      self.stringVal.write(oprot)
      oprot.writeFieldEnd()
    if self.doubleVal != None:
      oprot.writeFieldBegin('doubleVal', TType.STRUCT, -7)
      self.doubleVal.write(oprot)
      oprot.writeFieldEnd()
    if self.floatVal != None:
      oprot.writeFieldBegin('floatVal', TType.STRUCT, -6)
      self.floatVal.write(oprot)
      oprot.writeFieldEnd()
    if self.i64Val != None:
      oprot.writeFieldBegin('i64Val', TType.STRUCT, -5)
      self.i64Val.write(oprot)
      oprot.writeFieldEnd()
    if self.i32Val != None:
      oprot.writeFieldBegin('i32Val', TType.STRUCT, -4)
      self.i32Val.write(oprot)
      oprot.writeFieldEnd()
    if self.i16Val != None:
      oprot.writeFieldBegin('i16Val', TType.STRUCT, -3)
      self.i16Val.write(oprot)
      oprot.writeFieldEnd()
    if self.byteVal != None:
      oprot.writeFieldBegin('byteVal', TType.STRUCT, -2)
      self.byteVal.write(oprot)
      oprot.writeFieldEnd()
    if self.boolVal != None:
      oprot.writeFieldBegin('boolVal', TType.STRUCT, -1)
      self.boolVal.write(oprot)
      oprot.writeFieldEnd()
    if self.structWithFieldCustomDefault != None:
      oprot.writeFieldBegin('structWithFieldCustomDefault', TType.STRUCT, 1)
      self.structWithFieldCustomDefault.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'structWithCustomDefault' in json_obj and json_obj['structWithCustomDefault'] is not None:
      self.structWithCustomDefault = MyDataWithCustomDefaultPatch()
      self.structWithCustomDefault.readFromJson(json_obj['structWithCustomDefault'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'i32WithCustomDefault' in json_obj and json_obj['i32WithCustomDefault'] is not None:
      self.i32WithCustomDefault = thrift.lib.thrift.patch.ttypes.I32Patch()
      self.i32WithCustomDefault.readFromJson(json_obj['i32WithCustomDefault'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'mapMap' in json_obj and json_obj['mapMap'] is not None:
      self.mapMap = MyStructField30Patch()
      self.mapMap.readFromJson(json_obj['mapMap'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'listMap' in json_obj and json_obj['listMap'] is not None:
      self.listMap = MyStructField29Patch()
      self.listMap.readFromJson(json_obj['listMap'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optMapVal' in json_obj and json_obj['optMapVal'] is not None:
      self.optMapVal = MyStructField28Patch()
      self.optMapVal.readFromJson(json_obj['optMapVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optSetVal' in json_obj and json_obj['optSetVal'] is not None:
      self.optSetVal = MyStructField27Patch()
      self.optSetVal.readFromJson(json_obj['optSetVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optListVal' in json_obj and json_obj['optListVal'] is not None:
      self.optListVal = MyStructField26Patch()
      self.optListVal.readFromJson(json_obj['optListVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optLateStructVal' in json_obj and json_obj['optLateStructVal'] is not None:
      self.optLateStructVal = LateDefStructPatch()
      self.optLateStructVal.readFromJson(json_obj['optLateStructVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optStructVal' in json_obj and json_obj['optStructVal'] is not None:
      self.optStructVal = MyDataPatch()
      self.optStructVal.readFromJson(json_obj['optStructVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optEnumVal' in json_obj and json_obj['optEnumVal'] is not None:
      self.optEnumVal = MyStructField23Patch()
      self.optEnumVal.readFromJson(json_obj['optEnumVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optBinaryVal' in json_obj and json_obj['optBinaryVal'] is not None:
      self.optBinaryVal = thrift.lib.thrift.patch.ttypes.BinaryPatch()
      self.optBinaryVal.readFromJson(json_obj['optBinaryVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optStringVal' in json_obj and json_obj['optStringVal'] is not None:
      self.optStringVal = thrift.lib.thrift.patch.ttypes.StringPatch()
      self.optStringVal.readFromJson(json_obj['optStringVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optDoubleVal' in json_obj and json_obj['optDoubleVal'] is not None:
      self.optDoubleVal = thrift.lib.thrift.patch.ttypes.DoublePatch()
      self.optDoubleVal.readFromJson(json_obj['optDoubleVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optFloatVal' in json_obj and json_obj['optFloatVal'] is not None:
      self.optFloatVal = thrift.lib.thrift.patch.ttypes.FloatPatch()
      self.optFloatVal.readFromJson(json_obj['optFloatVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optI64Val' in json_obj and json_obj['optI64Val'] is not None:
      self.optI64Val = thrift.lib.thrift.patch.ttypes.I64Patch()
      self.optI64Val.readFromJson(json_obj['optI64Val'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optI32Val' in json_obj and json_obj['optI32Val'] is not None:
      self.optI32Val = thrift.lib.thrift.patch.ttypes.I32Patch()
      self.optI32Val.readFromJson(json_obj['optI32Val'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optI16Val' in json_obj and json_obj['optI16Val'] is not None:
      self.optI16Val = thrift.lib.thrift.patch.ttypes.I16Patch()
      self.optI16Val.readFromJson(json_obj['optI16Val'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optByteVal' in json_obj and json_obj['optByteVal'] is not None:
      self.optByteVal = thrift.lib.thrift.patch.ttypes.BytePatch()
      self.optByteVal.readFromJson(json_obj['optByteVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optBoolVal' in json_obj and json_obj['optBoolVal'] is not None:
      self.optBoolVal = thrift.lib.thrift.patch.ttypes.BoolPatch()
      self.optBoolVal.readFromJson(json_obj['optBoolVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'lateStructVal' in json_obj and json_obj['lateStructVal'] is not None:
      self.lateStructVal = LateDefStructPatch()
      self.lateStructVal.readFromJson(json_obj['lateStructVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'unionVal' in json_obj and json_obj['unionVal'] is not None:
      self.unionVal = MyUnionPatch()
      self.unionVal.readFromJson(json_obj['unionVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'structVal' in json_obj and json_obj['structVal'] is not None:
      self.structVal = MyDataPatch()
      self.structVal.readFromJson(json_obj['structVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'enumVal' in json_obj and json_obj['enumVal'] is not None:
      self.enumVal = MyStructField10Patch()
      self.enumVal.readFromJson(json_obj['enumVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'binaryVal' in json_obj and json_obj['binaryVal'] is not None:
      self.binaryVal = thrift.lib.thrift.patch.ttypes.BinaryPatch()
      self.binaryVal.readFromJson(json_obj['binaryVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'stringVal' in json_obj and json_obj['stringVal'] is not None:
      self.stringVal = thrift.lib.thrift.patch.ttypes.StringPatch()
      self.stringVal.readFromJson(json_obj['stringVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'doubleVal' in json_obj and json_obj['doubleVal'] is not None:
      self.doubleVal = thrift.lib.thrift.patch.ttypes.DoublePatch()
      self.doubleVal.readFromJson(json_obj['doubleVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'floatVal' in json_obj and json_obj['floatVal'] is not None:
      self.floatVal = thrift.lib.thrift.patch.ttypes.FloatPatch()
      self.floatVal.readFromJson(json_obj['floatVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'i64Val' in json_obj and json_obj['i64Val'] is not None:
      self.i64Val = thrift.lib.thrift.patch.ttypes.I64Patch()
      self.i64Val.readFromJson(json_obj['i64Val'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'i32Val' in json_obj and json_obj['i32Val'] is not None:
      self.i32Val = thrift.lib.thrift.patch.ttypes.I32Patch()
      self.i32Val.readFromJson(json_obj['i32Val'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'i16Val' in json_obj and json_obj['i16Val'] is not None:
      self.i16Val = thrift.lib.thrift.patch.ttypes.I16Patch()
      self.i16Val.readFromJson(json_obj['i16Val'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'byteVal' in json_obj and json_obj['byteVal'] is not None:
      self.byteVal = thrift.lib.thrift.patch.ttypes.BytePatch()
      self.byteVal.readFromJson(json_obj['byteVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'boolVal' in json_obj and json_obj['boolVal'] is not None:
      self.boolVal = thrift.lib.thrift.patch.ttypes.BoolPatch()
      self.boolVal.readFromJson(json_obj['boolVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'structWithFieldCustomDefault' in json_obj and json_obj['structWithFieldCustomDefault'] is not None:
      self.structWithFieldCustomDefault = MyDataPatch()
      self.structWithFieldCustomDefault.readFromJson(json_obj['structWithFieldCustomDefault'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.structWithCustomDefault is not None:
      value = pprint.pformat(self.structWithCustomDefault, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    structWithCustomDefault=%s' % (value))
    if self.i32WithCustomDefault is not None:
      value = pprint.pformat(self.i32WithCustomDefault, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    i32WithCustomDefault=%s' % (value))
    if self.mapMap is not None:
      value = pprint.pformat(self.mapMap, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    mapMap=%s' % (value))
    if self.listMap is not None:
      value = pprint.pformat(self.listMap, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    listMap=%s' % (value))
    if self.optMapVal is not None:
      value = pprint.pformat(self.optMapVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optMapVal=%s' % (value))
    if self.optSetVal is not None:
      value = pprint.pformat(self.optSetVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optSetVal=%s' % (value))
    if self.optListVal is not None:
      value = pprint.pformat(self.optListVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optListVal=%s' % (value))
    if self.optLateStructVal is not None:
      value = pprint.pformat(self.optLateStructVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optLateStructVal=%s' % (value))
    if self.optStructVal is not None:
      value = pprint.pformat(self.optStructVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optStructVal=%s' % (value))
    if self.optEnumVal is not None:
      value = pprint.pformat(self.optEnumVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optEnumVal=%s' % (value))
    if self.optBinaryVal is not None:
      value = pprint.pformat(self.optBinaryVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optBinaryVal=%s' % (value))
    if self.optStringVal is not None:
      value = pprint.pformat(self.optStringVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optStringVal=%s' % (value))
    if self.optDoubleVal is not None:
      value = pprint.pformat(self.optDoubleVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optDoubleVal=%s' % (value))
    if self.optFloatVal is not None:
      value = pprint.pformat(self.optFloatVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optFloatVal=%s' % (value))
    if self.optI64Val is not None:
      value = pprint.pformat(self.optI64Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optI64Val=%s' % (value))
    if self.optI32Val is not None:
      value = pprint.pformat(self.optI32Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optI32Val=%s' % (value))
    if self.optI16Val is not None:
      value = pprint.pformat(self.optI16Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optI16Val=%s' % (value))
    if self.optByteVal is not None:
      value = pprint.pformat(self.optByteVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optByteVal=%s' % (value))
    if self.optBoolVal is not None:
      value = pprint.pformat(self.optBoolVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optBoolVal=%s' % (value))
    if self.lateStructVal is not None:
      value = pprint.pformat(self.lateStructVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    lateStructVal=%s' % (value))
    if self.unionVal is not None:
      value = pprint.pformat(self.unionVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    unionVal=%s' % (value))
    if self.structVal is not None:
      value = pprint.pformat(self.structVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    structVal=%s' % (value))
    if self.enumVal is not None:
      value = pprint.pformat(self.enumVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    enumVal=%s' % (value))
    if self.binaryVal is not None:
      value = pprint.pformat(self.binaryVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    binaryVal=%s' % (value))
    if self.stringVal is not None:
      value = pprint.pformat(self.stringVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    stringVal=%s' % (value))
    if self.doubleVal is not None:
      value = pprint.pformat(self.doubleVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    doubleVal=%s' % (value))
    if self.floatVal is not None:
      value = pprint.pformat(self.floatVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    floatVal=%s' % (value))
    if self.i64Val is not None:
      value = pprint.pformat(self.i64Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    i64Val=%s' % (value))
    if self.i32Val is not None:
      value = pprint.pformat(self.i32Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    i32Val=%s' % (value))
    if self.i16Val is not None:
      value = pprint.pformat(self.i16Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    i16Val=%s' % (value))
    if self.byteVal is not None:
      value = pprint.pformat(self.byteVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    byteVal=%s' % (value))
    if self.boolVal is not None:
      value = pprint.pformat(self.boolVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    boolVal=%s' % (value))
    if self.structWithFieldCustomDefault is not None:
      value = pprint.pformat(self.structWithFieldCustomDefault, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    structWithFieldCustomDefault=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'structWithCustomDefault',
      'i32WithCustomDefault',
      'mapMap',
      'listMap',
      'optMapVal',
      'optSetVal',
      'optListVal',
      'optLateStructVal',
      'optStructVal',
      'optEnumVal',
      'optBinaryVal',
      'optStringVal',
      'optDoubleVal',
      'optFloatVal',
      'optI64Val',
      'optI32Val',
      'optI16Val',
      'optByteVal',
      'optBoolVal',
      'lateStructVal',
      'unionVal',
      'structVal',
      'enumVal',
      'binaryVal',
      'stringVal',
      'doubleVal',
      'floatVal',
      'i64Val',
      'i32Val',
      'i16Val',
      'byteVal',
      'boolVal',
      'structWithFieldCustomDefault',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyStructFieldPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyStructFieldPatch, self)

  def _to_py_deprecated(self):
    return self

class MyStructEnsureStruct:
  r"""
  Attributes:
   - structWithCustomDefault
   - i32WithCustomDefault
   - mapMap
   - listMap
   - optMapVal
   - optSetVal
   - optListVal
   - optLateStructVal
   - optStructVal
   - optEnumVal
   - optBinaryVal
   - optStringVal
   - optDoubleVal
   - optFloatVal
   - optI64Val
   - optI32Val
   - optI16Val
   - optByteVal
   - optBoolVal
   - lateStructVal
   - unionVal
   - structVal
   - enumVal
   - binaryVal
   - stringVal
   - doubleVal
   - floatVal
   - i64Val
   - i32Val
   - i16Val
   - byteVal
   - boolVal
   - structWithFieldCustomDefault
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -32:
        if ftype == TType.STRUCT:
          self.structWithCustomDefault = MyDataWithCustomDefault()
          self.structWithCustomDefault.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -31:
        if ftype == TType.I32:
          self.i32WithCustomDefault = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == -30:
        if ftype == TType.MAP:
          self.mapMap = {}
          (_ktype614, _vtype615, _size613 ) = iprot.readMapBegin() 
          if _size613 >= 0:
            for _i617 in range(_size613):
              _key618 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val619 = {}
              (_ktype621, _vtype622, _size620 ) = iprot.readMapBegin() 
              if _size620 >= 0:
                for _i624 in range(_size620):
                  _key625 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val626 = iprot.readI32()
                  _val619[_key625] = _val626
              else: 
                while iprot.peekMap():
                  _key627 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val628 = iprot.readI32()
                  _val619[_key627] = _val628
              iprot.readMapEnd()
              self.mapMap[_key618] = _val619
          else: 
            while iprot.peekMap():
              _key629 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val630 = {}
              (_ktype632, _vtype633, _size631 ) = iprot.readMapBegin() 
              if _size631 >= 0:
                for _i635 in range(_size631):
                  _key636 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val637 = iprot.readI32()
                  _val630[_key636] = _val637
              else: 
                while iprot.peekMap():
                  _key638 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val639 = iprot.readI32()
                  _val630[_key638] = _val639
              iprot.readMapEnd()
              self.mapMap[_key629] = _val630
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == -29:
        if ftype == TType.LIST:
          self.listMap = []
          (_etype643, _size640) = iprot.readListBegin()
          if _size640 >= 0:
            for _i644 in range(_size640):
              _elem645 = {}
              (_ktype647, _vtype648, _size646 ) = iprot.readMapBegin() 
              if _size646 >= 0:
                for _i650 in range(_size646):
                  _key651 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val652 = iprot.readI32()
                  _elem645[_key651] = _val652
              else: 
                while iprot.peekMap():
                  _key653 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val654 = iprot.readI32()
                  _elem645[_key653] = _val654
              iprot.readMapEnd()
              self.listMap.append(_elem645)
          else: 
            while iprot.peekList():
              _elem655 = {}
              (_ktype657, _vtype658, _size656 ) = iprot.readMapBegin() 
              if _size656 >= 0:
                for _i660 in range(_size656):
                  _key661 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val662 = iprot.readI32()
                  _elem655[_key661] = _val662
              else: 
                while iprot.peekMap():
                  _key663 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
                  _val664 = iprot.readI32()
                  _elem655[_key663] = _val664
              iprot.readMapEnd()
              self.listMap.append(_elem655)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == -28:
        if ftype == TType.MAP:
          self.optMapVal = {}
          (_ktype666, _vtype667, _size665 ) = iprot.readMapBegin() 
          if _size665 >= 0:
            for _i669 in range(_size665):
              _key670 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val671 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.optMapVal[_key670] = _val671
          else: 
            while iprot.peekMap():
              _key672 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val673 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.optMapVal[_key672] = _val673
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == -27:
        if ftype == TType.SET:
          self.optSetVal = set()
          (_etype677, _size674) = iprot.readSetBegin()
          if _size674 >= 0:
            for _i678 in range(_size674):
              _elem679 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.optSetVal.add(_elem679)
          else: 
            while iprot.peekSet():
              _elem680 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              self.optSetVal.add(_elem680)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == -26:
        if ftype == TType.LIST:
          self.optListVal = []
          (_etype684, _size681) = iprot.readListBegin()
          if _size681 >= 0:
            for _i685 in range(_size681):
              _elem686 = iprot.readI16()
              self.optListVal.append(_elem686)
          else: 
            while iprot.peekList():
              _elem687 = iprot.readI16()
              self.optListVal.append(_elem687)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == -25:
        if ftype == TType.STRUCT:
          self.optLateStructVal = LateDefStruct()
          self.optLateStructVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -24:
        if ftype == TType.STRUCT:
          self.optStructVal = MyData()
          self.optStructVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -23:
        if ftype == TType.I32:
          self.optEnumVal = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == -22:
        if ftype == TType.STRING:
          self.optBinaryVal = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == -21:
        if ftype == TType.STRING:
          self.optStringVal = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == -20:
        if ftype == TType.DOUBLE:
          self.optDoubleVal = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == -19:
        if ftype == TType.FLOAT:
          self.optFloatVal = iprot.readFloat()
        else:
          iprot.skip(ftype)
      elif fid == -18:
        if ftype == TType.I64:
          self.optI64Val = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == -17:
        if ftype == TType.I32:
          self.optI32Val = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == -16:
        if ftype == TType.I16:
          self.optI16Val = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == -15:
        if ftype == TType.BYTE:
          self.optByteVal = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == -14:
        if ftype == TType.BOOL:
          self.optBoolVal = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == -13:
        if ftype == TType.STRUCT:
          self.lateStructVal = LateDefStruct()
          self.lateStructVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -12:
        if ftype == TType.STRUCT:
          self.unionVal = MyUnion()
          self.unionVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -11:
        if ftype == TType.STRUCT:
          self.structVal = MyData()
          self.structVal.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == -10:
        if ftype == TType.I32:
          self.enumVal = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == -9:
        if ftype == TType.STRING:
          self.binaryVal = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == -8:
        if ftype == TType.STRING:
          self.stringVal = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == -7:
        if ftype == TType.DOUBLE:
          self.doubleVal = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == -6:
        if ftype == TType.FLOAT:
          self.floatVal = iprot.readFloat()
        else:
          iprot.skip(ftype)
      elif fid == -5:
        if ftype == TType.I64:
          self.i64Val = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == -4:
        if ftype == TType.I32:
          self.i32Val = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == -3:
        if ftype == TType.I16:
          self.i16Val = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == -2:
        if ftype == TType.BYTE:
          self.byteVal = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == -1:
        if ftype == TType.BOOL:
          self.boolVal = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.structWithFieldCustomDefault = MyData()
          self.structWithFieldCustomDefault.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('MyStructEnsureStruct')
    if self.structWithCustomDefault != None:
      oprot.writeFieldBegin('structWithCustomDefault', TType.STRUCT, -32)
      self.structWithCustomDefault.write(oprot)
      oprot.writeFieldEnd()
    if self.i32WithCustomDefault != None:
      oprot.writeFieldBegin('i32WithCustomDefault', TType.I32, -31)
      oprot.writeI32(self.i32WithCustomDefault)
      oprot.writeFieldEnd()
    if self.mapMap != None:
      oprot.writeFieldBegin('mapMap', TType.MAP, -30)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.mapMap))
      for kiter688,viter689 in self.mapMap.items():
        oprot.writeString(kiter688.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter688, bytes) else oprot.writeString(kiter688)
        oprot.writeMapBegin(TType.STRING, TType.I32, len(viter689))
        for kiter690,viter691 in viter689.items():
          oprot.writeString(kiter690.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter690, bytes) else oprot.writeString(kiter690)
          oprot.writeI32(viter691)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.listMap != None:
      oprot.writeFieldBegin('listMap', TType.LIST, -29)
      oprot.writeListBegin(TType.MAP, len(self.listMap))
      for iter692 in self.listMap:
        oprot.writeMapBegin(TType.STRING, TType.I32, len(iter692))
        for kiter693,viter694 in iter692.items():
          oprot.writeString(kiter693.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter693, bytes) else oprot.writeString(kiter693)
          oprot.writeI32(viter694)
        oprot.writeMapEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.optMapVal != None:
      oprot.writeFieldBegin('optMapVal', TType.MAP, -28)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.optMapVal))
      for kiter695,viter696 in self.optMapVal.items():
        oprot.writeString(kiter695.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter695, bytes) else oprot.writeString(kiter695)
        oprot.writeString(viter696.encode('utf-8')) if UTF8STRINGS and not isinstance(viter696, bytes) else oprot.writeString(viter696)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.optSetVal != None:
      oprot.writeFieldBegin('optSetVal', TType.SET, -27)
      oprot.writeSetBegin(TType.STRING, len(self.optSetVal))
      for iter697 in self.optSetVal:
        oprot.writeString(iter697.encode('utf-8')) if UTF8STRINGS and not isinstance(iter697, bytes) else oprot.writeString(iter697)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.optListVal != None:
      oprot.writeFieldBegin('optListVal', TType.LIST, -26)
      oprot.writeListBegin(TType.I16, len(self.optListVal))
      for iter698 in self.optListVal:
        oprot.writeI16(iter698)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.optLateStructVal != None:
      oprot.writeFieldBegin('optLateStructVal', TType.STRUCT, -25)
      self.optLateStructVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optStructVal != None:
      oprot.writeFieldBegin('optStructVal', TType.STRUCT, -24)
      self.optStructVal.write(oprot)
      oprot.writeFieldEnd()
    if self.optEnumVal != None:
      oprot.writeFieldBegin('optEnumVal', TType.I32, -23)
      oprot.writeI32(self.optEnumVal)
      oprot.writeFieldEnd()
    if self.optBinaryVal != None:
      oprot.writeFieldBegin('optBinaryVal', TType.STRING, -22)
      oprot.writeString(self.optBinaryVal)
      oprot.writeFieldEnd()
    if self.optStringVal != None:
      oprot.writeFieldBegin('optStringVal', TType.STRING, -21)
      oprot.writeString(self.optStringVal.encode('utf-8')) if UTF8STRINGS and not isinstance(self.optStringVal, bytes) else oprot.writeString(self.optStringVal)
      oprot.writeFieldEnd()
    if self.optDoubleVal != None:
      oprot.writeFieldBegin('optDoubleVal', TType.DOUBLE, -20)
      oprot.writeDouble(self.optDoubleVal)
      oprot.writeFieldEnd()
    if self.optFloatVal != None:
      oprot.writeFieldBegin('optFloatVal', TType.FLOAT, -19)
      oprot.writeFloat(self.optFloatVal)
      oprot.writeFieldEnd()
    if self.optI64Val != None:
      oprot.writeFieldBegin('optI64Val', TType.I64, -18)
      oprot.writeI64(self.optI64Val)
      oprot.writeFieldEnd()
    if self.optI32Val != None:
      oprot.writeFieldBegin('optI32Val', TType.I32, -17)
      oprot.writeI32(self.optI32Val)
      oprot.writeFieldEnd()
    if self.optI16Val != None:
      oprot.writeFieldBegin('optI16Val', TType.I16, -16)
      oprot.writeI16(self.optI16Val)
      oprot.writeFieldEnd()
    if self.optByteVal != None:
      oprot.writeFieldBegin('optByteVal', TType.BYTE, -15)
      oprot.writeByte(self.optByteVal)
      oprot.writeFieldEnd()
    if self.optBoolVal != None:
      oprot.writeFieldBegin('optBoolVal', TType.BOOL, -14)
      oprot.writeBool(self.optBoolVal)
      oprot.writeFieldEnd()
    if self.lateStructVal != None:
      oprot.writeFieldBegin('lateStructVal', TType.STRUCT, -13)
      self.lateStructVal.write(oprot)
      oprot.writeFieldEnd()
    if self.unionVal != None:
      oprot.writeFieldBegin('unionVal', TType.STRUCT, -12)
      self.unionVal.write(oprot)
      oprot.writeFieldEnd()
    if self.structVal != None:
      oprot.writeFieldBegin('structVal', TType.STRUCT, -11)
      self.structVal.write(oprot)
      oprot.writeFieldEnd()
    if self.enumVal != None:
      oprot.writeFieldBegin('enumVal', TType.I32, -10)
      oprot.writeI32(self.enumVal)
      oprot.writeFieldEnd()
    if self.binaryVal != None:
      oprot.writeFieldBegin('binaryVal', TType.STRING, -9)
      oprot.writeString(self.binaryVal)
      oprot.writeFieldEnd()
    if self.stringVal != None:
      oprot.writeFieldBegin('stringVal', TType.STRING, -8)
      oprot.writeString(self.stringVal.encode('utf-8')) if UTF8STRINGS and not isinstance(self.stringVal, bytes) else oprot.writeString(self.stringVal)
      oprot.writeFieldEnd()
    if self.doubleVal != None:
      oprot.writeFieldBegin('doubleVal', TType.DOUBLE, -7)
      oprot.writeDouble(self.doubleVal)
      oprot.writeFieldEnd()
    if self.floatVal != None:
      oprot.writeFieldBegin('floatVal', TType.FLOAT, -6)
      oprot.writeFloat(self.floatVal)
      oprot.writeFieldEnd()
    if self.i64Val != None:
      oprot.writeFieldBegin('i64Val', TType.I64, -5)
      oprot.writeI64(self.i64Val)
      oprot.writeFieldEnd()
    if self.i32Val != None:
      oprot.writeFieldBegin('i32Val', TType.I32, -4)
      oprot.writeI32(self.i32Val)
      oprot.writeFieldEnd()
    if self.i16Val != None:
      oprot.writeFieldBegin('i16Val', TType.I16, -3)
      oprot.writeI16(self.i16Val)
      oprot.writeFieldEnd()
    if self.byteVal != None:
      oprot.writeFieldBegin('byteVal', TType.BYTE, -2)
      oprot.writeByte(self.byteVal)
      oprot.writeFieldEnd()
    if self.boolVal != None:
      oprot.writeFieldBegin('boolVal', TType.BOOL, -1)
      oprot.writeBool(self.boolVal)
      oprot.writeFieldEnd()
    if self.structWithFieldCustomDefault != None:
      oprot.writeFieldBegin('structWithFieldCustomDefault', TType.STRUCT, 1)
      self.structWithFieldCustomDefault.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'structWithCustomDefault' in json_obj and json_obj['structWithCustomDefault'] is not None:
      self.structWithCustomDefault = MyDataWithCustomDefault()
      self.structWithCustomDefault.readFromJson(json_obj['structWithCustomDefault'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'i32WithCustomDefault' in json_obj and json_obj['i32WithCustomDefault'] is not None:
      self.i32WithCustomDefault = json_obj['i32WithCustomDefault']
      if self.i32WithCustomDefault > 0x7fffffff or self.i32WithCustomDefault < -0x80000000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
    if 'mapMap' in json_obj and json_obj['mapMap'] is not None:
      self.mapMap = dict_cls()
      for _tmp_k699, _tmp_v700 in json_obj['mapMap'].items():
        _tmp_kp701 = _tmp_k699
        _map702 = dict_cls()
        for _tmp_k703, _tmp_v704 in _tmp_v700.items():
          _tmp_kp705 = _tmp_k703
          if _tmp_v704 > 0x7fffffff or _tmp_v704 < -0x80000000:
            raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
          _map702[_tmp_kp705] = _tmp_v704
        self.mapMap[_tmp_kp701] = _map702
    if 'listMap' in json_obj and json_obj['listMap'] is not None:
      self.listMap = []
      for _tmp_e706 in json_obj['listMap']:
        _map707 = dict_cls()
        for _tmp_k708, _tmp_v709 in _tmp_e706.items():
          _tmp_kp710 = _tmp_k708
          if _tmp_v709 > 0x7fffffff or _tmp_v709 < -0x80000000:
            raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
          _map707[_tmp_kp710] = _tmp_v709
        self.listMap.append(_map707)
    if 'optMapVal' in json_obj and json_obj['optMapVal'] is not None:
      self.optMapVal = dict_cls()
      for _tmp_k711, _tmp_v712 in json_obj['optMapVal'].items():
        _tmp_kp713 = _tmp_k711
        self.optMapVal[_tmp_kp713] = _tmp_v712
    if 'optSetVal' in json_obj and json_obj['optSetVal'] is not None:
      self.optSetVal = set_cls()
      for _tmp_e714 in json_obj['optSetVal']:
        self.optSetVal.add(_tmp_e714)
    if 'optListVal' in json_obj and json_obj['optListVal'] is not None:
      self.optListVal = []
      for _tmp_e715 in json_obj['optListVal']:
        if _tmp_e715 > 0x7fff or _tmp_e715 < -0x8000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.optListVal.append(_tmp_e715)
    if 'optLateStructVal' in json_obj and json_obj['optLateStructVal'] is not None:
      self.optLateStructVal = LateDefStruct()
      self.optLateStructVal.readFromJson(json_obj['optLateStructVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optStructVal' in json_obj and json_obj['optStructVal'] is not None:
      self.optStructVal = MyData()
      self.optStructVal.readFromJson(json_obj['optStructVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'optEnumVal' in json_obj and json_obj['optEnumVal'] is not None:
      self.optEnumVal = json_obj['optEnumVal']
      if not self.optEnumVal in MyEnum._VALUES_TO_NAMES:
        msg = 'Integer value ''%s'' is not a recognized value of enum type MyEnum' % self.optEnumVal
        if relax_enum_validation:
            warnings.warn(msg)
        else:
            raise TProtocolException(TProtocolException.INVALID_DATA, msg)
    if 'optBinaryVal' in json_obj and json_obj['optBinaryVal'] is not None:
      self.optBinaryVal = json_obj['optBinaryVal']
    if 'optStringVal' in json_obj and json_obj['optStringVal'] is not None:
      self.optStringVal = json_obj['optStringVal']
    if 'optDoubleVal' in json_obj and json_obj['optDoubleVal'] is not None:
      self.optDoubleVal = float(json_obj['optDoubleVal'])
    if 'optFloatVal' in json_obj and json_obj['optFloatVal'] is not None:
      self.optFloatVal = float(json_obj['optFloatVal'])
    if 'optI64Val' in json_obj and json_obj['optI64Val'] is not None:
      self.optI64Val = long(json_obj['optI64Val'])
    if 'optI32Val' in json_obj and json_obj['optI32Val'] is not None:
      self.optI32Val = json_obj['optI32Val']
      if self.optI32Val > 0x7fffffff or self.optI32Val < -0x80000000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
    if 'optI16Val' in json_obj and json_obj['optI16Val'] is not None:
      self.optI16Val = json_obj['optI16Val']
      if self.optI16Val > 0x7fff or self.optI16Val < -0x8000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
    if 'optByteVal' in json_obj and json_obj['optByteVal'] is not None:
      self.optByteVal = json_obj['optByteVal']
      if self.optByteVal > 0x7f or self.optByteVal < -0x80:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
    if 'optBoolVal' in json_obj and json_obj['optBoolVal'] is not None:
      self.optBoolVal = json_obj['optBoolVal']
    if 'lateStructVal' in json_obj and json_obj['lateStructVal'] is not None:
      self.lateStructVal = LateDefStruct()
      self.lateStructVal.readFromJson(json_obj['lateStructVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'unionVal' in json_obj and json_obj['unionVal'] is not None:
      self.unionVal = MyUnion()
      self.unionVal.readFromJson(json_obj['unionVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'structVal' in json_obj and json_obj['structVal'] is not None:
      self.structVal = MyData()
      self.structVal.readFromJson(json_obj['structVal'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'enumVal' in json_obj and json_obj['enumVal'] is not None:
      self.enumVal = json_obj['enumVal']
      if not self.enumVal in MyEnum._VALUES_TO_NAMES:
        msg = 'Integer value ''%s'' is not a recognized value of enum type MyEnum' % self.enumVal
        if relax_enum_validation:
            warnings.warn(msg)
        else:
            raise TProtocolException(TProtocolException.INVALID_DATA, msg)
    if 'binaryVal' in json_obj and json_obj['binaryVal'] is not None:
      self.binaryVal = json_obj['binaryVal']
    if 'stringVal' in json_obj and json_obj['stringVal'] is not None:
      self.stringVal = json_obj['stringVal']
    if 'doubleVal' in json_obj and json_obj['doubleVal'] is not None:
      self.doubleVal = float(json_obj['doubleVal'])
    if 'floatVal' in json_obj and json_obj['floatVal'] is not None:
      self.floatVal = float(json_obj['floatVal'])
    if 'i64Val' in json_obj and json_obj['i64Val'] is not None:
      self.i64Val = long(json_obj['i64Val'])
    if 'i32Val' in json_obj and json_obj['i32Val'] is not None:
      self.i32Val = json_obj['i32Val']
      if self.i32Val > 0x7fffffff or self.i32Val < -0x80000000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
    if 'i16Val' in json_obj and json_obj['i16Val'] is not None:
      self.i16Val = json_obj['i16Val']
      if self.i16Val > 0x7fff or self.i16Val < -0x8000:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
    if 'byteVal' in json_obj and json_obj['byteVal'] is not None:
      self.byteVal = json_obj['byteVal']
      if self.byteVal > 0x7f or self.byteVal < -0x80:
        raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
    if 'boolVal' in json_obj and json_obj['boolVal'] is not None:
      self.boolVal = json_obj['boolVal']
    if 'structWithFieldCustomDefault' in json_obj and json_obj['structWithFieldCustomDefault'] is not None:
      self.structWithFieldCustomDefault = MyData()
      self.structWithFieldCustomDefault.readFromJson(json_obj['structWithFieldCustomDefault'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.structWithCustomDefault is not None:
      value = pprint.pformat(self.structWithCustomDefault, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    structWithCustomDefault=%s' % (value))
    if self.i32WithCustomDefault is not None:
      value = pprint.pformat(self.i32WithCustomDefault, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    i32WithCustomDefault=%s' % (value))
    if self.mapMap is not None:
      value = pprint.pformat(self.mapMap, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    mapMap=%s' % (value))
    if self.listMap is not None:
      value = pprint.pformat(self.listMap, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    listMap=%s' % (value))
    if self.optMapVal is not None:
      value = pprint.pformat(self.optMapVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optMapVal=%s' % (value))
    if self.optSetVal is not None:
      value = pprint.pformat(self.optSetVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optSetVal=%s' % (value))
    if self.optListVal is not None:
      value = pprint.pformat(self.optListVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optListVal=%s' % (value))
    if self.optLateStructVal is not None:
      value = pprint.pformat(self.optLateStructVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optLateStructVal=%s' % (value))
    if self.optStructVal is not None:
      value = pprint.pformat(self.optStructVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optStructVal=%s' % (value))
    if self.optEnumVal is not None:
      value = pprint.pformat(self.optEnumVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optEnumVal=%s' % (value))
    if self.optBinaryVal is not None:
      value = pprint.pformat(self.optBinaryVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optBinaryVal=%s' % (value))
    if self.optStringVal is not None:
      value = pprint.pformat(self.optStringVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optStringVal=%s' % (value))
    if self.optDoubleVal is not None:
      value = pprint.pformat(self.optDoubleVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optDoubleVal=%s' % (value))
    if self.optFloatVal is not None:
      value = pprint.pformat(self.optFloatVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optFloatVal=%s' % (value))
    if self.optI64Val is not None:
      value = pprint.pformat(self.optI64Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optI64Val=%s' % (value))
    if self.optI32Val is not None:
      value = pprint.pformat(self.optI32Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optI32Val=%s' % (value))
    if self.optI16Val is not None:
      value = pprint.pformat(self.optI16Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optI16Val=%s' % (value))
    if self.optByteVal is not None:
      value = pprint.pformat(self.optByteVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optByteVal=%s' % (value))
    if self.optBoolVal is not None:
      value = pprint.pformat(self.optBoolVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    optBoolVal=%s' % (value))
    if self.lateStructVal is not None:
      value = pprint.pformat(self.lateStructVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    lateStructVal=%s' % (value))
    if self.unionVal is not None:
      value = pprint.pformat(self.unionVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    unionVal=%s' % (value))
    if self.structVal is not None:
      value = pprint.pformat(self.structVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    structVal=%s' % (value))
    if self.enumVal is not None:
      value = pprint.pformat(self.enumVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    enumVal=%s' % (value))
    if self.binaryVal is not None:
      value = pprint.pformat(self.binaryVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    binaryVal=%s' % (value))
    if self.stringVal is not None:
      value = pprint.pformat(self.stringVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    stringVal=%s' % (value))
    if self.doubleVal is not None:
      value = pprint.pformat(self.doubleVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    doubleVal=%s' % (value))
    if self.floatVal is not None:
      value = pprint.pformat(self.floatVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    floatVal=%s' % (value))
    if self.i64Val is not None:
      value = pprint.pformat(self.i64Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    i64Val=%s' % (value))
    if self.i32Val is not None:
      value = pprint.pformat(self.i32Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    i32Val=%s' % (value))
    if self.i16Val is not None:
      value = pprint.pformat(self.i16Val, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    i16Val=%s' % (value))
    if self.byteVal is not None:
      value = pprint.pformat(self.byteVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    byteVal=%s' % (value))
    if self.boolVal is not None:
      value = pprint.pformat(self.boolVal, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    boolVal=%s' % (value))
    if self.structWithFieldCustomDefault is not None:
      value = pprint.pformat(self.structWithFieldCustomDefault, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    structWithFieldCustomDefault=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'structWithCustomDefault',
      'i32WithCustomDefault',
      'mapMap',
      'listMap',
      'optMapVal',
      'optSetVal',
      'optListVal',
      'optLateStructVal',
      'optStructVal',
      'optEnumVal',
      'optBinaryVal',
      'optStringVal',
      'optDoubleVal',
      'optFloatVal',
      'optI64Val',
      'optI32Val',
      'optI16Val',
      'optByteVal',
      'optBoolVal',
      'lateStructVal',
      'unionVal',
      'structVal',
      'enumVal',
      'binaryVal',
      'stringVal',
      'doubleVal',
      'floatVal',
      'i64Val',
      'i32Val',
      'i16Val',
      'byteVal',
      'boolVal',
      'structWithFieldCustomDefault',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.MyStructEnsureStruct, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.MyStructEnsureStruct, self)

  def _to_py_deprecated(self):
    return self

class LateDefStructPatch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
   - patchPrior: Patches any previously set values. Applies second.
   - ensure: Initialize fields, using the given defaults. Applies third.
   - patch: Patches any set value, including newly set values. Applies last.
   - remove: Removes entries, if present. Applies third.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.assign = LateDefStruct()
          self.assign.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.patchPrior = LateDefStructFieldPatch()
          self.patchPrior.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.ensure = LateDefStructEnsureStruct()
          self.ensure.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.patch = LateDefStructFieldPatch()
          self.patch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.remove = []
          (_etype719, _size716) = iprot.readListBegin()
          if _size716 >= 0:
            for _i720 in range(_size716):
              _elem721 = iprot.readI16()
              self.remove.append(_elem721)
          else: 
            while iprot.peekList():
              _elem722 = iprot.readI16()
              self.remove.append(_elem722)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('LateDefStructPatch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.STRUCT, 1)
      self.assign.write(oprot)
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    if self.patchPrior != None:
      oprot.writeFieldBegin('patchPrior', TType.STRUCT, 3)
      self.patchPrior.write(oprot)
      oprot.writeFieldEnd()
    if self.ensure != None:
      oprot.writeFieldBegin('ensure', TType.STRUCT, 5)
      self.ensure.write(oprot)
      oprot.writeFieldEnd()
    if self.patch != None:
      oprot.writeFieldBegin('patch', TType.STRUCT, 6)
      self.patch.write(oprot)
      oprot.writeFieldEnd()
    if self.remove != None:
      oprot.writeFieldBegin('remove', TType.LIST, 7)
      oprot.writeListBegin(TType.I16, len(self.remove))
      for iter723 in self.remove:
        oprot.writeI16(iter723)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = LateDefStruct()
      self.assign.readFromJson(json_obj['assign'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']
    if 'patchPrior' in json_obj and json_obj['patchPrior'] is not None:
      self.patchPrior = LateDefStructFieldPatch()
      self.patchPrior.readFromJson(json_obj['patchPrior'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'ensure' in json_obj and json_obj['ensure'] is not None:
      self.ensure = LateDefStructEnsureStruct()
      self.ensure.readFromJson(json_obj['ensure'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'patch' in json_obj and json_obj['patch'] is not None:
      self.patch = LateDefStructFieldPatch()
      self.patch.readFromJson(json_obj['patch'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'remove' in json_obj and json_obj['remove'] is not None:
      self.remove = []
      for _tmp_e724 in json_obj['remove']:
        if _tmp_e724 > 0x7fff or _tmp_e724 < -0x8000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.remove.append(_tmp_e724)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    if self.patchPrior is not None:
      value = pprint.pformat(self.patchPrior, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patchPrior=%s' % (value))
    if self.ensure is not None:
      value = pprint.pformat(self.ensure, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    ensure=%s' % (value))
    if self.patch is not None:
      value = pprint.pformat(self.patch, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patch=%s' % (value))
    if self.remove is not None:
      value = pprint.pformat(self.remove, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    remove=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
      'patchPrior',
      'ensure',
      'patch',
      'remove',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.LateDefStructPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.LateDefStructPatch, self)

  def _to_py_deprecated(self):
    return self

class LateDefStructFieldPatch:

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('LateDefStructFieldPatch')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.LateDefStructFieldPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.LateDefStructFieldPatch, self)

  def _to_py_deprecated(self):
    return self

class LateDefStructEnsureStruct:

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('LateDefStructEnsureStruct')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.LateDefStructEnsureStruct, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.LateDefStructEnsureStruct, self)

  def _to_py_deprecated(self):
    return self

class RecursivePatch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
   - patchPrior: Patches any previously set values. Applies second.
   - ensure: Initialize fields, using the given defaults. Applies third.
   - patch: Patches any set value, including newly set values. Applies last.
   - remove: Removes entries, if present. Applies third.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.assign = Recursive()
          self.assign.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.patchPrior = RecursiveFieldPatch()
          self.patchPrior.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.ensure = RecursiveEnsureStruct()
          self.ensure.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.patch = RecursiveFieldPatch()
          self.patch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.remove = []
          (_etype728, _size725) = iprot.readListBegin()
          if _size725 >= 0:
            for _i729 in range(_size725):
              _elem730 = iprot.readI16()
              self.remove.append(_elem730)
          else: 
            while iprot.peekList():
              _elem731 = iprot.readI16()
              self.remove.append(_elem731)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('RecursivePatch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.STRUCT, 1)
      self.assign.write(oprot)
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    if self.patchPrior != None:
      oprot.writeFieldBegin('patchPrior', TType.STRUCT, 3)
      self.patchPrior.write(oprot)
      oprot.writeFieldEnd()
    if self.ensure != None:
      oprot.writeFieldBegin('ensure', TType.STRUCT, 5)
      self.ensure.write(oprot)
      oprot.writeFieldEnd()
    if self.patch != None:
      oprot.writeFieldBegin('patch', TType.STRUCT, 6)
      self.patch.write(oprot)
      oprot.writeFieldEnd()
    if self.remove != None:
      oprot.writeFieldBegin('remove', TType.LIST, 7)
      oprot.writeListBegin(TType.I16, len(self.remove))
      for iter732 in self.remove:
        oprot.writeI16(iter732)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = Recursive()
      self.assign.readFromJson(json_obj['assign'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']
    if 'patchPrior' in json_obj and json_obj['patchPrior'] is not None:
      self.patchPrior = RecursiveFieldPatch()
      self.patchPrior.readFromJson(json_obj['patchPrior'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'ensure' in json_obj and json_obj['ensure'] is not None:
      self.ensure = RecursiveEnsureStruct()
      self.ensure.readFromJson(json_obj['ensure'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'patch' in json_obj and json_obj['patch'] is not None:
      self.patch = RecursiveFieldPatch()
      self.patch.readFromJson(json_obj['patch'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'remove' in json_obj and json_obj['remove'] is not None:
      self.remove = []
      for _tmp_e733 in json_obj['remove']:
        if _tmp_e733 > 0x7fff or _tmp_e733 < -0x8000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.remove.append(_tmp_e733)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    if self.patchPrior is not None:
      value = pprint.pformat(self.patchPrior, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patchPrior=%s' % (value))
    if self.ensure is not None:
      value = pprint.pformat(self.ensure, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    ensure=%s' % (value))
    if self.patch is not None:
      value = pprint.pformat(self.patch, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patch=%s' % (value))
    if self.remove is not None:
      value = pprint.pformat(self.remove, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    remove=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
      'patchPrior',
      'ensure',
      'patch',
      'remove',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.RecursivePatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.RecursivePatch, self)

  def _to_py_deprecated(self):
    return self

class RecursiveField1Patch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.assign = {}
          (_ktype735, _vtype736, _size734 ) = iprot.readMapBegin() 
          if _size734 >= 0:
            for _i738 in range(_size734):
              _key739 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val740 = Recursive()
              _val740.read(iprot)
              self.assign[_key739] = _val740
          else: 
            while iprot.peekMap():
              _key741 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val742 = Recursive()
              _val742.read(iprot)
              self.assign[_key741] = _val742
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('RecursiveField1Patch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.assign))
      for kiter743,viter744 in self.assign.items():
        oprot.writeString(kiter743.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter743, bytes) else oprot.writeString(kiter743)
        viter744.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = dict_cls()
      for _tmp_k745, _tmp_v746 in json_obj['assign'].items():
        _tmp_kp747 = _tmp_k745
        _struct748 = Recursive()
        _struct748.readFromJson(_tmp_v746, is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
        self.assign[_tmp_kp747] = _struct748
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.RecursiveField1Patch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.RecursiveField1Patch, self)

  def _to_py_deprecated(self):
    return self

class RecursiveFieldPatch:
  r"""
  Attributes:
   - nodes
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.STRUCT:
          self.nodes = RecursiveField1Patch()
          self.nodes.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('RecursiveFieldPatch')
    if self.nodes != None:
      oprot.writeFieldBegin('nodes', TType.STRUCT, -1)
      self.nodes.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'nodes' in json_obj and json_obj['nodes'] is not None:
      self.nodes = RecursiveField1Patch()
      self.nodes.readFromJson(json_obj['nodes'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.nodes is not None:
      value = pprint.pformat(self.nodes, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    nodes=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'nodes',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.RecursiveFieldPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.RecursiveFieldPatch, self)

  def _to_py_deprecated(self):
    return self

class RecursiveEnsureStruct:
  r"""
  Attributes:
   - nodes
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.MAP:
          self.nodes = {}
          (_ktype750, _vtype751, _size749 ) = iprot.readMapBegin() 
          if _size749 >= 0:
            for _i753 in range(_size749):
              _key754 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val755 = Recursive()
              _val755.read(iprot)
              self.nodes[_key754] = _val755
          else: 
            while iprot.peekMap():
              _key756 = iprot.readString().decode('utf-8') if UTF8STRINGS else iprot.readString()
              _val757 = Recursive()
              _val757.read(iprot)
              self.nodes[_key756] = _val757
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('RecursiveEnsureStruct')
    if self.nodes != None:
      oprot.writeFieldBegin('nodes', TType.MAP, -1)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.nodes))
      for kiter758,viter759 in self.nodes.items():
        oprot.writeString(kiter758.encode('utf-8')) if UTF8STRINGS and not isinstance(kiter758, bytes) else oprot.writeString(kiter758)
        viter759.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'nodes' in json_obj and json_obj['nodes'] is not None:
      self.nodes = dict_cls()
      for _tmp_k760, _tmp_v761 in json_obj['nodes'].items():
        _tmp_kp762 = _tmp_k760
        _struct763 = Recursive()
        _struct763.readFromJson(_tmp_v761, is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
        self.nodes[_tmp_kp762] = _struct763

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.nodes is not None:
      value = pprint.pformat(self.nodes, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    nodes=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'nodes',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.RecursiveEnsureStruct, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.RecursiveEnsureStruct, self)

  def _to_py_deprecated(self):
    return self

class BarPatch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
   - patchPrior: Patches any previously set values. Applies second.
   - ensure: Initialize fields, using the given defaults. Applies third.
   - patch: Patches any set value, including newly set values. Applies last.
   - remove: Removes entries, if present. Applies third.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.assign = Bar()
          self.assign.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.patchPrior = BarFieldPatch()
          self.patchPrior.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.ensure = BarEnsureStruct()
          self.ensure.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.patch = BarFieldPatch()
          self.patch.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.remove = []
          (_etype767, _size764) = iprot.readListBegin()
          if _size764 >= 0:
            for _i768 in range(_size764):
              _elem769 = iprot.readI16()
              self.remove.append(_elem769)
          else: 
            while iprot.peekList():
              _elem770 = iprot.readI16()
              self.remove.append(_elem770)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('BarPatch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.STRUCT, 1)
      self.assign.write(oprot)
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    if self.patchPrior != None:
      oprot.writeFieldBegin('patchPrior', TType.STRUCT, 3)
      self.patchPrior.write(oprot)
      oprot.writeFieldEnd()
    if self.ensure != None:
      oprot.writeFieldBegin('ensure', TType.STRUCT, 5)
      self.ensure.write(oprot)
      oprot.writeFieldEnd()
    if self.patch != None:
      oprot.writeFieldBegin('patch', TType.STRUCT, 6)
      self.patch.write(oprot)
      oprot.writeFieldEnd()
    if self.remove != None:
      oprot.writeFieldBegin('remove', TType.LIST, 7)
      oprot.writeListBegin(TType.I16, len(self.remove))
      for iter771 in self.remove:
        oprot.writeI16(iter771)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = Bar()
      self.assign.readFromJson(json_obj['assign'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']
    if 'patchPrior' in json_obj and json_obj['patchPrior'] is not None:
      self.patchPrior = BarFieldPatch()
      self.patchPrior.readFromJson(json_obj['patchPrior'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'ensure' in json_obj and json_obj['ensure'] is not None:
      self.ensure = BarEnsureStruct()
      self.ensure.readFromJson(json_obj['ensure'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'patch' in json_obj and json_obj['patch'] is not None:
      self.patch = BarFieldPatch()
      self.patch.readFromJson(json_obj['patch'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'remove' in json_obj and json_obj['remove'] is not None:
      self.remove = []
      for _tmp_e772 in json_obj['remove']:
        if _tmp_e772 > 0x7fff or _tmp_e772 < -0x8000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.remove.append(_tmp_e772)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    if self.patchPrior is not None:
      value = pprint.pformat(self.patchPrior, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patchPrior=%s' % (value))
    if self.ensure is not None:
      value = pprint.pformat(self.ensure, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    ensure=%s' % (value))
    if self.patch is not None:
      value = pprint.pformat(self.patch, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    patch=%s' % (value))
    if self.remove is not None:
      value = pprint.pformat(self.remove, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    remove=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
      'patchPrior',
      'ensure',
      'patch',
      'remove',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.BarPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.BarPatch, self)

  def _to_py_deprecated(self):
    return self

class BarFieldPatch:
  r"""
  Attributes:
   - loop
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.STRUCT:
          self.loop = LoopPatch()
          self.loop.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('BarFieldPatch')
    if self.loop != None:
      oprot.writeFieldBegin('loop', TType.STRUCT, -1)
      self.loop.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'loop' in json_obj and json_obj['loop'] is not None:
      self.loop = LoopPatch()
      self.loop.readFromJson(json_obj['loop'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.loop is not None:
      value = pprint.pformat(self.loop, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    loop=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'loop',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.BarFieldPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.BarFieldPatch, self)

  def _to_py_deprecated(self):
    return self

class BarEnsureStruct:
  r"""
  Attributes:
   - loop
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.STRUCT:
          self.loop = Loop()
          self.loop.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('BarEnsureStruct')
    if self.loop != None:
      oprot.writeFieldBegin('loop', TType.STRUCT, -1)
      self.loop.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'loop' in json_obj and json_obj['loop'] is not None:
      self.loop = Loop()
      self.loop.readFromJson(json_obj['loop'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.loop is not None:
      value = pprint.pformat(self.loop, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    loop=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'loop',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.BarEnsureStruct, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.BarEnsureStruct, self)

  def _to_py_deprecated(self):
    return self

class LoopPatch:
  r"""
  Attributes:
   - assign: Assigns to a (set) value.
  
  If set, all other operations are ignored.
  
  Note: Optional and union fields must be set before assigned.
  
   - clear: Clears a value. Applies first.
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.assign = Loop()
          self.assign.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.clear = iprot.readBool()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('LoopPatch')
    if self.assign != None:
      oprot.writeFieldBegin('assign', TType.STRUCT, 1)
      self.assign.write(oprot)
      oprot.writeFieldEnd()
    if self.clear != None:
      oprot.writeFieldBegin('clear', TType.BOOL, 2)
      oprot.writeBool(self.clear)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'assign' in json_obj and json_obj['assign'] is not None:
      self.assign = Loop()
      self.assign.readFromJson(json_obj['assign'], is_text=False, relax_enum_validation=relax_enum_validation, custom_set_cls=set_cls, custom_dict_cls=dict_cls)
    if 'clear' in json_obj and json_obj['clear'] is not None:
      self.clear = json_obj['clear']

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.assign is not None:
      value = pprint.pformat(self.assign, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    assign=%s' % (value))
    if self.clear is not None:
      value = pprint.pformat(self.clear, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    clear=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'assign',
      'clear',
    )

  __hash__ = object.__hash__

  def _to_python(self):
    import importlib
    import thrift.python.converter
    python_types = importlib.import_module("test.fixtures.patch.module.thrift_types")
    return thrift.python.converter.to_python_struct(python_types.LoopPatch, self)

  def _to_py3(self):
    import importlib
    import thrift.py3.converter
    py3_types = importlib.import_module("test.fixtures.patch.module.types")
    return thrift.py3.converter.to_py3_struct(py3_types.LoopPatch, self)

  def _to_py_deprecated(self):
    return self

all_structs.append(MyData)
MyData.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRING, 'data1', True, None, 3, ), # 1
  (2, TType.I32, 'data2', None, None, 3, ), # 2
)))

MyData.thrift_struct_annotations = {
}
MyData.thrift_field_annotations = {
}

def MyData__init__(self, data1=None, data2=None,):
  self.data1 = data1
  self.data2 = data2

MyData.__init__ = MyData__init__

def MyData__setstate__(self, state):
  state.setdefault('data1', None)
  state.setdefault('data2', None)
  self.__dict__ = state

MyData.__getstate__ = lambda self: self.__dict__.copy()
MyData.__setstate__ = MyData__setstate__

all_structs.append(MyDataWithCustomDefault)
MyDataWithCustomDefault.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRING, 'data1', True, "1", 3, ), # 1
  (2, TType.I32, 'data2', None, 2, 3, ), # 2
)))

MyDataWithCustomDefault.thrift_struct_annotations = {
}
MyDataWithCustomDefault.thrift_field_annotations = {
}

def MyDataWithCustomDefault__init__(self, data1=MyDataWithCustomDefault.thrift_spec[1][4], data2=MyDataWithCustomDefault.thrift_spec[2][4],):
  self.data1 = data1
  self.data2 = data2

MyDataWithCustomDefault.__init__ = MyDataWithCustomDefault__init__

def MyDataWithCustomDefault__setstate__(self, state):
  state.setdefault('data1', "1")
  state.setdefault('data2', 2)
  self.__dict__ = state

MyDataWithCustomDefault.__getstate__ = lambda self: self.__dict__.copy()
MyDataWithCustomDefault.__setstate__ = MyDataWithCustomDefault__setstate__

all_structs.append(InnerUnion)
InnerUnion.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRING, 'innerOption', False, None, 2, ), # 1
)))

InnerUnion.thrift_struct_annotations = {
}
InnerUnion.thrift_field_annotations = {
}

def InnerUnion__init__(self, innerOption=None,):
  self.field = 0
  self.value = None
  if innerOption is not None:
    assert self.field == 0 and self.value is None
    self.field = 1
    self.value = innerOption

InnerUnion.__init__ = InnerUnion__init__

all_structs.append(MyUnion)
MyUnion.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRING, 'option1', True, None, 2, ), # 1
  (2, TType.I32, 'option2', None, None, 2, ), # 2
  (3, TType.STRUCT, 'option3', [InnerUnion, InnerUnion.thrift_spec, True], None, 2, ), # 3
)))

MyUnion.thrift_struct_annotations = {
}
MyUnion.thrift_field_annotations = {
}

def MyUnion__init__(self, option1=None, option2=None, option3=None,):
  self.field = 0
  self.value = None
  if option1 is not None:
    assert self.field == 0 and self.value is None
    self.field = 1
    self.value = option1
  if option2 is not None:
    assert self.field == 0 and self.value is None
    self.field = 2
    self.value = option2
  if option3 is not None:
    assert self.field == 0 and self.value is None
    self.field = 3
    self.value = option3

MyUnion.__init__ = MyUnion__init__

all_structs.append(MyStruct)
MyStruct.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (-32, TType.STRUCT, 'structWithCustomDefault', [MyDataWithCustomDefault, MyDataWithCustomDefault.thrift_spec, False], None, 3, ), # -32
  (-31, TType.I32, 'i32WithCustomDefault', None, 1, 3, ), # -31
  (-30, TType.MAP, 'mapMap', (TType.STRING,True,TType.MAP,(TType.STRING,True,TType.I32,None)), None, 3, ), # -30
  (-29, TType.LIST, 'listMap', (TType.MAP,(TType.STRING,True,TType.I32,None)), None, 3, ), # -29
  (-28, TType.MAP, 'optMapVal', (TType.STRING,True,TType.STRING,True), None, 1, ), # -28
  (-27, TType.SET, 'optSetVal', (TType.STRING,True), None, 1, ), # -27
  (-26, TType.LIST, 'optListVal', (TType.I16,None), None, 1, ), # -26
  (-25, TType.STRUCT, 'optLateStructVal', [LateDefStruct, LateDefStruct.thrift_spec, False], None, 1, ), # -25
  (-24, TType.STRUCT, 'optStructVal', [MyData, MyData.thrift_spec, False], None, 1, ), # -24
  (-23, TType.I32, 'optEnumVal', MyEnum, None, 1, ), # -23
  (-22, TType.STRING, 'optBinaryVal', False, None, 1, ), # -22
  (-21, TType.STRING, 'optStringVal', True, None, 1, ), # -21
  (-20, TType.DOUBLE, 'optDoubleVal', None, None, 1, ), # -20
  (-19, TType.FLOAT, 'optFloatVal', None, None, 1, ), # -19
  (-18, TType.I64, 'optI64Val', None, None, 1, ), # -18
  (-17, TType.I32, 'optI32Val', None, None, 1, ), # -17
  (-16, TType.I16, 'optI16Val', None, None, 1, ), # -16
  (-15, TType.BYTE, 'optByteVal', None, None, 1, ), # -15
  (-14, TType.BOOL, 'optBoolVal', None, None, 1, ), # -14
  (-13, TType.STRUCT, 'lateStructVal', [LateDefStruct, LateDefStruct.thrift_spec, False], None, 3, ), # -13
  (-12, TType.STRUCT, 'unionVal', [MyUnion, MyUnion.thrift_spec, True], None, 3, ), # -12
  (-11, TType.STRUCT, 'structVal', [MyData, MyData.thrift_spec, False], None, 3, ), # -11
  (-10, TType.I32, 'enumVal', MyEnum, None, 3, ), # -10
  (-9, TType.STRING, 'binaryVal', False, None, 3, ), # -9
  (-8, TType.STRING, 'stringVal', True, None, 3, ), # -8
  (-7, TType.DOUBLE, 'doubleVal', None, None, 3, ), # -7
  (-6, TType.FLOAT, 'floatVal', None, None, 3, ), # -6
  (-5, TType.I64, 'i64Val', None, None, 3, ), # -5
  (-4, TType.I32, 'i32Val', None, None, 3, ), # -4
  (-3, TType.I16, 'i16Val', None, None, 3, ), # -3
  (-2, TType.BYTE, 'byteVal', None, None, 3, ), # -2
  (-1, TType.BOOL, 'boolVal', None, None, 3, ), # -1
  (1, TType.STRUCT, 'structWithFieldCustomDefault', [MyData, MyData.thrift_spec, False], MyData(**{
    "data1" : "1",
    "data2" : 2,
  }), 3, ), # 1
)))

MyStruct.thrift_struct_annotations = {
}
MyStruct.thrift_field_annotations = {
}

def MyStruct__init__(self, boolVal=None, byteVal=None, i16Val=None, i32Val=None, i64Val=None, floatVal=None, doubleVal=None, stringVal=None, binaryVal=None, enumVal=None, structVal=None, unionVal=None, lateStructVal=None, optBoolVal=None, optByteVal=None, optI16Val=None, optI32Val=None, optI64Val=None, optFloatVal=None, optDoubleVal=None, optStringVal=None, optBinaryVal=None, optEnumVal=None, optStructVal=None, optLateStructVal=None, optListVal=None, optSetVal=None, optMapVal=None, listMap=None, mapMap=None, i32WithCustomDefault=MyStruct.thrift_spec[1][4], structWithCustomDefault=None, structWithFieldCustomDefault=MyStruct.thrift_spec[33][4],):
  self.boolVal = boolVal
  self.byteVal = byteVal
  self.i16Val = i16Val
  self.i32Val = i32Val
  self.i64Val = i64Val
  self.floatVal = floatVal
  self.doubleVal = doubleVal
  self.stringVal = stringVal
  self.binaryVal = binaryVal
  self.enumVal = enumVal
  self.structVal = structVal
  self.unionVal = unionVal
  self.lateStructVal = lateStructVal
  self.optBoolVal = optBoolVal
  self.optByteVal = optByteVal
  self.optI16Val = optI16Val
  self.optI32Val = optI32Val
  self.optI64Val = optI64Val
  self.optFloatVal = optFloatVal
  self.optDoubleVal = optDoubleVal
  self.optStringVal = optStringVal
  self.optBinaryVal = optBinaryVal
  self.optEnumVal = optEnumVal
  self.optStructVal = optStructVal
  self.optLateStructVal = optLateStructVal
  self.optListVal = optListVal
  self.optSetVal = optSetVal
  self.optMapVal = optMapVal
  self.listMap = listMap
  self.mapMap = mapMap
  self.i32WithCustomDefault = i32WithCustomDefault
  self.structWithCustomDefault = structWithCustomDefault
  if structWithFieldCustomDefault is self.thrift_spec[33][4]:
    structWithFieldCustomDefault = MyData(**{
    "data1" : "1",
    "data2" : 2,
  })
  self.structWithFieldCustomDefault = structWithFieldCustomDefault

MyStruct.__init__ = MyStruct__init__

def MyStruct__setstate__(self, state):
  state.setdefault('boolVal', None)
  state.setdefault('byteVal', None)
  state.setdefault('i16Val', None)
  state.setdefault('i32Val', None)
  state.setdefault('i64Val', None)
  state.setdefault('floatVal', None)
  state.setdefault('doubleVal', None)
  state.setdefault('stringVal', None)
  state.setdefault('binaryVal', None)
  state.setdefault('enumVal', None)
  state.setdefault('structVal', None)
  state.setdefault('unionVal', None)
  state.setdefault('lateStructVal', None)
  state.setdefault('optBoolVal', None)
  state.setdefault('optByteVal', None)
  state.setdefault('optI16Val', None)
  state.setdefault('optI32Val', None)
  state.setdefault('optI64Val', None)
  state.setdefault('optFloatVal', None)
  state.setdefault('optDoubleVal', None)
  state.setdefault('optStringVal', None)
  state.setdefault('optBinaryVal', None)
  state.setdefault('optEnumVal', None)
  state.setdefault('optStructVal', None)
  state.setdefault('optLateStructVal', None)
  state.setdefault('optListVal', None)
  state.setdefault('optSetVal', None)
  state.setdefault('optMapVal', None)
  state.setdefault('listMap', None)
  state.setdefault('mapMap', None)
  state.setdefault('i32WithCustomDefault', 1)
  state.setdefault('structWithCustomDefault', None)
  state.setdefault('structWithFieldCustomDefault', MyData(**{
    "data1" : "1",
    "data2" : 2,
  }))
  self.__dict__ = state

MyStruct.__getstate__ = lambda self: self.__dict__.copy()
MyStruct.__setstate__ = MyStruct__setstate__

all_structs.append(LateDefStruct)
LateDefStruct.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
)))

LateDefStruct.thrift_struct_annotations = {
}
LateDefStruct.thrift_field_annotations = {
}

all_structs.append(Recursive)
Recursive.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (-1, TType.MAP, 'nodes', (TType.STRING,True,TType.STRUCT,[Recursive, Recursive.thrift_spec, False]), None, 3, ), # -1
)))

Recursive.thrift_struct_annotations = {
}
Recursive.thrift_field_annotations = {
}

def Recursive__init__(self, nodes=None,):
  self.nodes = nodes

Recursive.__init__ = Recursive__init__

def Recursive__setstate__(self, state):
  state.setdefault('nodes', None)
  self.__dict__ = state

Recursive.__getstate__ = lambda self: self.__dict__.copy()
Recursive.__setstate__ = Recursive__setstate__

all_structs.append(Bar)
Bar.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (-1, TType.STRUCT, 'loop', [Loop, Loop.thrift_spec, False], None, 3, ), # -1
)))

Bar.thrift_struct_annotations = {
}
Bar.thrift_field_annotations = {
}

def Bar__init__(self, loop=None,):
  self.loop = loop

Bar.__init__ = Bar__init__

def Bar__setstate__(self, state):
  state.setdefault('loop', None)
  self.__dict__ = state

Bar.__getstate__ = lambda self: self.__dict__.copy()
Bar.__setstate__ = Bar__setstate__

all_structs.append(Loop)
Loop.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (-1, TType.STRUCT, 'bar', [Bar, Bar.thrift_spec, False], None, 3, ), # -1
)))

Loop.thrift_struct_annotations = {
}
Loop.thrift_field_annotations = {
}

def Loop__init__(self, bar=None,):
  self.bar = bar

Loop.__init__ = Loop__init__

def Loop__setstate__(self, state):
  state.setdefault('bar', None)
  self.__dict__ = state

Loop.__getstate__ = lambda self: self.__dict__.copy()
Loop.__setstate__ = Loop__setstate__

all_structs.append(MyDataPatch)
MyDataPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRUCT, 'assign', [MyData, MyData.thrift_spec, False], None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
  (3, TType.STRUCT, 'patchPrior', [MyDataFieldPatch, MyDataFieldPatch.thrift_spec, False], None, 3, ), # 3
  (5, TType.STRUCT, 'ensure', [MyDataEnsureStruct, MyDataEnsureStruct.thrift_spec, False], None, 3, ), # 5
  (6, TType.STRUCT, 'patch', [MyDataFieldPatch, MyDataFieldPatch.thrift_spec, False], None, 3, ), # 6
  (7, TType.LIST, 'remove', (TType.I16,None), None, 3, ), # 7
)))

MyDataPatch.thrift_struct_annotations = {
}
MyDataPatch.thrift_field_annotations = {
  1: {
    "thrift.box": "",
  },
  3: {
    "rust.box": "",
  },
  5: {
    "rust.box": "",
  },
  6: {
    "rust.box": "",
  },
  7: {
    "rust.box": "",
  },
}

def MyDataPatch__init__(self, assign=None, clear=None, patchPrior=None, ensure=None, patch=None, remove=None,):
  self.assign = assign
  self.clear = clear
  self.patchPrior = patchPrior
  self.ensure = ensure
  self.patch = patch
  self.remove = remove

MyDataPatch.__init__ = MyDataPatch__init__

def MyDataPatch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  state.setdefault('patchPrior', None)
  state.setdefault('ensure', None)
  state.setdefault('patch', None)
  state.setdefault('remove', None)
  self.__dict__ = state

MyDataPatch.__getstate__ = lambda self: self.__dict__.copy()
MyDataPatch.__setstate__ = MyDataPatch__setstate__

all_structs.append(MyDataFieldPatch)
MyDataFieldPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRUCT, 'data1', [thrift.lib.thrift.patch.ttypes.StringPatch, thrift.lib.thrift.patch.ttypes.StringPatch.thrift_spec, False], None, 3, ), # 1
  (2, TType.STRUCT, 'data2', [thrift.lib.thrift.patch.ttypes.I32Patch, thrift.lib.thrift.patch.ttypes.I32Patch.thrift_spec, False], None, 3, ), # 2
)))

MyDataFieldPatch.thrift_struct_annotations = {
}
MyDataFieldPatch.thrift_field_annotations = {
}

def MyDataFieldPatch__init__(self, data1=None, data2=None,):
  self.data1 = data1
  self.data2 = data2

MyDataFieldPatch.__init__ = MyDataFieldPatch__init__

def MyDataFieldPatch__setstate__(self, state):
  state.setdefault('data1', None)
  state.setdefault('data2', None)
  self.__dict__ = state

MyDataFieldPatch.__getstate__ = lambda self: self.__dict__.copy()
MyDataFieldPatch.__setstate__ = MyDataFieldPatch__setstate__

all_structs.append(MyDataEnsureStruct)
MyDataEnsureStruct.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRING, 'data1', True, None, 1, ), # 1
  (2, TType.I32, 'data2', None, None, 1, ), # 2
)))

MyDataEnsureStruct.thrift_struct_annotations = {
}
MyDataEnsureStruct.thrift_field_annotations = {
}

def MyDataEnsureStruct__init__(self, data1=None, data2=None,):
  self.data1 = data1
  self.data2 = data2

MyDataEnsureStruct.__init__ = MyDataEnsureStruct__init__

def MyDataEnsureStruct__setstate__(self, state):
  state.setdefault('data1', None)
  state.setdefault('data2', None)
  self.__dict__ = state

MyDataEnsureStruct.__getstate__ = lambda self: self.__dict__.copy()
MyDataEnsureStruct.__setstate__ = MyDataEnsureStruct__setstate__

all_structs.append(MyDataWithCustomDefaultPatch)
MyDataWithCustomDefaultPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRUCT, 'assign', [MyDataWithCustomDefault, MyDataWithCustomDefault.thrift_spec, False], None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
  (3, TType.STRUCT, 'patchPrior', [MyDataWithCustomDefaultFieldPatch, MyDataWithCustomDefaultFieldPatch.thrift_spec, False], None, 3, ), # 3
  (5, TType.STRUCT, 'ensure', [MyDataWithCustomDefaultEnsureStruct, MyDataWithCustomDefaultEnsureStruct.thrift_spec, False], None, 3, ), # 5
  (6, TType.STRUCT, 'patch', [MyDataWithCustomDefaultFieldPatch, MyDataWithCustomDefaultFieldPatch.thrift_spec, False], None, 3, ), # 6
  (7, TType.LIST, 'remove', (TType.I16,None), None, 3, ), # 7
)))

MyDataWithCustomDefaultPatch.thrift_struct_annotations = {
}
MyDataWithCustomDefaultPatch.thrift_field_annotations = {
  1: {
    "thrift.box": "",
  },
  3: {
    "rust.box": "",
  },
  5: {
    "rust.box": "",
  },
  6: {
    "rust.box": "",
  },
  7: {
    "rust.box": "",
  },
}

def MyDataWithCustomDefaultPatch__init__(self, assign=None, clear=None, patchPrior=None, ensure=None, patch=None, remove=None,):
  self.assign = assign
  self.clear = clear
  self.patchPrior = patchPrior
  self.ensure = ensure
  self.patch = patch
  self.remove = remove

MyDataWithCustomDefaultPatch.__init__ = MyDataWithCustomDefaultPatch__init__

def MyDataWithCustomDefaultPatch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  state.setdefault('patchPrior', None)
  state.setdefault('ensure', None)
  state.setdefault('patch', None)
  state.setdefault('remove', None)
  self.__dict__ = state

MyDataWithCustomDefaultPatch.__getstate__ = lambda self: self.__dict__.copy()
MyDataWithCustomDefaultPatch.__setstate__ = MyDataWithCustomDefaultPatch__setstate__

all_structs.append(MyDataWithCustomDefaultFieldPatch)
MyDataWithCustomDefaultFieldPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRUCT, 'data1', [thrift.lib.thrift.patch.ttypes.StringPatch, thrift.lib.thrift.patch.ttypes.StringPatch.thrift_spec, False], None, 3, ), # 1
  (2, TType.STRUCT, 'data2', [thrift.lib.thrift.patch.ttypes.I32Patch, thrift.lib.thrift.patch.ttypes.I32Patch.thrift_spec, False], None, 3, ), # 2
)))

MyDataWithCustomDefaultFieldPatch.thrift_struct_annotations = {
}
MyDataWithCustomDefaultFieldPatch.thrift_field_annotations = {
}

def MyDataWithCustomDefaultFieldPatch__init__(self, data1=None, data2=None,):
  self.data1 = data1
  self.data2 = data2

MyDataWithCustomDefaultFieldPatch.__init__ = MyDataWithCustomDefaultFieldPatch__init__

def MyDataWithCustomDefaultFieldPatch__setstate__(self, state):
  state.setdefault('data1', None)
  state.setdefault('data2', None)
  self.__dict__ = state

MyDataWithCustomDefaultFieldPatch.__getstate__ = lambda self: self.__dict__.copy()
MyDataWithCustomDefaultFieldPatch.__setstate__ = MyDataWithCustomDefaultFieldPatch__setstate__

all_structs.append(MyDataWithCustomDefaultEnsureStruct)
MyDataWithCustomDefaultEnsureStruct.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRING, 'data1', True, None, 1, ), # 1
  (2, TType.I32, 'data2', None, None, 1, ), # 2
)))

MyDataWithCustomDefaultEnsureStruct.thrift_struct_annotations = {
}
MyDataWithCustomDefaultEnsureStruct.thrift_field_annotations = {
}

def MyDataWithCustomDefaultEnsureStruct__init__(self, data1=None, data2=None,):
  self.data1 = data1
  self.data2 = data2

MyDataWithCustomDefaultEnsureStruct.__init__ = MyDataWithCustomDefaultEnsureStruct__init__

def MyDataWithCustomDefaultEnsureStruct__setstate__(self, state):
  state.setdefault('data1', None)
  state.setdefault('data2', None)
  self.__dict__ = state

MyDataWithCustomDefaultEnsureStruct.__getstate__ = lambda self: self.__dict__.copy()
MyDataWithCustomDefaultEnsureStruct.__setstate__ = MyDataWithCustomDefaultEnsureStruct__setstate__

all_structs.append(InnerUnionPatch)
InnerUnionPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRUCT, 'assign', [InnerUnion, InnerUnion.thrift_spec, True], None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
  (3, TType.STRUCT, 'patchPrior', [InnerUnionFieldPatch, InnerUnionFieldPatch.thrift_spec, False], None, 3, ), # 3
  (4, TType.STRUCT, 'ensure', [InnerUnion, InnerUnion.thrift_spec, True], None, 3, ), # 4
  (6, TType.STRUCT, 'patch', [InnerUnionFieldPatch, InnerUnionFieldPatch.thrift_spec, False], None, 3, ), # 6
)))

InnerUnionPatch.thrift_struct_annotations = {
}
InnerUnionPatch.thrift_field_annotations = {
  1: {
    "thrift.box": "",
  },
}

def InnerUnionPatch__init__(self, assign=None, clear=None, patchPrior=None, ensure=None, patch=None,):
  self.assign = assign
  self.clear = clear
  self.patchPrior = patchPrior
  self.ensure = ensure
  self.patch = patch

InnerUnionPatch.__init__ = InnerUnionPatch__init__

def InnerUnionPatch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  state.setdefault('patchPrior', None)
  state.setdefault('ensure', None)
  state.setdefault('patch', None)
  self.__dict__ = state

InnerUnionPatch.__getstate__ = lambda self: self.__dict__.copy()
InnerUnionPatch.__setstate__ = InnerUnionPatch__setstate__

all_structs.append(InnerUnionFieldPatch)
InnerUnionFieldPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRUCT, 'innerOption', [thrift.lib.thrift.patch.ttypes.BinaryPatch, thrift.lib.thrift.patch.ttypes.BinaryPatch.thrift_spec, False], None, 3, ), # 1
)))

InnerUnionFieldPatch.thrift_struct_annotations = {
}
InnerUnionFieldPatch.thrift_field_annotations = {
}

def InnerUnionFieldPatch__init__(self, innerOption=None,):
  self.innerOption = innerOption

InnerUnionFieldPatch.__init__ = InnerUnionFieldPatch__init__

def InnerUnionFieldPatch__setstate__(self, state):
  state.setdefault('innerOption', None)
  self.__dict__ = state

InnerUnionFieldPatch.__getstate__ = lambda self: self.__dict__.copy()
InnerUnionFieldPatch.__setstate__ = InnerUnionFieldPatch__setstate__

all_structs.append(MyUnionPatch)
MyUnionPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRUCT, 'assign', [MyUnion, MyUnion.thrift_spec, True], None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
  (3, TType.STRUCT, 'patchPrior', [MyUnionFieldPatch, MyUnionFieldPatch.thrift_spec, False], None, 3, ), # 3
  (4, TType.STRUCT, 'ensure', [MyUnion, MyUnion.thrift_spec, True], None, 3, ), # 4
  (6, TType.STRUCT, 'patch', [MyUnionFieldPatch, MyUnionFieldPatch.thrift_spec, False], None, 3, ), # 6
)))

MyUnionPatch.thrift_struct_annotations = {
}
MyUnionPatch.thrift_field_annotations = {
  1: {
    "thrift.box": "",
  },
}

def MyUnionPatch__init__(self, assign=None, clear=None, patchPrior=None, ensure=None, patch=None,):
  self.assign = assign
  self.clear = clear
  self.patchPrior = patchPrior
  self.ensure = ensure
  self.patch = patch

MyUnionPatch.__init__ = MyUnionPatch__init__

def MyUnionPatch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  state.setdefault('patchPrior', None)
  state.setdefault('ensure', None)
  state.setdefault('patch', None)
  self.__dict__ = state

MyUnionPatch.__getstate__ = lambda self: self.__dict__.copy()
MyUnionPatch.__setstate__ = MyUnionPatch__setstate__

all_structs.append(MyUnionFieldPatch)
MyUnionFieldPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRUCT, 'option1', [thrift.lib.thrift.patch.ttypes.StringPatch, thrift.lib.thrift.patch.ttypes.StringPatch.thrift_spec, False], None, 3, ), # 1
  (2, TType.STRUCT, 'option2', [thrift.lib.thrift.patch.ttypes.I32Patch, thrift.lib.thrift.patch.ttypes.I32Patch.thrift_spec, False], None, 3, ), # 2
  (3, TType.STRUCT, 'option3', [InnerUnionPatch, InnerUnionPatch.thrift_spec, False], None, 3, ), # 3
)))

MyUnionFieldPatch.thrift_struct_annotations = {
}
MyUnionFieldPatch.thrift_field_annotations = {
}

def MyUnionFieldPatch__init__(self, option1=None, option2=None, option3=None,):
  self.option1 = option1
  self.option2 = option2
  self.option3 = option3

MyUnionFieldPatch.__init__ = MyUnionFieldPatch__init__

def MyUnionFieldPatch__setstate__(self, state):
  state.setdefault('option1', None)
  state.setdefault('option2', None)
  state.setdefault('option3', None)
  self.__dict__ = state

MyUnionFieldPatch.__getstate__ = lambda self: self.__dict__.copy()
MyUnionFieldPatch.__setstate__ = MyUnionFieldPatch__setstate__

all_structs.append(MyStructPatch)
MyStructPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRUCT, 'assign', [MyStruct, MyStruct.thrift_spec, False], None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
  (3, TType.STRUCT, 'patchPrior', [MyStructFieldPatch, MyStructFieldPatch.thrift_spec, False], None, 3, ), # 3
  (5, TType.STRUCT, 'ensure', [MyStructEnsureStruct, MyStructEnsureStruct.thrift_spec, False], None, 3, ), # 5
  (6, TType.STRUCT, 'patch', [MyStructFieldPatch, MyStructFieldPatch.thrift_spec, False], None, 3, ), # 6
  (7, TType.LIST, 'remove', (TType.I16,None), None, 3, ), # 7
)))

MyStructPatch.thrift_struct_annotations = {
}
MyStructPatch.thrift_field_annotations = {
  1: {
    "thrift.box": "",
  },
  3: {
    "rust.box": "",
  },
  5: {
    "rust.box": "",
  },
  6: {
    "rust.box": "",
  },
  7: {
    "rust.box": "",
  },
}

def MyStructPatch__init__(self, assign=None, clear=None, patchPrior=None, ensure=None, patch=None, remove=None,):
  self.assign = assign
  self.clear = clear
  self.patchPrior = patchPrior
  self.ensure = ensure
  self.patch = patch
  self.remove = remove

MyStructPatch.__init__ = MyStructPatch__init__

def MyStructPatch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  state.setdefault('patchPrior', None)
  state.setdefault('ensure', None)
  state.setdefault('patch', None)
  state.setdefault('remove', None)
  self.__dict__ = state

MyStructPatch.__getstate__ = lambda self: self.__dict__.copy()
MyStructPatch.__setstate__ = MyStructPatch__setstate__

all_structs.append(MyStructField10Patch)
MyStructField10Patch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.I32, 'assign', MyEnum, None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
)))

MyStructField10Patch.thrift_struct_annotations = {
}
MyStructField10Patch.thrift_field_annotations = {
}

def MyStructField10Patch__init__(self, assign=None, clear=None,):
  self.assign = assign
  self.clear = clear

MyStructField10Patch.__init__ = MyStructField10Patch__init__

def MyStructField10Patch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  self.__dict__ = state

MyStructField10Patch.__getstate__ = lambda self: self.__dict__.copy()
MyStructField10Patch.__setstate__ = MyStructField10Patch__setstate__

all_structs.append(MyStructField23Patch)
MyStructField23Patch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.I32, 'assign', MyEnum, None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
)))

MyStructField23Patch.thrift_struct_annotations = {
}
MyStructField23Patch.thrift_field_annotations = {
}

def MyStructField23Patch__init__(self, assign=None, clear=None,):
  self.assign = assign
  self.clear = clear

MyStructField23Patch.__init__ = MyStructField23Patch__init__

def MyStructField23Patch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  self.__dict__ = state

MyStructField23Patch.__getstate__ = lambda self: self.__dict__.copy()
MyStructField23Patch.__setstate__ = MyStructField23Patch__setstate__

all_structs.append(MyStructField26Patch)
MyStructField26Patch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.LIST, 'assign', (TType.I16,None), None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
  (8, TType.LIST, 'prepend', (TType.I16,None), None, 3, ), # 8
  (9, TType.LIST, 'append', (TType.I16,None), None, 3, ), # 9
)))

MyStructField26Patch.thrift_struct_annotations = {
}
MyStructField26Patch.thrift_field_annotations = {
}

def MyStructField26Patch__init__(self, assign=None, clear=None, prepend=None, append=None,):
  self.assign = assign
  self.clear = clear
  self.prepend = prepend
  self.append = append

MyStructField26Patch.__init__ = MyStructField26Patch__init__

def MyStructField26Patch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  state.setdefault('prepend', None)
  state.setdefault('append', None)
  self.__dict__ = state

MyStructField26Patch.__getstate__ = lambda self: self.__dict__.copy()
MyStructField26Patch.__setstate__ = MyStructField26Patch__setstate__

all_structs.append(MyStructField27Patch)
MyStructField27Patch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.SET, 'assign', (TType.STRING,True), None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
  (7, TType.SET, 'remove', (TType.STRING,True), None, 3, ), # 7
  (8, TType.SET, 'add', (TType.STRING,True), None, 3, ), # 8
)))

MyStructField27Patch.thrift_struct_annotations = {
}
MyStructField27Patch.thrift_field_annotations = {
}

def MyStructField27Patch__init__(self, assign=None, clear=None, remove=None, add=None,):
  self.assign = assign
  self.clear = clear
  self.remove = remove
  self.add = add

MyStructField27Patch.__init__ = MyStructField27Patch__init__

def MyStructField27Patch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  state.setdefault('remove', None)
  state.setdefault('add', None)
  self.__dict__ = state

MyStructField27Patch.__getstate__ = lambda self: self.__dict__.copy()
MyStructField27Patch.__setstate__ = MyStructField27Patch__setstate__

all_structs.append(MyStructField28Patch)
MyStructField28Patch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.MAP, 'assign', (TType.STRING,True,TType.STRING,True), None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
  (3, TType.MAP, 'patchPrior', (TType.STRING,True,TType.STRUCT,[thrift.lib.thrift.patch.ttypes.StringPatch, thrift.lib.thrift.patch.ttypes.StringPatch.thrift_spec, False]), None, 3, ), # 3
  (5, TType.MAP, 'add', (TType.STRING,True,TType.STRING,True), None, 3, ), # 5
  (6, TType.MAP, 'patch', (TType.STRING,True,TType.STRUCT,[thrift.lib.thrift.patch.ttypes.StringPatch, thrift.lib.thrift.patch.ttypes.StringPatch.thrift_spec, False]), None, 3, ), # 6
  (7, TType.SET, 'remove', (TType.STRING,True), None, 3, ), # 7
  (9, TType.MAP, 'put', (TType.STRING,True,TType.STRING,True), None, 3, ), # 9
)))

MyStructField28Patch.thrift_struct_annotations = {
}
MyStructField28Patch.thrift_field_annotations = {
}

def MyStructField28Patch__init__(self, assign=None, clear=None, patchPrior=None, add=None, patch=None, remove=None, put=None,):
  self.assign = assign
  self.clear = clear
  self.patchPrior = patchPrior
  self.add = add
  self.patch = patch
  self.remove = remove
  self.put = put

MyStructField28Patch.__init__ = MyStructField28Patch__init__

def MyStructField28Patch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  state.setdefault('patchPrior', None)
  state.setdefault('add', None)
  state.setdefault('patch', None)
  state.setdefault('remove', None)
  state.setdefault('put', None)
  self.__dict__ = state

MyStructField28Patch.__getstate__ = lambda self: self.__dict__.copy()
MyStructField28Patch.__setstate__ = MyStructField28Patch__setstate__

all_structs.append(MyStructField29Patch)
MyStructField29Patch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.LIST, 'assign', (TType.MAP,(TType.STRING,True,TType.I32,None)), None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
  (8, TType.LIST, 'prepend', (TType.MAP,(TType.STRING,True,TType.I32,None)), None, 3, ), # 8
  (9, TType.LIST, 'append', (TType.MAP,(TType.STRING,True,TType.I32,None)), None, 3, ), # 9
)))

MyStructField29Patch.thrift_struct_annotations = {
}
MyStructField29Patch.thrift_field_annotations = {
}

def MyStructField29Patch__init__(self, assign=None, clear=None, prepend=None, append=None,):
  self.assign = assign
  self.clear = clear
  self.prepend = prepend
  self.append = append

MyStructField29Patch.__init__ = MyStructField29Patch__init__

def MyStructField29Patch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  state.setdefault('prepend', None)
  state.setdefault('append', None)
  self.__dict__ = state

MyStructField29Patch.__getstate__ = lambda self: self.__dict__.copy()
MyStructField29Patch.__setstate__ = MyStructField29Patch__setstate__

all_structs.append(MyStructField30Patch)
MyStructField30Patch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.MAP, 'assign', (TType.STRING,True,TType.MAP,(TType.STRING,True,TType.I32,None)), None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
  (3, TType.MAP, 'patchPrior', (TType.STRING,True,TType.STRUCT,[MyStructField30Patch1, MyStructField30Patch1.thrift_spec, False]), None, 3, ), # 3
  (5, TType.MAP, 'add', (TType.STRING,True,TType.MAP,(TType.STRING,True,TType.I32,None)), None, 3, ), # 5
  (6, TType.MAP, 'patch', (TType.STRING,True,TType.STRUCT,[MyStructField30Patch1, MyStructField30Patch1.thrift_spec, False]), None, 3, ), # 6
  (7, TType.SET, 'remove', (TType.STRING,True), None, 3, ), # 7
  (9, TType.MAP, 'put', (TType.STRING,True,TType.MAP,(TType.STRING,True,TType.I32,None)), None, 3, ), # 9
)))

MyStructField30Patch.thrift_struct_annotations = {
}
MyStructField30Patch.thrift_field_annotations = {
}

def MyStructField30Patch__init__(self, assign=None, clear=None, patchPrior=None, add=None, patch=None, remove=None, put=None,):
  self.assign = assign
  self.clear = clear
  self.patchPrior = patchPrior
  self.add = add
  self.patch = patch
  self.remove = remove
  self.put = put

MyStructField30Patch.__init__ = MyStructField30Patch__init__

def MyStructField30Patch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  state.setdefault('patchPrior', None)
  state.setdefault('add', None)
  state.setdefault('patch', None)
  state.setdefault('remove', None)
  state.setdefault('put', None)
  self.__dict__ = state

MyStructField30Patch.__getstate__ = lambda self: self.__dict__.copy()
MyStructField30Patch.__setstate__ = MyStructField30Patch__setstate__

all_structs.append(MyStructField30Patch1)
MyStructField30Patch1.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.MAP, 'assign', (TType.STRING,True,TType.I32,None), None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
  (3, TType.MAP, 'patchPrior', (TType.STRING,True,TType.STRUCT,[thrift.lib.thrift.patch.ttypes.I32Patch, thrift.lib.thrift.patch.ttypes.I32Patch.thrift_spec, False]), None, 3, ), # 3
  (5, TType.MAP, 'add', (TType.STRING,True,TType.I32,None), None, 3, ), # 5
  (6, TType.MAP, 'patch', (TType.STRING,True,TType.STRUCT,[thrift.lib.thrift.patch.ttypes.I32Patch, thrift.lib.thrift.patch.ttypes.I32Patch.thrift_spec, False]), None, 3, ), # 6
  (7, TType.SET, 'remove', (TType.STRING,True), None, 3, ), # 7
  (9, TType.MAP, 'put', (TType.STRING,True,TType.I32,None), None, 3, ), # 9
)))

MyStructField30Patch1.thrift_struct_annotations = {
}
MyStructField30Patch1.thrift_field_annotations = {
}

def MyStructField30Patch1__init__(self, assign=None, clear=None, patchPrior=None, add=None, patch=None, remove=None, put=None,):
  self.assign = assign
  self.clear = clear
  self.patchPrior = patchPrior
  self.add = add
  self.patch = patch
  self.remove = remove
  self.put = put

MyStructField30Patch1.__init__ = MyStructField30Patch1__init__

def MyStructField30Patch1__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  state.setdefault('patchPrior', None)
  state.setdefault('add', None)
  state.setdefault('patch', None)
  state.setdefault('remove', None)
  state.setdefault('put', None)
  self.__dict__ = state

MyStructField30Patch1.__getstate__ = lambda self: self.__dict__.copy()
MyStructField30Patch1.__setstate__ = MyStructField30Patch1__setstate__

all_structs.append(MyStructFieldPatch)
MyStructFieldPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (-32, TType.STRUCT, 'structWithCustomDefault', [MyDataWithCustomDefaultPatch, MyDataWithCustomDefaultPatch.thrift_spec, False], None, 3, ), # -32
  (-31, TType.STRUCT, 'i32WithCustomDefault', [thrift.lib.thrift.patch.ttypes.I32Patch, thrift.lib.thrift.patch.ttypes.I32Patch.thrift_spec, False], None, 3, ), # -31
  (-30, TType.STRUCT, 'mapMap', [MyStructField30Patch, MyStructField30Patch.thrift_spec, False], None, 3, ), # -30
  (-29, TType.STRUCT, 'listMap', [MyStructField29Patch, MyStructField29Patch.thrift_spec, False], None, 3, ), # -29
  (-28, TType.STRUCT, 'optMapVal', [MyStructField28Patch, MyStructField28Patch.thrift_spec, False], None, 3, ), # -28
  (-27, TType.STRUCT, 'optSetVal', [MyStructField27Patch, MyStructField27Patch.thrift_spec, False], None, 3, ), # -27
  (-26, TType.STRUCT, 'optListVal', [MyStructField26Patch, MyStructField26Patch.thrift_spec, False], None, 3, ), # -26
  (-25, TType.STRUCT, 'optLateStructVal', [LateDefStructPatch, LateDefStructPatch.thrift_spec, False], None, 3, ), # -25
  (-24, TType.STRUCT, 'optStructVal', [MyDataPatch, MyDataPatch.thrift_spec, False], None, 3, ), # -24
  (-23, TType.STRUCT, 'optEnumVal', [MyStructField23Patch, MyStructField23Patch.thrift_spec, False], None, 3, ), # -23
  (-22, TType.STRUCT, 'optBinaryVal', [thrift.lib.thrift.patch.ttypes.BinaryPatch, thrift.lib.thrift.patch.ttypes.BinaryPatch.thrift_spec, False], None, 3, ), # -22
  (-21, TType.STRUCT, 'optStringVal', [thrift.lib.thrift.patch.ttypes.StringPatch, thrift.lib.thrift.patch.ttypes.StringPatch.thrift_spec, False], None, 3, ), # -21
  (-20, TType.STRUCT, 'optDoubleVal', [thrift.lib.thrift.patch.ttypes.DoublePatch, thrift.lib.thrift.patch.ttypes.DoublePatch.thrift_spec, False], None, 3, ), # -20
  (-19, TType.STRUCT, 'optFloatVal', [thrift.lib.thrift.patch.ttypes.FloatPatch, thrift.lib.thrift.patch.ttypes.FloatPatch.thrift_spec, False], None, 3, ), # -19
  (-18, TType.STRUCT, 'optI64Val', [thrift.lib.thrift.patch.ttypes.I64Patch, thrift.lib.thrift.patch.ttypes.I64Patch.thrift_spec, False], None, 3, ), # -18
  (-17, TType.STRUCT, 'optI32Val', [thrift.lib.thrift.patch.ttypes.I32Patch, thrift.lib.thrift.patch.ttypes.I32Patch.thrift_spec, False], None, 3, ), # -17
  (-16, TType.STRUCT, 'optI16Val', [thrift.lib.thrift.patch.ttypes.I16Patch, thrift.lib.thrift.patch.ttypes.I16Patch.thrift_spec, False], None, 3, ), # -16
  (-15, TType.STRUCT, 'optByteVal', [thrift.lib.thrift.patch.ttypes.BytePatch, thrift.lib.thrift.patch.ttypes.BytePatch.thrift_spec, False], None, 3, ), # -15
  (-14, TType.STRUCT, 'optBoolVal', [thrift.lib.thrift.patch.ttypes.BoolPatch, thrift.lib.thrift.patch.ttypes.BoolPatch.thrift_spec, False], None, 3, ), # -14
  (-13, TType.STRUCT, 'lateStructVal', [LateDefStructPatch, LateDefStructPatch.thrift_spec, False], None, 3, ), # -13
  (-12, TType.STRUCT, 'unionVal', [MyUnionPatch, MyUnionPatch.thrift_spec, False], None, 3, ), # -12
  (-11, TType.STRUCT, 'structVal', [MyDataPatch, MyDataPatch.thrift_spec, False], None, 3, ), # -11
  (-10, TType.STRUCT, 'enumVal', [MyStructField10Patch, MyStructField10Patch.thrift_spec, False], None, 3, ), # -10
  (-9, TType.STRUCT, 'binaryVal', [thrift.lib.thrift.patch.ttypes.BinaryPatch, thrift.lib.thrift.patch.ttypes.BinaryPatch.thrift_spec, False], None, 3, ), # -9
  (-8, TType.STRUCT, 'stringVal', [thrift.lib.thrift.patch.ttypes.StringPatch, thrift.lib.thrift.patch.ttypes.StringPatch.thrift_spec, False], None, 3, ), # -8
  (-7, TType.STRUCT, 'doubleVal', [thrift.lib.thrift.patch.ttypes.DoublePatch, thrift.lib.thrift.patch.ttypes.DoublePatch.thrift_spec, False], None, 3, ), # -7
  (-6, TType.STRUCT, 'floatVal', [thrift.lib.thrift.patch.ttypes.FloatPatch, thrift.lib.thrift.patch.ttypes.FloatPatch.thrift_spec, False], None, 3, ), # -6
  (-5, TType.STRUCT, 'i64Val', [thrift.lib.thrift.patch.ttypes.I64Patch, thrift.lib.thrift.patch.ttypes.I64Patch.thrift_spec, False], None, 3, ), # -5
  (-4, TType.STRUCT, 'i32Val', [thrift.lib.thrift.patch.ttypes.I32Patch, thrift.lib.thrift.patch.ttypes.I32Patch.thrift_spec, False], None, 3, ), # -4
  (-3, TType.STRUCT, 'i16Val', [thrift.lib.thrift.patch.ttypes.I16Patch, thrift.lib.thrift.patch.ttypes.I16Patch.thrift_spec, False], None, 3, ), # -3
  (-2, TType.STRUCT, 'byteVal', [thrift.lib.thrift.patch.ttypes.BytePatch, thrift.lib.thrift.patch.ttypes.BytePatch.thrift_spec, False], None, 3, ), # -2
  (-1, TType.STRUCT, 'boolVal', [thrift.lib.thrift.patch.ttypes.BoolPatch, thrift.lib.thrift.patch.ttypes.BoolPatch.thrift_spec, False], None, 3, ), # -1
  (1, TType.STRUCT, 'structWithFieldCustomDefault', [MyDataPatch, MyDataPatch.thrift_spec, False], None, 3, ), # 1
)))

MyStructFieldPatch.thrift_struct_annotations = {
}
MyStructFieldPatch.thrift_field_annotations = {
}

def MyStructFieldPatch__init__(self, structWithCustomDefault=None, i32WithCustomDefault=None, mapMap=None, listMap=None, optMapVal=None, optSetVal=None, optListVal=None, optLateStructVal=None, optStructVal=None, optEnumVal=None, optBinaryVal=None, optStringVal=None, optDoubleVal=None, optFloatVal=None, optI64Val=None, optI32Val=None, optI16Val=None, optByteVal=None, optBoolVal=None, lateStructVal=None, unionVal=None, structVal=None, enumVal=None, binaryVal=None, stringVal=None, doubleVal=None, floatVal=None, i64Val=None, i32Val=None, i16Val=None, byteVal=None, boolVal=None, structWithFieldCustomDefault=None,):
  self.structWithCustomDefault = structWithCustomDefault
  self.i32WithCustomDefault = i32WithCustomDefault
  self.mapMap = mapMap
  self.listMap = listMap
  self.optMapVal = optMapVal
  self.optSetVal = optSetVal
  self.optListVal = optListVal
  self.optLateStructVal = optLateStructVal
  self.optStructVal = optStructVal
  self.optEnumVal = optEnumVal
  self.optBinaryVal = optBinaryVal
  self.optStringVal = optStringVal
  self.optDoubleVal = optDoubleVal
  self.optFloatVal = optFloatVal
  self.optI64Val = optI64Val
  self.optI32Val = optI32Val
  self.optI16Val = optI16Val
  self.optByteVal = optByteVal
  self.optBoolVal = optBoolVal
  self.lateStructVal = lateStructVal
  self.unionVal = unionVal
  self.structVal = structVal
  self.enumVal = enumVal
  self.binaryVal = binaryVal
  self.stringVal = stringVal
  self.doubleVal = doubleVal
  self.floatVal = floatVal
  self.i64Val = i64Val
  self.i32Val = i32Val
  self.i16Val = i16Val
  self.byteVal = byteVal
  self.boolVal = boolVal
  self.structWithFieldCustomDefault = structWithFieldCustomDefault

MyStructFieldPatch.__init__ = MyStructFieldPatch__init__

def MyStructFieldPatch__setstate__(self, state):
  state.setdefault('structWithCustomDefault', None)
  state.setdefault('i32WithCustomDefault', None)
  state.setdefault('mapMap', None)
  state.setdefault('listMap', None)
  state.setdefault('optMapVal', None)
  state.setdefault('optSetVal', None)
  state.setdefault('optListVal', None)
  state.setdefault('optLateStructVal', None)
  state.setdefault('optStructVal', None)
  state.setdefault('optEnumVal', None)
  state.setdefault('optBinaryVal', None)
  state.setdefault('optStringVal', None)
  state.setdefault('optDoubleVal', None)
  state.setdefault('optFloatVal', None)
  state.setdefault('optI64Val', None)
  state.setdefault('optI32Val', None)
  state.setdefault('optI16Val', None)
  state.setdefault('optByteVal', None)
  state.setdefault('optBoolVal', None)
  state.setdefault('lateStructVal', None)
  state.setdefault('unionVal', None)
  state.setdefault('structVal', None)
  state.setdefault('enumVal', None)
  state.setdefault('binaryVal', None)
  state.setdefault('stringVal', None)
  state.setdefault('doubleVal', None)
  state.setdefault('floatVal', None)
  state.setdefault('i64Val', None)
  state.setdefault('i32Val', None)
  state.setdefault('i16Val', None)
  state.setdefault('byteVal', None)
  state.setdefault('boolVal', None)
  state.setdefault('structWithFieldCustomDefault', None)
  self.__dict__ = state

MyStructFieldPatch.__getstate__ = lambda self: self.__dict__.copy()
MyStructFieldPatch.__setstate__ = MyStructFieldPatch__setstate__

all_structs.append(MyStructEnsureStruct)
MyStructEnsureStruct.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (-32, TType.STRUCT, 'structWithCustomDefault', [MyDataWithCustomDefault, MyDataWithCustomDefault.thrift_spec, False], None, 1, ), # -32
  (-31, TType.I32, 'i32WithCustomDefault', None, None, 1, ), # -31
  (-30, TType.MAP, 'mapMap', (TType.STRING,True,TType.MAP,(TType.STRING,True,TType.I32,None)), None, 1, ), # -30
  (-29, TType.LIST, 'listMap', (TType.MAP,(TType.STRING,True,TType.I32,None)), None, 1, ), # -29
  (-28, TType.MAP, 'optMapVal', (TType.STRING,True,TType.STRING,True), None, 1, ), # -28
  (-27, TType.SET, 'optSetVal', (TType.STRING,True), None, 1, ), # -27
  (-26, TType.LIST, 'optListVal', (TType.I16,None), None, 1, ), # -26
  (-25, TType.STRUCT, 'optLateStructVal', [LateDefStruct, LateDefStruct.thrift_spec, False], None, 1, ), # -25
  (-24, TType.STRUCT, 'optStructVal', [MyData, MyData.thrift_spec, False], None, 1, ), # -24
  (-23, TType.I32, 'optEnumVal', MyEnum, None, 1, ), # -23
  (-22, TType.STRING, 'optBinaryVal', False, None, 1, ), # -22
  (-21, TType.STRING, 'optStringVal', True, None, 1, ), # -21
  (-20, TType.DOUBLE, 'optDoubleVal', None, None, 1, ), # -20
  (-19, TType.FLOAT, 'optFloatVal', None, None, 1, ), # -19
  (-18, TType.I64, 'optI64Val', None, None, 1, ), # -18
  (-17, TType.I32, 'optI32Val', None, None, 1, ), # -17
  (-16, TType.I16, 'optI16Val', None, None, 1, ), # -16
  (-15, TType.BYTE, 'optByteVal', None, None, 1, ), # -15
  (-14, TType.BOOL, 'optBoolVal', None, None, 1, ), # -14
  (-13, TType.STRUCT, 'lateStructVal', [LateDefStruct, LateDefStruct.thrift_spec, False], None, 1, ), # -13
  (-12, TType.STRUCT, 'unionVal', [MyUnion, MyUnion.thrift_spec, True], None, 1, ), # -12
  (-11, TType.STRUCT, 'structVal', [MyData, MyData.thrift_spec, False], None, 1, ), # -11
  (-10, TType.I32, 'enumVal', MyEnum, None, 1, ), # -10
  (-9, TType.STRING, 'binaryVal', False, None, 1, ), # -9
  (-8, TType.STRING, 'stringVal', True, None, 1, ), # -8
  (-7, TType.DOUBLE, 'doubleVal', None, None, 1, ), # -7
  (-6, TType.FLOAT, 'floatVal', None, None, 1, ), # -6
  (-5, TType.I64, 'i64Val', None, None, 1, ), # -5
  (-4, TType.I32, 'i32Val', None, None, 1, ), # -4
  (-3, TType.I16, 'i16Val', None, None, 1, ), # -3
  (-2, TType.BYTE, 'byteVal', None, None, 1, ), # -2
  (-1, TType.BOOL, 'boolVal', None, None, 1, ), # -1
  (1, TType.STRUCT, 'structWithFieldCustomDefault', [MyData, MyData.thrift_spec, False], None, 1, ), # 1
)))

MyStructEnsureStruct.thrift_struct_annotations = {
}
MyStructEnsureStruct.thrift_field_annotations = {
  -32: {
    "thrift.box": "",
  },
  -25: {
    "thrift.box": "",
  },
  -24: {
    "thrift.box": "",
  },
  -13: {
    "thrift.box": "",
  },
  -12: {
    "thrift.box": "",
  },
  -11: {
    "thrift.box": "",
  },
  1: {
    "thrift.box": "",
  },
}

def MyStructEnsureStruct__init__(self, structWithCustomDefault=None, i32WithCustomDefault=None, mapMap=None, listMap=None, optMapVal=None, optSetVal=None, optListVal=None, optLateStructVal=None, optStructVal=None, optEnumVal=None, optBinaryVal=None, optStringVal=None, optDoubleVal=None, optFloatVal=None, optI64Val=None, optI32Val=None, optI16Val=None, optByteVal=None, optBoolVal=None, lateStructVal=None, unionVal=None, structVal=None, enumVal=None, binaryVal=None, stringVal=None, doubleVal=None, floatVal=None, i64Val=None, i32Val=None, i16Val=None, byteVal=None, boolVal=None, structWithFieldCustomDefault=None,):
  self.structWithCustomDefault = structWithCustomDefault
  self.i32WithCustomDefault = i32WithCustomDefault
  self.mapMap = mapMap
  self.listMap = listMap
  self.optMapVal = optMapVal
  self.optSetVal = optSetVal
  self.optListVal = optListVal
  self.optLateStructVal = optLateStructVal
  self.optStructVal = optStructVal
  self.optEnumVal = optEnumVal
  self.optBinaryVal = optBinaryVal
  self.optStringVal = optStringVal
  self.optDoubleVal = optDoubleVal
  self.optFloatVal = optFloatVal
  self.optI64Val = optI64Val
  self.optI32Val = optI32Val
  self.optI16Val = optI16Val
  self.optByteVal = optByteVal
  self.optBoolVal = optBoolVal
  self.lateStructVal = lateStructVal
  self.unionVal = unionVal
  self.structVal = structVal
  self.enumVal = enumVal
  self.binaryVal = binaryVal
  self.stringVal = stringVal
  self.doubleVal = doubleVal
  self.floatVal = floatVal
  self.i64Val = i64Val
  self.i32Val = i32Val
  self.i16Val = i16Val
  self.byteVal = byteVal
  self.boolVal = boolVal
  self.structWithFieldCustomDefault = structWithFieldCustomDefault

MyStructEnsureStruct.__init__ = MyStructEnsureStruct__init__

def MyStructEnsureStruct__setstate__(self, state):
  state.setdefault('structWithCustomDefault', None)
  state.setdefault('i32WithCustomDefault', None)
  state.setdefault('mapMap', None)
  state.setdefault('listMap', None)
  state.setdefault('optMapVal', None)
  state.setdefault('optSetVal', None)
  state.setdefault('optListVal', None)
  state.setdefault('optLateStructVal', None)
  state.setdefault('optStructVal', None)
  state.setdefault('optEnumVal', None)
  state.setdefault('optBinaryVal', None)
  state.setdefault('optStringVal', None)
  state.setdefault('optDoubleVal', None)
  state.setdefault('optFloatVal', None)
  state.setdefault('optI64Val', None)
  state.setdefault('optI32Val', None)
  state.setdefault('optI16Val', None)
  state.setdefault('optByteVal', None)
  state.setdefault('optBoolVal', None)
  state.setdefault('lateStructVal', None)
  state.setdefault('unionVal', None)
  state.setdefault('structVal', None)
  state.setdefault('enumVal', None)
  state.setdefault('binaryVal', None)
  state.setdefault('stringVal', None)
  state.setdefault('doubleVal', None)
  state.setdefault('floatVal', None)
  state.setdefault('i64Val', None)
  state.setdefault('i32Val', None)
  state.setdefault('i16Val', None)
  state.setdefault('byteVal', None)
  state.setdefault('boolVal', None)
  state.setdefault('structWithFieldCustomDefault', None)
  self.__dict__ = state

MyStructEnsureStruct.__getstate__ = lambda self: self.__dict__.copy()
MyStructEnsureStruct.__setstate__ = MyStructEnsureStruct__setstate__

all_structs.append(LateDefStructPatch)
LateDefStructPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRUCT, 'assign', [LateDefStruct, LateDefStruct.thrift_spec, False], None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
  (3, TType.STRUCT, 'patchPrior', [LateDefStructFieldPatch, LateDefStructFieldPatch.thrift_spec, False], None, 3, ), # 3
  (5, TType.STRUCT, 'ensure', [LateDefStructEnsureStruct, LateDefStructEnsureStruct.thrift_spec, False], None, 3, ), # 5
  (6, TType.STRUCT, 'patch', [LateDefStructFieldPatch, LateDefStructFieldPatch.thrift_spec, False], None, 3, ), # 6
  (7, TType.LIST, 'remove', (TType.I16,None), None, 3, ), # 7
)))

LateDefStructPatch.thrift_struct_annotations = {
}
LateDefStructPatch.thrift_field_annotations = {
  1: {
    "thrift.box": "",
  },
  3: {
    "rust.box": "",
  },
  5: {
    "rust.box": "",
  },
  6: {
    "rust.box": "",
  },
  7: {
    "rust.box": "",
  },
}

def LateDefStructPatch__init__(self, assign=None, clear=None, patchPrior=None, ensure=None, patch=None, remove=None,):
  self.assign = assign
  self.clear = clear
  self.patchPrior = patchPrior
  self.ensure = ensure
  self.patch = patch
  self.remove = remove

LateDefStructPatch.__init__ = LateDefStructPatch__init__

def LateDefStructPatch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  state.setdefault('patchPrior', None)
  state.setdefault('ensure', None)
  state.setdefault('patch', None)
  state.setdefault('remove', None)
  self.__dict__ = state

LateDefStructPatch.__getstate__ = lambda self: self.__dict__.copy()
LateDefStructPatch.__setstate__ = LateDefStructPatch__setstate__

all_structs.append(LateDefStructFieldPatch)
LateDefStructFieldPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
)))

LateDefStructFieldPatch.thrift_struct_annotations = {
}
LateDefStructFieldPatch.thrift_field_annotations = {
}

all_structs.append(LateDefStructEnsureStruct)
LateDefStructEnsureStruct.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
)))

LateDefStructEnsureStruct.thrift_struct_annotations = {
}
LateDefStructEnsureStruct.thrift_field_annotations = {
}

all_structs.append(RecursivePatch)
RecursivePatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRUCT, 'assign', [Recursive, Recursive.thrift_spec, False], None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
  (3, TType.STRUCT, 'patchPrior', [RecursiveFieldPatch, RecursiveFieldPatch.thrift_spec, False], None, 3, ), # 3
  (5, TType.STRUCT, 'ensure', [RecursiveEnsureStruct, RecursiveEnsureStruct.thrift_spec, False], None, 3, ), # 5
  (6, TType.STRUCT, 'patch', [RecursiveFieldPatch, RecursiveFieldPatch.thrift_spec, False], None, 3, ), # 6
  (7, TType.LIST, 'remove', (TType.I16,None), None, 3, ), # 7
)))

RecursivePatch.thrift_struct_annotations = {
}
RecursivePatch.thrift_field_annotations = {
  1: {
    "thrift.box": "",
  },
  3: {
    "rust.box": "",
  },
  5: {
    "rust.box": "",
  },
  6: {
    "rust.box": "",
  },
  7: {
    "rust.box": "",
  },
}

def RecursivePatch__init__(self, assign=None, clear=None, patchPrior=None, ensure=None, patch=None, remove=None,):
  self.assign = assign
  self.clear = clear
  self.patchPrior = patchPrior
  self.ensure = ensure
  self.patch = patch
  self.remove = remove

RecursivePatch.__init__ = RecursivePatch__init__

def RecursivePatch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  state.setdefault('patchPrior', None)
  state.setdefault('ensure', None)
  state.setdefault('patch', None)
  state.setdefault('remove', None)
  self.__dict__ = state

RecursivePatch.__getstate__ = lambda self: self.__dict__.copy()
RecursivePatch.__setstate__ = RecursivePatch__setstate__

all_structs.append(RecursiveField1Patch)
RecursiveField1Patch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.MAP, 'assign', (TType.STRING,True,TType.STRUCT,[Recursive, Recursive.thrift_spec, False]), None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
)))

RecursiveField1Patch.thrift_struct_annotations = {
}
RecursiveField1Patch.thrift_field_annotations = {
}

def RecursiveField1Patch__init__(self, assign=None, clear=None,):
  self.assign = assign
  self.clear = clear

RecursiveField1Patch.__init__ = RecursiveField1Patch__init__

def RecursiveField1Patch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  self.__dict__ = state

RecursiveField1Patch.__getstate__ = lambda self: self.__dict__.copy()
RecursiveField1Patch.__setstate__ = RecursiveField1Patch__setstate__

all_structs.append(RecursiveFieldPatch)
RecursiveFieldPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (-1, TType.STRUCT, 'nodes', [RecursiveField1Patch, RecursiveField1Patch.thrift_spec, False], None, 3, ), # -1
)))

RecursiveFieldPatch.thrift_struct_annotations = {
}
RecursiveFieldPatch.thrift_field_annotations = {
}

def RecursiveFieldPatch__init__(self, nodes=None,):
  self.nodes = nodes

RecursiveFieldPatch.__init__ = RecursiveFieldPatch__init__

def RecursiveFieldPatch__setstate__(self, state):
  state.setdefault('nodes', None)
  self.__dict__ = state

RecursiveFieldPatch.__getstate__ = lambda self: self.__dict__.copy()
RecursiveFieldPatch.__setstate__ = RecursiveFieldPatch__setstate__

all_structs.append(RecursiveEnsureStruct)
RecursiveEnsureStruct.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (-1, TType.MAP, 'nodes', (TType.STRING,True,TType.STRUCT,[Recursive, Recursive.thrift_spec, False]), None, 1, ), # -1
)))

RecursiveEnsureStruct.thrift_struct_annotations = {
}
RecursiveEnsureStruct.thrift_field_annotations = {
}

def RecursiveEnsureStruct__init__(self, nodes=None,):
  self.nodes = nodes

RecursiveEnsureStruct.__init__ = RecursiveEnsureStruct__init__

def RecursiveEnsureStruct__setstate__(self, state):
  state.setdefault('nodes', None)
  self.__dict__ = state

RecursiveEnsureStruct.__getstate__ = lambda self: self.__dict__.copy()
RecursiveEnsureStruct.__setstate__ = RecursiveEnsureStruct__setstate__

all_structs.append(BarPatch)
BarPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRUCT, 'assign', [Bar, Bar.thrift_spec, False], None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
  (3, TType.STRUCT, 'patchPrior', [BarFieldPatch, BarFieldPatch.thrift_spec, False], None, 3, ), # 3
  (5, TType.STRUCT, 'ensure', [BarEnsureStruct, BarEnsureStruct.thrift_spec, False], None, 3, ), # 5
  (6, TType.STRUCT, 'patch', [BarFieldPatch, BarFieldPatch.thrift_spec, False], None, 3, ), # 6
  (7, TType.LIST, 'remove', (TType.I16,None), None, 3, ), # 7
)))

BarPatch.thrift_struct_annotations = {
}
BarPatch.thrift_field_annotations = {
  1: {
    "thrift.box": "",
  },
  3: {
    "rust.box": "",
  },
  5: {
    "rust.box": "",
  },
  6: {
    "rust.box": "",
  },
  7: {
    "rust.box": "",
  },
}

def BarPatch__init__(self, assign=None, clear=None, patchPrior=None, ensure=None, patch=None, remove=None,):
  self.assign = assign
  self.clear = clear
  self.patchPrior = patchPrior
  self.ensure = ensure
  self.patch = patch
  self.remove = remove

BarPatch.__init__ = BarPatch__init__

def BarPatch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  state.setdefault('patchPrior', None)
  state.setdefault('ensure', None)
  state.setdefault('patch', None)
  state.setdefault('remove', None)
  self.__dict__ = state

BarPatch.__getstate__ = lambda self: self.__dict__.copy()
BarPatch.__setstate__ = BarPatch__setstate__

all_structs.append(BarFieldPatch)
BarFieldPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (-1, TType.STRUCT, 'loop', [LoopPatch, LoopPatch.thrift_spec, False], None, 3, ), # -1
)))

BarFieldPatch.thrift_struct_annotations = {
}
BarFieldPatch.thrift_field_annotations = {
}

def BarFieldPatch__init__(self, loop=None,):
  self.loop = loop

BarFieldPatch.__init__ = BarFieldPatch__init__

def BarFieldPatch__setstate__(self, state):
  state.setdefault('loop', None)
  self.__dict__ = state

BarFieldPatch.__getstate__ = lambda self: self.__dict__.copy()
BarFieldPatch.__setstate__ = BarFieldPatch__setstate__

all_structs.append(BarEnsureStruct)
BarEnsureStruct.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (-1, TType.STRUCT, 'loop', [Loop, Loop.thrift_spec, False], None, 1, ), # -1
)))

BarEnsureStruct.thrift_struct_annotations = {
}
BarEnsureStruct.thrift_field_annotations = {
  -1: {
    "thrift.box": "",
  },
}

def BarEnsureStruct__init__(self, loop=None,):
  self.loop = loop

BarEnsureStruct.__init__ = BarEnsureStruct__init__

def BarEnsureStruct__setstate__(self, state):
  state.setdefault('loop', None)
  self.__dict__ = state

BarEnsureStruct.__getstate__ = lambda self: self.__dict__.copy()
BarEnsureStruct.__setstate__ = BarEnsureStruct__setstate__

all_structs.append(LoopPatch)
LoopPatch.thrift_spec = tuple(__EXPAND_THRIFT_SPEC((
  (1, TType.STRUCT, 'assign', [Loop, Loop.thrift_spec, False], None, 1, ), # 1
  (2, TType.BOOL, 'clear', None, None, 3, ), # 2
)))

LoopPatch.thrift_struct_annotations = {
}
LoopPatch.thrift_field_annotations = {
  1: {
    "thrift.box": "",
  },
}

def LoopPatch__init__(self, assign=None, clear=None,):
  self.assign = assign
  self.clear = clear

LoopPatch.__init__ = LoopPatch__init__

def LoopPatch__setstate__(self, state):
  state.setdefault('assign', None)
  state.setdefault('clear', None)
  self.__dict__ = state

LoopPatch.__getstate__ = lambda self: self.__dict__.copy()
LoopPatch.__setstate__ = LoopPatch__setstate__

fix_spec(all_structs)
del all_structs
