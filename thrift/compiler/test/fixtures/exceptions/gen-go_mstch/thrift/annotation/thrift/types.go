// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package thrift // [[[ program thrift source path ]]]

import (
    "fmt"
    "strings"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)


// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = thrift.ZERO
var _ = strings.Split


type Experimental struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Experimental{}

func NewExperimental() *Experimental {
    return (&Experimental{})
}


// Deprecated: Use Experimental.Set* methods instead or set the fields directly.
type ExperimentalBuilder struct {
    obj *Experimental
}

func NewExperimentalBuilder() *ExperimentalBuilder {
    return &ExperimentalBuilder{
        obj: NewExperimental(),
    }
}

func (x *ExperimentalBuilder) Emit() *Experimental {
    var objCopy Experimental = *x.obj
    return &objCopy
}

func (x *Experimental) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Experimental"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Experimental) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Experimental) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Experimental({")
    sb.WriteString("})")

    return sb.String()
}

type ReserveIds struct {
    Ids []int32 `thrift:"ids,1" json:"ids" db:"ids"`
    IdRanges map[int32]int32 `thrift:"id_ranges,2" json:"id_ranges" db:"id_ranges"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ReserveIds{}

func NewReserveIds() *ReserveIds {
    return (&ReserveIds{}).
        SetIdsNonCompat(nil).
        SetIdRangesNonCompat(nil)
}

func (x *ReserveIds) GetIdsNonCompat() []int32 {
    return x.Ids
}

func (x *ReserveIds) GetIds() []int32 {
    if !x.IsSetIds() {
        return nil
    }

    return x.Ids
}

func (x *ReserveIds) GetIdRangesNonCompat() map[int32]int32 {
    return x.IdRanges
}

func (x *ReserveIds) GetIdRanges() map[int32]int32 {
    if !x.IsSetIdRanges() {
        return nil
    }

    return x.IdRanges
}

func (x *ReserveIds) SetIdsNonCompat(value []int32) *ReserveIds {
    x.Ids = value
    return x
}

func (x *ReserveIds) SetIds(value []int32) *ReserveIds {
    x.Ids = value
    return x
}

func (x *ReserveIds) SetIdRangesNonCompat(value map[int32]int32) *ReserveIds {
    x.IdRanges = value
    return x
}

func (x *ReserveIds) SetIdRanges(value map[int32]int32) *ReserveIds {
    x.IdRanges = value
    return x
}

func (x *ReserveIds) IsSetIds() bool {
    return x.Ids != nil
}

func (x *ReserveIds) IsSetIdRanges() bool {
    return x.IdRanges != nil
}

func (x *ReserveIds) writeField1(p thrift.Protocol) error {  // Ids
    if !x.IsSetIds() {
        return nil
    }

    if err := p.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIdsNonCompat()
    if err := p.WriteListBegin(thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ReserveIds) writeField2(p thrift.Protocol) error {  // IdRanges
    if !x.IsSetIdRanges() {
        return nil
    }

    if err := p.WriteFieldBegin("id_ranges", thrift.MAP, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetIdRangesNonCompat()
    if err := p.WriteMapBegin(thrift.I32, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI32(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ReserveIds) readField1(p thrift.Protocol) error {  // Ids
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int32, 0, size)
for i := 0; i < size; i++ {
    var elem int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetIdsNonCompat(result)
    return nil
}

func (x *ReserveIds) readField2(p thrift.Protocol) error {  // IdRanges
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[int32]int32, size)
for i := 0; i < size; i++ {
    var key int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetIdRangesNonCompat(result)
    return nil
}

func (x *ReserveIds) toString1() string {  // Ids
    return fmt.Sprintf("%v", x.GetIdsNonCompat())
}

func (x *ReserveIds) toString2() string {  // IdRanges
    return fmt.Sprintf("%v", x.GetIdRangesNonCompat())
}


// Deprecated: Use ReserveIds.Set* methods instead or set the fields directly.
type ReserveIdsBuilder struct {
    obj *ReserveIds
}

func NewReserveIdsBuilder() *ReserveIdsBuilder {
    return &ReserveIdsBuilder{
        obj: NewReserveIds(),
    }
}

func (x *ReserveIdsBuilder) Ids(value []int32) *ReserveIdsBuilder {
    x.obj.Ids = value
    return x
}

func (x *ReserveIdsBuilder) IdRanges(value map[int32]int32) *ReserveIdsBuilder {
    x.obj.IdRanges = value
    return x
}

func (x *ReserveIdsBuilder) Emit() *ReserveIds {
    var objCopy ReserveIds = *x.obj
    return &objCopy
}

func (x *ReserveIds) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("ReserveIds"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ReserveIds) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // ids
            expectedType := thrift.Type(thrift.LIST)
            if wireType == expectedType {
                if err := x.readField1(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        case 2:  // id_ranges
            expectedType := thrift.Type(thrift.MAP)
            if wireType == expectedType {
                if err := x.readField2(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ReserveIds) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ReserveIds({")
    sb.WriteString(fmt.Sprintf("Ids:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("IdRanges:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type RequiresBackwardCompatibility struct {
    FieldName bool `thrift:"field_name,1" json:"field_name" db:"field_name"`
}
// Compile time interface enforcer
var _ thrift.Struct = &RequiresBackwardCompatibility{}

func NewRequiresBackwardCompatibility() *RequiresBackwardCompatibility {
    return (&RequiresBackwardCompatibility{}).
        SetFieldNameNonCompat(false)
}

func (x *RequiresBackwardCompatibility) GetFieldNameNonCompat() bool {
    return x.FieldName
}

func (x *RequiresBackwardCompatibility) GetFieldName() bool {
    return x.FieldName
}

func (x *RequiresBackwardCompatibility) SetFieldNameNonCompat(value bool) *RequiresBackwardCompatibility {
    x.FieldName = value
    return x
}

func (x *RequiresBackwardCompatibility) SetFieldName(value bool) *RequiresBackwardCompatibility {
    x.FieldName = value
    return x
}

func (x *RequiresBackwardCompatibility) writeField1(p thrift.Protocol) error {  // FieldName
    if err := p.WriteFieldBegin("field_name", thrift.BOOL, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFieldNameNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RequiresBackwardCompatibility) readField1(p thrift.Protocol) error {  // FieldName
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetFieldNameNonCompat(result)
    return nil
}

func (x *RequiresBackwardCompatibility) toString1() string {  // FieldName
    return fmt.Sprintf("%v", x.GetFieldNameNonCompat())
}


// Deprecated: Use RequiresBackwardCompatibility.Set* methods instead or set the fields directly.
type RequiresBackwardCompatibilityBuilder struct {
    obj *RequiresBackwardCompatibility
}

func NewRequiresBackwardCompatibilityBuilder() *RequiresBackwardCompatibilityBuilder {
    return &RequiresBackwardCompatibilityBuilder{
        obj: NewRequiresBackwardCompatibility(),
    }
}

func (x *RequiresBackwardCompatibilityBuilder) FieldName(value bool) *RequiresBackwardCompatibilityBuilder {
    x.obj.FieldName = value
    return x
}

func (x *RequiresBackwardCompatibilityBuilder) Emit() *RequiresBackwardCompatibility {
    var objCopy RequiresBackwardCompatibility = *x.obj
    return &objCopy
}

func (x *RequiresBackwardCompatibility) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("RequiresBackwardCompatibility"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RequiresBackwardCompatibility) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // field_name
            expectedType := thrift.Type(thrift.BOOL)
            if wireType == expectedType {
                if err := x.readField1(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RequiresBackwardCompatibility) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RequiresBackwardCompatibility({")
    sb.WriteString(fmt.Sprintf("FieldName:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type TerseWrite struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &TerseWrite{}

func NewTerseWrite() *TerseWrite {
    return (&TerseWrite{})
}


// Deprecated: Use TerseWrite.Set* methods instead or set the fields directly.
type TerseWriteBuilder struct {
    obj *TerseWrite
}

func NewTerseWriteBuilder() *TerseWriteBuilder {
    return &TerseWriteBuilder{
        obj: NewTerseWrite(),
    }
}

func (x *TerseWriteBuilder) Emit() *TerseWrite {
    var objCopy TerseWrite = *x.obj
    return &objCopy
}

func (x *TerseWrite) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("TerseWrite"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *TerseWrite) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *TerseWrite) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("TerseWrite({")
    sb.WriteString("})")

    return sb.String()
}

type Box struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Box{}

func NewBox() *Box {
    return (&Box{})
}


// Deprecated: Use Box.Set* methods instead or set the fields directly.
type BoxBuilder struct {
    obj *Box
}

func NewBoxBuilder() *BoxBuilder {
    return &BoxBuilder{
        obj: NewBox(),
    }
}

func (x *BoxBuilder) Emit() *Box {
    var objCopy Box = *x.obj
    return &objCopy
}

func (x *Box) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Box"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Box) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Box) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Box({")
    sb.WriteString("})")

    return sb.String()
}

type Mixin struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Mixin{}

func NewMixin() *Mixin {
    return (&Mixin{})
}


// Deprecated: Use Mixin.Set* methods instead or set the fields directly.
type MixinBuilder struct {
    obj *Mixin
}

func NewMixinBuilder() *MixinBuilder {
    return &MixinBuilder{
        obj: NewMixin(),
    }
}

func (x *MixinBuilder) Emit() *Mixin {
    var objCopy Mixin = *x.obj
    return &objCopy
}

func (x *Mixin) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Mixin"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Mixin) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Mixin) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Mixin({")
    sb.WriteString("})")

    return sb.String()
}

type SerializeInFieldIdOrder struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &SerializeInFieldIdOrder{}

func NewSerializeInFieldIdOrder() *SerializeInFieldIdOrder {
    return (&SerializeInFieldIdOrder{})
}


// Deprecated: Use SerializeInFieldIdOrder.Set* methods instead or set the fields directly.
type SerializeInFieldIdOrderBuilder struct {
    obj *SerializeInFieldIdOrder
}

func NewSerializeInFieldIdOrderBuilder() *SerializeInFieldIdOrderBuilder {
    return &SerializeInFieldIdOrderBuilder{
        obj: NewSerializeInFieldIdOrder(),
    }
}

func (x *SerializeInFieldIdOrderBuilder) Emit() *SerializeInFieldIdOrder {
    var objCopy SerializeInFieldIdOrder = *x.obj
    return &objCopy
}

func (x *SerializeInFieldIdOrder) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("SerializeInFieldIdOrder"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *SerializeInFieldIdOrder) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *SerializeInFieldIdOrder) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("SerializeInFieldIdOrder({")
    sb.WriteString("})")

    return sb.String()
}

type BitmaskEnum struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &BitmaskEnum{}

func NewBitmaskEnum() *BitmaskEnum {
    return (&BitmaskEnum{})
}


// Deprecated: Use BitmaskEnum.Set* methods instead or set the fields directly.
type BitmaskEnumBuilder struct {
    obj *BitmaskEnum
}

func NewBitmaskEnumBuilder() *BitmaskEnumBuilder {
    return &BitmaskEnumBuilder{
        obj: NewBitmaskEnum(),
    }
}

func (x *BitmaskEnumBuilder) Emit() *BitmaskEnum {
    var objCopy BitmaskEnum = *x.obj
    return &objCopy
}

func (x *BitmaskEnum) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("BitmaskEnum"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *BitmaskEnum) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *BitmaskEnum) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("BitmaskEnum({")
    sb.WriteString("})")

    return sb.String()
}

type ExceptionMessage struct {
    Field string `thrift:"field,1" json:"field" db:"field"`
}
// Compile time interface enforcer
var _ thrift.Struct = &ExceptionMessage{}

func NewExceptionMessage() *ExceptionMessage {
    return (&ExceptionMessage{}).
        SetFieldNonCompat("")
}

func (x *ExceptionMessage) GetFieldNonCompat() string {
    return x.Field
}

func (x *ExceptionMessage) GetField() string {
    return x.Field
}

func (x *ExceptionMessage) SetFieldNonCompat(value string) *ExceptionMessage {
    x.Field = value
    return x
}

func (x *ExceptionMessage) SetField(value string) *ExceptionMessage {
    x.Field = value
    return x
}

func (x *ExceptionMessage) writeField1(p thrift.Protocol) error {  // Field
    if err := p.WriteFieldBegin("field", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFieldNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *ExceptionMessage) readField1(p thrift.Protocol) error {  // Field
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetFieldNonCompat(result)
    return nil
}

func (x *ExceptionMessage) toString1() string {  // Field
    return fmt.Sprintf("%v", x.GetFieldNonCompat())
}


// Deprecated: Use ExceptionMessage.Set* methods instead or set the fields directly.
type ExceptionMessageBuilder struct {
    obj *ExceptionMessage
}

func NewExceptionMessageBuilder() *ExceptionMessageBuilder {
    return &ExceptionMessageBuilder{
        obj: NewExceptionMessage(),
    }
}

func (x *ExceptionMessageBuilder) Field(value string) *ExceptionMessageBuilder {
    x.obj.Field = value
    return x
}

func (x *ExceptionMessageBuilder) Emit() *ExceptionMessage {
    var objCopy ExceptionMessage = *x.obj
    return &objCopy
}

func (x *ExceptionMessage) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("ExceptionMessage"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *ExceptionMessage) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // field
            expectedType := thrift.Type(thrift.STRING)
            if wireType == expectedType {
                if err := x.readField1(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *ExceptionMessage) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("ExceptionMessage({")
    sb.WriteString(fmt.Sprintf("Field:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type GenerateRuntimeSchema struct {
    Name string `thrift:"name,1" json:"name" db:"name"`
}
// Compile time interface enforcer
var _ thrift.Struct = &GenerateRuntimeSchema{}

func NewGenerateRuntimeSchema() *GenerateRuntimeSchema {
    return (&GenerateRuntimeSchema{}).
        SetNameNonCompat("")
}

func (x *GenerateRuntimeSchema) GetNameNonCompat() string {
    return x.Name
}

func (x *GenerateRuntimeSchema) GetName() string {
    return x.Name
}

func (x *GenerateRuntimeSchema) SetNameNonCompat(value string) *GenerateRuntimeSchema {
    x.Name = value
    return x
}

func (x *GenerateRuntimeSchema) SetName(value string) *GenerateRuntimeSchema {
    x.Name = value
    return x
}

func (x *GenerateRuntimeSchema) writeField1(p thrift.Protocol) error {  // Name
    if err := p.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNameNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *GenerateRuntimeSchema) readField1(p thrift.Protocol) error {  // Name
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetNameNonCompat(result)
    return nil
}

func (x *GenerateRuntimeSchema) toString1() string {  // Name
    return fmt.Sprintf("%v", x.GetNameNonCompat())
}


// Deprecated: Use GenerateRuntimeSchema.Set* methods instead or set the fields directly.
type GenerateRuntimeSchemaBuilder struct {
    obj *GenerateRuntimeSchema
}

func NewGenerateRuntimeSchemaBuilder() *GenerateRuntimeSchemaBuilder {
    return &GenerateRuntimeSchemaBuilder{
        obj: NewGenerateRuntimeSchema(),
    }
}

func (x *GenerateRuntimeSchemaBuilder) Name(value string) *GenerateRuntimeSchemaBuilder {
    x.obj.Name = value
    return x
}

func (x *GenerateRuntimeSchemaBuilder) Emit() *GenerateRuntimeSchema {
    var objCopy GenerateRuntimeSchema = *x.obj
    return &objCopy
}

func (x *GenerateRuntimeSchema) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("GenerateRuntimeSchema"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *GenerateRuntimeSchema) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // name
            expectedType := thrift.Type(thrift.STRING)
            if wireType == expectedType {
                if err := x.readField1(p); err != nil {
                   return err
                }
            } else {
                if err := p.Skip(wireType); err != nil {
                    return err
                }
            }
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *GenerateRuntimeSchema) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("GenerateRuntimeSchema({")
    sb.WriteString(fmt.Sprintf("Name:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type InternBox struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &InternBox{}

func NewInternBox() *InternBox {
    return (&InternBox{})
}


// Deprecated: Use InternBox.Set* methods instead or set the fields directly.
type InternBoxBuilder struct {
    obj *InternBox
}

func NewInternBoxBuilder() *InternBoxBuilder {
    return &InternBoxBuilder{
        obj: NewInternBox(),
    }
}

func (x *InternBoxBuilder) Emit() *InternBox {
    var objCopy InternBox = *x.obj
    return &objCopy
}

func (x *InternBox) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("InternBox"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *InternBox) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }
    }

    if err := p.ReadFieldEnd(); err != nil {
        return err
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *InternBox) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("InternBox({")
    sb.WriteString("})")

    return sb.String()
}

// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
	  RegisterType(name string, initializer func() any)
}) {
    registry.RegisterType("facebook.com/thrift/annotation/Experimental", func() any { return NewExperimental() })
    registry.RegisterType("facebook.com/thrift/annotation/ReserveIds", func() any { return NewReserveIds() })
    registry.RegisterType("facebook.com/thrift/annotation/RequiresBackwardCompatibility", func() any { return NewRequiresBackwardCompatibility() })
    registry.RegisterType("facebook.com/thrift/annotation/TerseWrite", func() any { return NewTerseWrite() })
    registry.RegisterType("facebook.com/thrift/annotation/Box", func() any { return NewBox() })
    registry.RegisterType("facebook.com/thrift/annotation/Mixin", func() any { return NewMixin() })
    registry.RegisterType("facebook.com/thrift/annotation/SerializeInFieldIdOrder", func() any { return NewSerializeInFieldIdOrder() })
    registry.RegisterType("facebook.com/thrift/annotation/BitmaskEnum", func() any { return NewBitmaskEnum() })
    registry.RegisterType("facebook.com/thrift/annotation/ExceptionMessage", func() any { return NewExceptionMessage() })
    registry.RegisterType("facebook.com/thrift/annotation/GenerateRuntimeSchema", func() any { return NewGenerateRuntimeSchema() })
    registry.RegisterType("facebook.com/thrift/annotation/InternBox", func() any { return NewInternBox() })

}
