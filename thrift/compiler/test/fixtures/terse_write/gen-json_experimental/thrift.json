{
  "__fbthrift": "@generated",
  "thrift_module" : "thrift",
  "includes": {
    "scope": "thrift/annotation/scope.thrift"
  },
  "namespaces": {
    "go": "thrift.annotation.thrift",
    "java": "com.facebook.thrift.annotation_deprecated",
    "js": "thrift.annotation.thrift",
    "py": "thrift.annotation.thrift",
    "py.asyncio": "facebook_thrift_asyncio.annotation.thrift"
  },
  "package": {
    "domain_prefix": "facebook",
    "domain_suffix": "com",
    "path": "thrift/annotation",
    "filename": "thrift"
  },
  "structs" :
  {
      "Experimental" : {
        "name" : "Experimental",
        "structured_annotations": {
          "scope.Program" : {
        "type" : {
  "type" : "struct",
  "name" : "Program",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Definition" : {
        "type" : {
  "type" : "struct",
  "name" : "Definition",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates a definition/feature should only be used with permission, may\nonly work in specific contexts, and may change in incompatible ways without\nnotice.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 32
      },
      "ReserveIds" : {
        "name" : "ReserveIds",
        "structured_annotations": {
          "scope.Structured" : {
        "type" : {
  "type" : "struct",
  "name" : "Structured",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Enum" : {
        "type" : {
  "type" : "struct",
  "name" : "Enum",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Annotate a thrift structured or enum to indicate if ids or values should not\nbe used.\n\nFor example, you may want to mark ids as deprecated, or these ids\nmight be reserved for other use cases or annotations.\n\nThe resolved set of disallowed ids is the union of the values in `ids` and\nthe range of values represented in `id_ranges`. Example:\n\n // These ids are not allowed: 3, 8, half-open ranges [10, 15), [20, 30)\n @thrift.ReserveIds{ids = [3, 8], id_ranges = {10: 15, 20: 30}}\n struct Foo {\n   ...\n   3: i64 f; // Build failure: 3 cannot be used\n }\n",
        "fields" : {
          "ids" : {
            "name" : "ids",
            "docstring" : "Individual ids that cannot be used.\n",
            "key" : 1,
            "lineno" : 57,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "list",
  "inner_type" : "i32"
}
                  },
          "id_ranges" : {
            "name" : "id_ranges",
            "docstring" : "Represents ranges of ids that cannot be used.\n\nEach (key: value) pair represents the half-open range `[key, value)`,\nwhere `key` is included and `value` is not. For example, the map\n`{10: 15, 20: 30}` represents the union of id/value ranges `[10, 15)` and\n`[20, 30)`.\n",
            "key" : 2,
            "lineno" : 67,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "map",
  "key_type" : "i32",
  "value_type" : "i32"
}
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 53
      },
      "RequiresBackwardCompatibility" : {
        "name" : "RequiresBackwardCompatibility",
        "structured_annotations": {
          "scope.Structured" : {
        "type" : {
  "type" : "struct",
  "name" : "Structured",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates additional backward compatibility restrictions, beyond the\nstandard Thrift required 'wire' compatibility.\n",
        "fields" : {
          "field_name" : {
            "name" : "field_name",
            "default_value" : 0,
            "key" : 1,
            "lineno" : 78,
            "required" : "opt-in-req-out",
            "type" : "bool"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 75
      },
      "TerseWrite" : {
        "name" : "TerseWrite",
        "structured_annotations": {
          "scope.Program" : {
        "type" : {
  "type" : "struct",
  "name" : "Program",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Struct" : {
        "type" : {
  "type" : "struct",
  "name" : "Struct",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Exception" : {
        "type" : {
  "type" : "struct",
  "name" : "Exception",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental"
},
        "value" : {}
      }
        },
        "docstring" : "An annotation that changes the field qualifier from 'none' to 'terse'.\nA terse field is eligible to skip serialization, when it equals to the\nintrinsic default value. It also clears to the intrinsic default value\nbefore deserialization to distinguish between if a terse field was skipped\nor missing during serialization. This is different from an unqualified\nfield, as an unqualified field is always serialized regardless of its value,\nand it is not cleared before deserialization.\n\nThe annotation can be only used to annotate an unqualified field, and when\nit is annotating a struct or exception, it changes all unqualified fields to\nterse fields. Note, the annotation can not be used for union.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 98
      },
      "Box" : {
        "name" : "Box",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates that a field's value should never be stored on the stack.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 106
      },
      "Mixin" : {
        "name" : "Mixin",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 110
      },
      "SerializeInFieldIdOrder" : {
        "name" : "SerializeInFieldIdOrder",
        "structured_annotations": {
          "scope.Struct" : {
        "type" : {
  "type" : "struct",
  "name" : "Struct",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental"
},
        "value" : {}
      }
        },
        "docstring" : "Option to serialize thrift struct in ascending field id order.\n\nThis can potentially make serialized data size smaller in compact protocol,\nsince compact protocol can write deltas between subsequent field ids.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 119
      },
      "BitmaskEnum" : {
        "name" : "BitmaskEnum",
        "structured_annotations": {
          "scope.Enum" : {
        "type" : {
  "type" : "struct",
  "name" : "Enum",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates an enum is a bitmask and should support bit-wise operators.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 126
      },
      "ExceptionMessage" : {
        "name" : "ExceptionMessage",
        "structured_annotations": {
          "scope.Exception" : {
        "type" : {
  "type" : "struct",
  "name" : "Exception",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental"
},
        "value" : {}
      }
        },
        "docstring" : "Specifies the field where the exception message is stored. The field\nis used to generate an additional method to get it.\n",
        "fields" : {
          "field" : {
            "name" : "field",
            "key" : 1,
            "lineno" : 140,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 137
      },
      "GenerateRuntimeSchema" : {
        "name" : "GenerateRuntimeSchema",
        "structured_annotations": {
          "scope.Structured" : {
        "type" : {
  "type" : "struct",
  "name" : "Structured",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Service" : {
        "type" : {
  "type" : "struct",
  "name" : "Service",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Const" : {
        "type" : {
  "type" : "struct",
  "name" : "Const",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Enum" : {
        "type" : {
  "type" : "struct",
  "name" : "Enum",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "scope.Typedef" : {
        "type" : {
  "type" : "struct",
  "name" : "Typedef",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental"
},
        "value" : {}
      }
        },
        "docstring" : "Generates a const of type schema. Struct containing the schema of the\nannotated type. Optionally specify name to override default\nschema<structName>.\n",
        "fields" : {
          "name" : {
            "name" : "name",
            "key" : 1,
            "lineno" : 155,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 148
      },
      "InternBox" : {
        "name" : "InternBox",
        "structured_annotations": {
          "scope.Field" : {
        "type" : {
  "type" : "struct",
  "name" : "Field",
  "path" : "thrift/annotation/scope.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental"
},
        "value" : {}
      }
        },
        "docstring" : "Indicates that a field's value should never be stored on the stack, and that\nidentical values can be shared in immutable contexts.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 162
      }
      },
  "source_path" : "thrift/annotation/thrift",
  "py_namespace" : "thrift.annotation.thrift"
}
